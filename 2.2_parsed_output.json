[
  {
    "example_id": 1,
    "prompt": "What is the average explainability score of creative AI applications in 'Europe' and 'North America' in the 'creative_ai' table?",
    "generated_sql": "SELECT AVG(explainability_score) FROM creative_ai WHERE region = 'Europe' AND region = 'North America'",
    "reference_sql": "SELECT AVG(explainability_score) FROM creative_ai WHERE region IN ('Europe', 'North America');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on region uses AND instead of OR or IN, resulting in no rows returned"
    }
  },
  {
    "example_id": 2,
    "prompt": "Delete all records of rural infrastructure projects in Indonesia that have a completion date before 2010.",
    "generated_sql": "DELETE FROM infrastructure WHERE country = 'Indonesia' AND completion_date < '2010-01-01';",
    "reference_sql": "DELETE FROM rural_infrastructure WHERE country = 'Indonesia' AND completion_date < '2010-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for rural infrastructure projects"
    }
  },
  {
    "example_id": 3,
    "prompt": "How many accidents have been recorded for SpaceX and Blue Origin rocket launches?",
    "generated_sql": "SELECT COUNT(*) FROM accidents WHERE launch_type = 'SpaceX' AND launch_date BETWEEN '2021-01-01' AND '2021-12-31';",
    "reference_sql": "SELECT launch_provider, COUNT(*) FROM Accidents GROUP BY launch_provider;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query only counts SpaceX accidents for 2021 and omits Blue Origin and other time periods."
    }
  },
  {
    "example_id": 4,
    "prompt": "What is the maximum quantity of seafood sold in a single transaction?",
    "generated_sql": "SELECT MAX(quantity) FROM transactions;",
    "reference_sql": "SELECT MAX(quantity) FROM sales;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to restrict transactions to seafood items"
    }
  },
  {
    "example_id": 5,
    "prompt": "What is the total budget for movies released before 2010?",
    "generated_sql": "SELECT SUM(budget) FROM movie_budget WHERE release_year < 2010;",
    "reference_sql": "SELECT SUM(budget) FROM Movies_Release_Year WHERE release_year < 2010;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 6,
    "prompt": "Add a new attorney named 'Oliver Martinez' with email 'oliver.martinez@lawfirm.com' and phone '555-555-5678' to the 'attorneys' table",
    "generated_sql": "INSERT INTO attorneys (id, name, email, phone) VALUES (1, 'Oliver Martinez', 'oliver.martinez@lawfirm.com', '555-555-5678');",
    "reference_sql": "INSERT INTO attorneys (attorney_name, attorney_email, attorney_phone) VALUES ('Oliver Martinez', 'oliver.martinez@lawfirm.com', '555-555-5678');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly specifies a fixed id value; id is typically auto-generated and should be omitted"
    }
  },
  {
    "example_id": 7,
    "prompt": "Identify the top 2 plants with the highest CO2 emissions per ton produced.",
    "generated_sql": "SELECT plant_name, COUNT(*) as CO2_emissions_per_ton FROM CarbonEmissions GROUP BY plant_name ORDER BY CO2_emissions_per_ton DESC LIMIT 2;",
    "reference_sql": "SELECT plant_name, SUM(co2_emission_per_ton_produced) AS total_co2_emission FROM co2_emissions GROUP BY plant_name ORDER BY total_co2_emission DESC LIMIT 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "uses COUNT(*) instead of calculating emissions per ton by dividing total emissions by total production"
    }
  },
  {
    "example_id": 8,
    "prompt": "What is the total cost of all climate communication projects that ended after 2010 in 'Antarctica'?",
    "generated_sql": "SELECT SUM(cost) FROM climate_communication_projects WHERE end_date > '2010-01-01';",
    "reference_sql": "SELECT SUM(total_cost) FROM climate_communication WHERE location = 'Antarctica' AND end_date >= '2010-12-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for Antarctica and incorrect date boundary for projects ending after 2010"
    }
  },
  {
    "example_id": 9,
    "prompt": "List all marine species with their conservation status.",
    "generated_sql": "SELECT species, conservation_status FROM marine_species;",
    "reference_sql": "SELECT name, conservation_status FROM marine_species;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 10,
    "prompt": "What is the average number of publications per researcher for researchers working at the 'National Geographic' organization?",
    "generated_sql": "SELECT AVG(COUNT(*)) FROM researchers WHERE organization = 'National Geographic';",
    "reference_sql": "SELECT organization, AVG(publications) as avg_publications FROM researchers WHERE organization = 'National Geographic';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not join publications table or group by researcher; AVG(COUNT(*)) is invalid"
    }
  },
  {
    "example_id": 11,
    "prompt": "How many decentralized applications have been downloaded from the 'Asia-Pacific' region?",
    "generated_sql": "SELECT COUNT(*) FROM DecentralizedApplications WHERE region = 'Asia-Pacific';",
    "reference_sql": "SELECT SUM(dapp_downloads) FROM dapp_ranking WHERE dapp_region = 'Asia-Pacific';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts applications in region instead of downloads from that region"
    }
  },
  {
    "example_id": 12,
    "prompt": "Identify forests in Canada or the United States with an area larger than 1 million hectares?",
    "generated_sql": "SELECT c.name FROM forests c INNER JOIN countries c_countries ON c.country = c_countries.country WHERE c.type = 'forests' AND c_countries.country IN ('Canada', 'United States');",
    "reference_sql": "SELECT forests.name FROM forests WHERE (forests.country = 'Canada' OR forests.country = 'USA') AND forests.hectares > 1000000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for area > 1 million hectares"
    }
  },
  {
    "example_id": 13,
    "prompt": "What is the maximum response time for emergency calls in the city of Los Angeles?",
    "generated_sql": "SELECT MAX(response_time) FROM Emergency_Calls WHERE city = 'Los Angeles';",
    "reference_sql": "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 14,
    "prompt": "What is the total number of police patrols and community engagement events in each district in January 2021?",
    "generated_sql": "SELECT district, COUNT(*) as total_events FROM police_patrols WHERE date BETWEEN '2021-01-01' AND '2021-01-31' GROUP BY district;",
    "reference_sql": "SELECT d.name, SUM(IF(p.type = 'Patrol', 1, 0)) as num_patrols, SUM(IF(p.type = 'Community', 1, 0)) as num_community FROM districts d JOIN patrols p ON d.id = p.district_id WHERE p.date >= '2021-01-01' AND p.date < '2021-02-01' GROUP BY d.id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query only counts police patrols and does not include community engagement events."
    }
  },
  {
    "example_id": 15,
    "prompt": "What is the average cybersecurity contract value?",
    "generated_sql": "SELECT AVG(value) FROM cybersecurity_contract_values;",
    "reference_sql": "SELECT AVG(value) as avg_value FROM contracts WHERE category = 'Cybersecurity';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No filtering for cybersecurity contracts or correct table schema; selection from an unknown table"
    }
  },
  {
    "example_id": 16,
    "prompt": "Delete arms_imports table records where year is before 2000",
    "generated_sql": "DELETE FROM arms_imports WHERE year < 2000;",
    "reference_sql": "DELETE FROM arms_imports WHERE year < 2000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 17,
    "prompt": "What is the average number of military personnel per country involved in peacekeeping operations?",
    "generated_sql": "SELECT AVG(num_personnel) FROM military_personnel WHERE country IN ('France', 'United Kingdom', 'China');",
    "reference_sql": "SELECT AVG(military_personnel) FROM Peacekeeping_Operations;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query restricts to only three hardcoded countries instead of including all countries involved in peacekeeping operations."
    }
  },
  {
    "example_id": 18,
    "prompt": "What is the maximum daily investment for each client?",
    "generated_sql": "SELECT client_id, MAX(investment) as max_daily_investment FROM clients GROUP BY client_id;",
    "reference_sql": "SELECT client_id, MAX(investment) OVER (PARTITION BY client_id ORDER BY client_id) as max_daily_investment FROM daily_investments;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not aggregate by day first and computes max over single transactions from the clients table instead of daily sums"
    }
  },
  {
    "example_id": 19,
    "prompt": "List the ports with their total cargo weight for 'Fruit' type from the 'CARGO_HANDLING' table.",
    "generated_sql": "SELECT ports.name, SUM(cargo.weight) FROM ports INNER JOIN cargo ON ports.id = cargo.port_id WHERE cargo.type = 'Fruit' GROUP BY ports.name;",
    "reference_sql": "SELECT P.PortName, SUM(CH.Weight) FROM PORTS P JOIN CARGO_HANDLING CH ON P.ID = CH.PortID WHERE CH.CargoType = 'Fruit' GROUP BY P.PortName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses wrong table names (cargo instead of CARGO_HANDLING) and unnecessary join to ports"
    }
  },
  {
    "example_id": 20,
    "prompt": "What is the minimum fuel consumption of container ships built in 2016, grouped by container type?",
    "generated_sql": "SELECT type, MIN(fuel_consumption) FROM container_ships WHERE year = 2016 GROUP BY type;",
    "reference_sql": "SELECT container_type, MIN(fuel_consumption) FROM container_ships WHERE year = 2016 GROUP BY container_type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 21,
    "prompt": "Which rural areas have the highest prevalence of asthma in children?",
    "generated_sql": "SELECT r.name, r.adults.age, r.adults.children.age, r.adults.children.children.children.children.diagnosis_date, COUNT(*) FROM rural_areas r INNER JOIN asthma_children asthma ON r.area_id = asthma.area_id INNER JOIN asthma_children asthma_children ON asthma.area_id = asthma_children.area_id WHERE r.diagnosis = 'Asthma' GROUP BY r.name, r.adults.age, r.adults.children.age, r.ad",
    "reference_sql": "SELECT county, state, AVG(prevalence) AS avg_prevalence FROM asthma WHERE age < 18 AND county LIKE '%rural%' GROUP BY county, state ORDER BY avg_prevalence DESC LIMIT 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not compute prevalence (it only counts asthma cases), uses incorrect joins and unrelated columns, and fails to rank areas by child asthma rates."
    }
  },
  {
    "example_id": 22,
    "prompt": "What is the sum of investments in healthcare for each region?",
    "generated_sql": "SELECT region, SUM(investments) FROM healthcare_investments GROUP BY region;",
    "reference_sql": "SELECT i.region, SUM(i.amount) FROM investments i WHERE i.sector = 'Healthcare' GROUP BY i.region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 23,
    "prompt": "Identify the intelligence operations that have been conducted in the last 5 years, their primary objectives, and the number of personnel involved in each operation.",
    "generated_sql": "SELECT Operation, PrimaryObjective, PrimaryPersonnel FROM IntelligenceOperations WHERE OperationDate >= DATEADD(year, -5, GETDATE()) GROUP BY Operation, PrimaryObjective HAVING COUNT(PrimaryPersonnel) > 0;",
    "reference_sql": "SELECT primary_objective, COUNT(*) as num_personnel FROM intelligence_operations WHERE operation_date >= DATEADD(year, -5, GETDATE()) GROUP BY primary_objective;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query misuses GROUP BY and HAVING, does not correctly aggregate the number of personnel, and selects a non-aggregated column without grouping."
    }
  },
  {
    "example_id": 24,
    "prompt": "How many donors are there in the 'South West' region?",
    "generated_sql": "SELECT COUNT(*) FROM donors WHERE region = 'South West' AND donation_amount > 0;",
    "reference_sql": "SELECT COUNT(*) FROM Donors WHERE region = 'South West';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters by donation_amount > 0, which is not required to count donors in the region."
    }
  },
  {
    "example_id": 25,
    "prompt": "What is the total amount donated to each program?",
    "generated_sql": "SELECT ProgramName, SUM(DonationAmount) as TotalDonated FROM Donors GROUP BY ProgramName;",
    "reference_sql": "SELECT Programs.ProgramName, SUM(Donations.DonationAmount) AS TotalDonatedAmount FROM Programs INNER JOIN DonorsPrograms ON Programs.ProgramID = DonorsPrograms.ProgramID INNER JOIN Donations ON DonorsPrograms.DonorID = Donations.DonorID GROUP BY Programs.ProgramName;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 26,
    "prompt": "What was the average donation amount for each quarter in 2022?",
    "generated_sql": "SELECT quarter, AVG(donation) as avg_donation_amount FROM donations WHERE YEAR(donation_date) = 2022 GROUP BY quarter;",
    "reference_sql": "SELECT DATE_FORMAT(DonationDate, '%Y-%m') as Quarter, AVG(DonationAmount) as AvgDonation FROM Donations GROUP BY Quarter ORDER BY Quarter;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a quarter column exists instead of extracting the quarter from donation_date"
    }
  },
  {
    "example_id": 27,
    "prompt": "Insert a new student with a unique student_id, district_id, and mental_health_score, and update the district's average mental health score accordingly.",
    "generated_sql": "INSERT INTO students (id, district_id, mental_health_score) VALUES (NULL, 1, 80.0);",
    "reference_sql": "INSERT INTO students (student_id, district_id, mental_health_score) VALUES (12345, 6789, 75); UPDATE school_districts sd SET sd.average_mental_health_score = (SELECT AVG(s.mental_health_score) FROM students s WHERE s.district_id = sd.district_id) WHERE sd.district_id = 6789;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not update the district's average mental health score"
    }
  },
  {
    "example_id": 28,
    "prompt": "Which are the courses that are not taken by any students in grade 12 and do not use open pedagogy?",
    "generated_sql": "SELECT c.course_name FROM courses c JOIN students s ON c.student_id = s.student_id WHERE s.student_id IS NULL AND c.course_id IS NULL;",
    "reference_sql": "SELECT Name FROM Courses WHERE NOT EXISTS (SELECT 1 FROM Students WHERE GradeLevel = 12 AND Courses.CourseID = Students.StudentID) AND OpenPedagogy = FALSE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses an incorrect join, lacks filters for grade and pedagogy, and conditions always fail."
    }
  },
  {
    "example_id": 29,
    "prompt": "What is the average salary for each department in 2022?",
    "generated_sql": "SELECT d.name, AVG(salary) FROM departments d JOIN salaries s ON d.department_id = s.department_id WHERE s.year = 2022 GROUP BY d.name;",
    "reference_sql": "SELECT Department, AVG(Salary) FROM Employees WHERE YEAR(HireDate) = 2022 GROUP BY Department;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 30,
    "prompt": "How many wind farms were installed in Canada between 2015 and 2018?",
    "generated_sql": "SELECT COUNT(*) FROM wind_farms WHERE country = 'Canada' AND installed_year BETWEEN 2015 AND 2018;",
    "reference_sql": "SELECT COUNT(*) FROM wind_farms WHERE country = 'Canada' AND installation_year BETWEEN 2015 AND 2018;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 31,
    "prompt": "List renewable energy projects in India with a budget between $50 million and $200 million.",
    "generated_sql": "SELECT * FROM renewable_energy_projects WHERE country = 'India' AND budget BETWEEN 5000000 AND 2000000 AND country = 'India'",
    "reference_sql": "SELECT name FROM renewable_project WHERE country = 'India' AND budget BETWEEN 50.0 AND 200.0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Budget bounds are incorrect (uses 5 million to 2 million instead of 50 million to 200 million) and duplicate country condition"
    }
  },
  {
    "example_id": 32,
    "prompt": "What is the average carbon price in USD per metric ton, for the last 6 months, in the EU ETS market?",
    "generated_sql": "SELECT AVG(price) FROM ets_prices WHERE region = 'EU' AND date >= DATEADD(month, -6, GETDATE());",
    "reference_sql": "SELECT AVG(price) FROM carbon_prices WHERE market = 'EU ETS' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY market;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 33,
    "prompt": "What is the average energy rating for commercial buildings in Texas?",
    "generated_sql": "SELECT AVG(energy_rating) FROM building_data WHERE state = 'TX';",
    "reference_sql": "SELECT building_type, AVG(energy_rating) FROM energy_efficiency WHERE building_type = 'Commercial' AND location = 'Texas';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for commercial buildings (e.g., WHERE building_type = 'commercial')"
    }
  },
  {
    "example_id": 34,
    "prompt": "Delete all records in the 'oil_rig' table where the 'company' is 'XYZ Inc.'",
    "generated_sql": "DROP TABLE IF EXISTS oil_rig; INSERT INTO oil_rig (company, country) SELECT 'XYZ Inc.', 'XYZ Inc.' FROM rigs;",
    "reference_sql": "DELETE FROM oil_rig WHERE company = 'XYZ Inc.';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses DROP and INSERT instead of DELETE, not removing records where company='XYZ Inc.'"
    }
  },
  {
    "example_id": 35,
    "prompt": "What is the average running speed for each player in the 2020 World Cup?",
    "generated_sql": "SELECT PlayerName, AVG(Speed) FROM WorldCupSpeed GROUP BY PlayerName",
    "reference_sql": "SELECT player, AVG(running_speed) FROM world_cup GROUP BY player;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to restrict data to the 2020 World Cup (e.g., WHERE Year = 2020)"
    }
  },
  {
    "example_id": 36,
    "prompt": "What is the maximum number of assists provided in a single season by players from European countries?",
    "generated_sql": "SELECT MAX(AGS_AMOUNT) as max_AGS_AMOUNT FROM PlayerAGS WHERE IS_EUROPEAN = TRUE;",
    "reference_sql": "SELECT MAX(assists) FROM season_stats WHERE country IN (SELECT country FROM players WHERE players.country = season_stats.country AND country LIKE 'Europe%');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 37,
    "prompt": "What is the total number of points scored by players from Brazil in the NBA?",
    "generated_sql": "SELECT COUNT(*) FROM points WHERE team_name = 'Brazil' AND league_name = 'NBA';",
    "reference_sql": "SELECT SUM(points) FROM players WHERE country = 'Brazil';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) instead of summing point values and filters by team_name rather than player nationality"
    }
  },
  {
    "example_id": 38,
    "prompt": "What is the number of medical supplies distributed by each organization, in East Africa, for the last 3 years, and the total cost of the supplies?",
    "generated_sql": "SELECT Organization, RANK() OVER (ORDER BY SUM(Quantity) DESC) as Rank FROM Dispensary WHERE Organization IN (SELECT Organization FROM Dispensary WHERE Location = 'East Africa') AND Date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR) GROUP BY Organization HAVING Rank <= 3;",
    "reference_sql": "SELECT organization_id, location as region, COUNT(*) as number_of_supplies, SUM(supply_cost) as total_supply_cost FROM medical_supplies WHERE location = 'East Africa' AND distribution_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR) GROUP BY organization_id, location;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not calculate total cost, misfilters by ranking top 3, and does not correctly filter East Africa and last 3 years"
    }
  },
  {
    "example_id": 39,
    "prompt": "What is the total number of NGOs operating in Yemen and how many projects do they have?",
    "generated_sql": "SELECT COUNT(*) FROM NGOs WHERE location = 'Yemen';",
    "reference_sql": "SELECT country, SUM(project_count) FROM ngos GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only counts NGOs in Yemen; it does not return the number of projects they have."
    }
  },
  {
    "example_id": 40,
    "prompt": "How many fair trade certified products does each brand have, ordered from the most to least?",
    "generated_sql": "SELECT brand_id, COUNT(*) as product_count FROM products WHERE certified = TRUE GROUP BY brand_id ORDER BY product_count DESC;",
    "reference_sql": "SELECT brand_name, COUNT(*) as fair_trade_products FROM certifications JOIN brands ON certifications.brand_id = brands.brand_id WHERE certification_name = 'Fair trade' GROUP BY brand_name ORDER BY fair_trade_products DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query returns brand_id only and does not join to the brands table to provide brand names"
    }
  },
  {
    "example_id": 41,
    "prompt": "What is the total revenue generated by sales of eco-friendly materials?",
    "generated_sql": "SELECT SUM(revenue) FROM sales WHERE material LIKE 'eco%';",
    "reference_sql": "SELECT SUM(revenue) FROM Sales WHERE material IN ('Organic Cotton', 'Hemp', 'Recycled Polyester', 'Tencel', 'Bamboo');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering eco-friendly materials by material LIKE 'eco%' may not capture all eco-friendly items and may include irrelevant ones"
    }
  },
  {
    "example_id": 42,
    "prompt": "What are the names and total transactions of all Shariah-compliant financial institutions from the finance database?",
    "generated_sql": "SELECT name, SUM(transactions) FROM finance.shariah_compliant_finance GROUP BY name;",
    "reference_sql": "SELECT name, SUM(total_transactions) FROM shariah_compliant_institutions;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 43,
    "prompt": "How many genetic research studies were conducted in the United Kingdom in 2019?",
    "generated_sql": "SELECT COUNT(*) FROM genetic_research_studies WHERE country = 'United Kingdom' AND year = 2019;",
    "reference_sql": "SELECT COUNT(*) FROM genetic_research WHERE location = 'United Kingdom' AND start_date <= '2019-12-31' AND end_date >= '2019-01-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 44,
    "prompt": "What is the number of female faculty members in the Physics department who have not been awarded any research grants?",
    "generated_sql": "SELECT COUNT(*) FROM (SELECT faculty_name FROM faculty WHERE department = 'Physics' AND gender = 'Female' AND awarded_no_grants = FALSE) AS female_faculty_grants;",
    "reference_sql": "SELECT COUNT(*) FROM faculty f1 WHERE f1.department = 'Physics' AND f1.gender = 'Female' AND NOT EXISTS (SELECT 1 FROM research_grants rg WHERE rg.faculty_id = f1.id);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses incorrect flag logic for no grants and assumes awarded_no_grants column exists"
    }
  },
  {
    "example_id": 45,
    "prompt": "What was the average revenue per guest for each hotel in Q2 2022?",
    "generated_sql": "SELECT hotel_id, AVG(revenue) as avg_revenue_per_guest FROM hotel_revenue WHERE EXTRACT(MONTH FROM sale_date) = 2 GROUP BY hotel_id;",
    "reference_sql": "SELECT H.HotelName, AVG(B.Revenue/B.Guests) as AvgRevenuePerGuest FROM Hotels H INNER JOIN Bookings B ON H.HotelID = B.HotelID WHERE MONTH(B.BookingDate) BETWEEN 5 AND 8 GROUP BY H.HotelName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters the wrong month (2 instead of Q2 months 4-6) and omits year 2022 filter"
    }
  },
  {
    "example_id": 46,
    "prompt": "What is the maximum temperature recorded in the 'arctic_weather' table for each month in the year 2020, broken down by species ('species' column in the 'arctic_weather' table)?",
    "generated_sql": "SELECT species, MAX(temperature) FROM arctic_weather WHERE year = 2020 GROUP BY species;",
    "reference_sql": "SELECT MONTH(date) AS month, species, MAX(temperature) AS max_temp FROM arctic_weather WHERE YEAR(date) = 2020 GROUP BY month, species;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not group by month and does not select the month column as required"
    }
  },
  {
    "example_id": 47,
    "prompt": "What is the average number of visitor reviews for heritage sites in each category?",
    "generated_sql": "SELECT category, AVG(visitor_reviews) AS avg_visitor_reviews FROM heritage_sites GROUP BY category;",
    "reference_sql": "SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 48,
    "prompt": "What is the distribution of language preservation initiatives by initiative type?",
    "generated_sql": "SELECT initiative_type, COUNT(*) as num_initiatives, COUNT(*) as num_ Initiatives GROUP BY initiative_type;",
    "reference_sql": "SELECT initiative, initiative_count FROM language_preservation_by_initiative;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing FROM clause, duplicate COUNT columns, and typo in alias"
    }
  },
  {
    "example_id": 49,
    "prompt": "List all patient_id's from the 'patients' table who have attended therapy sessions in the month of June 2021",
    "generated_sql": "SELECT patient_id FROM patients WHERE treatment_date = '2021-06-01' AND therapy_date = '2021-06-01';",
    "reference_sql": "SELECT patients.patient_id FROM patients INNER JOIN therapy_sessions ON patients.patient_id = therapy_sessions.patient_id WHERE MONTH(therapy_sessions.session_date) = 6 AND YEAR(therapy_sessions.session_date) = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters for a single date and uses incorrect conditions; does not capture all sessions in June 2021"
    }
  },
  {
    "example_id": 50,
    "prompt": "List the names and treatment approaches of therapists who have treated more than 50 patients with depression?",
    "generated_sql": "SELECT Name, TreatmentApproach FROM Therapists WHERE TreatmentApproach LIKE '%Depression%' GROUP BY Name HAVING CROSS JOIN (SELECT TreatmentApproach FROM Therapists WHERE TreatmentApproach IN ('Depression', 'Anxiety', 'Anxiety with a comorbid condition') AND Patients > 50) > 1;",
    "reference_sql": "SELECT therapists.name, therapists.treatment_approach FROM therapists JOIN (SELECT therapist_id, COUNT(*) AS patient_count FROM patients WHERE condition = 'depression' GROUP BY therapist_id HAVING patient_count > 50) AS patient_counts ON therapists.therapist_id = patient_counts.therapist_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly uses CROSS JOIN in HAVING, misuses GROUP BY without aggregation on TreatmentApproach, and fails to properly count depression patients >50."
    }
  },
  {
    "example_id": 51,
    "prompt": "What is the number of patients in India who received group therapy?",
    "generated_sql": "SELECT COUNT(*) FROM Patients WHERE country = 'India' AND type = 'Group Therapy';",
    "reference_sql": "SELECT COUNT(*) FROM patients INNER JOIN treatments ON patients.id = treatments.patient_id WHERE treatments.treatment = 'Group Therapy' AND patients.country = 'India';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 52,
    "prompt": "Show the number of public works projects in California and their average resilience score",
    "generated_sql": "SELECT project_type, AVG(resilience_score) FROM public_works WHERE state = 'California' GROUP BY project_type;",
    "reference_sql": "SELECT COUNT(*) as num_projects, AVG(resilience_score) as avg_resilience FROM Infrastructure WHERE location = 'California' AND is_public_works = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by project_type and omits the project count; should return total count and average resilience overall."
    }
  },
  {
    "example_id": 53,
    "prompt": "calculate the average completion time of projects in the 'public_works' table, partitioned by the project's location and ordered by the average completion time.",
    "generated_sql": "SELECT location, AVG(completion_time) as avg_completion_time FROM public_works WHERE location = 'Mountain View' GROUP BY location ORDER BY avg_completion_time DESC;",
    "reference_sql": "SELECT location, AVG(DATEDIFF(day, start_date, completion_date)) as avg_completion_time, ROW_NUMBER() OVER (PARTITION BY location ORDER BY AVG(DATEDIFF(day, start_date, completion_date)) DESC) as rn FROM public_works GROUP BY location ORDER BY avg_completion_time DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query incorrectly filters to only 'Mountain View' instead of grouping all locations"
    }
  },
  {
    "example_id": 54,
    "prompt": "What is the percentage of parolees who have reoffended in Texas, broken down by gender and race, for the years 2017 and 2018?",
    "generated_sql": "SELECT gender, gender_reoffending, COUNT(*) FILTER (WHERE date_reoff = '2017-01-01') * 100.0 / COUNT(*) OVER (PARTITION BY gender, gender_reoffending) AS pare_percentage FROM parole_recalls WHERE date_reoff = '2017-01-01' AND date_reoff = '2018-01-01' UNION ALL SELECT gender, gender_reoffending, COUNT(*) FIL",
    "reference_sql": "SELECT c.year, c.gender, c.race, COUNT(c.parolee_id) AS parolees, AVG(CAST(c.reoffender AS FLOAT)) * 100 AS reoffender_percentage FROM parolee c WHERE c.year IN (2017, 2018) GROUP BY c.year, c.gender, c.race;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses contradictory date_reoff filters, lacks race breakdown, and is incomplete"
    }
  },
  {
    "example_id": 55,
    "prompt": "What is the total number of restorative justice cases per district?",
    "generated_sql": "SELECT district, SUM(cases_count) AS total_cases_per_district FROM restorative_justice_data GROUP BY district;",
    "reference_sql": "SELECT rj.district_id, SUM(rj.cases) AS total_cases FROM restorative_justice rj GROUP BY rj.district_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 56,
    "prompt": "What is the total biomass of marine species in ascending order of depth?",
    "generated_sql": "SELECT species.name, MAX(species.depth) as max_depth FROM species INNER JOIN depth_level ON species.species_id = depth_level.id WHERE species.name IN ('Manta Ray', 'Deep-sea Whale', 'Giant Squid') GROUP BY species.name ORDER BY max_depth DESC;",
    "reference_sql": "SELECT type, SUM(biomass) total_biomass FROM biomass GROUP BY type ORDER BY total_biomass ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "The query selects maximum depth for specific species instead of summing biomass by depth and ordering ascending"
    }
  },
  {
    "example_id": 57,
    "prompt": "What is the average rating of movies by director in the Media database?",
    "generated_sql": "SELECT AVG(rating) FROM Media.Movies WHERE director = 'Tarantino';",
    "reference_sql": "SELECT Director, AVG(Rating) as AverageRating FROM DirectorMoviesRating GROUP BY Director;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only computes average for one director instead of grouping by each director"
    }
  },
  {
    "example_id": 58,
    "prompt": "What is the average rating of movies produced in the US between 2010 and 2020?",
    "generated_sql": "SELECT AVG(rating) FROM movies WHERE country = 'United States' AND year BETWEEN 2010 AND 2020",
    "reference_sql": "SELECT AVG(rating) FROM movies WHERE production_year BETWEEN 2010 AND 2020 AND country = 'USA';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 59,
    "prompt": "What is the total number of military aircraft sold by GlobalDefense to the Canadian government?",
    "generated_sql": "SELECT COUNT(*) FROM aircraft WHERE manufacturer = 'GlobalDefense' AND country = 'Canada';",
    "reference_sql": "SELECT SUM(quantity) FROM GlobalDefense.AircraftSales WHERE buyer_country = 'Canada' AND manufacturer = 'GlobalDefense';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for military aircraft"
    }
  },
  {
    "example_id": 60,
    "prompt": "Update the resource depletion metrics for the 'Aquamarine Arch' mine in Himachal Pradesh, India",
    "generated_sql": "UPDATE ResourceDepletionMetrics SET Resource = 'Aquamarine', Date = NOW() WHERE Mine = 'Aquamarine Arch' AND Country = 'India' AND Location = 'Himachal Pradesh';",
    "reference_sql": "UPDATE resource_depletion SET resource_depletion_rate = 0.08 WHERE mine_id = 9 AND year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query only updates the Resource and Date fields and does not modify any actual depletion metrics"
    }
  },
  {
    "example_id": 61,
    "prompt": "Which mobile plans have a higher data limit than the average data limit for all mobile plans?",
    "generated_sql": "SELECT plan_name, data_limit FROM data_limit_data WHERE data_limit > MAX(data_limit) GROUP BY plan_name HAVING data_limit > MAX(data_limit);",
    "reference_sql": "SELECT plan_name FROM mobile_plans WHERE data_limit > (SELECT AVG(data_limit) FROM mobile_plans);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MAX(data_limit) instead of the average and misuses GROUP BY/HAVING"
    }
  },
  {
    "example_id": 62,
    "prompt": "How many news items have been published in 'region1'?",
    "generated_sql": "SELECT COUNT(*) FROM news_items WHERE region ='region1';",
    "reference_sql": "SELECT COUNT(*) FROM news WHERE region = 'region1';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 63,
    "prompt": "What is the average word count for articles in the 'opinion' category?",
    "generated_sql": "SELECT AVG(word_count) FROM articles WHERE category = 'opinion';",
    "reference_sql": "SELECT AVG(word_count) FROM news WHERE category = 'Opinion';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 64,
    "prompt": "What is the total number of donations for each mission_area in the 'Organizations' table?",
    "generated_sql": "SELECT mission_area, SUM(donation_amount) FROM Organizations GROUP BY mission_area;",
    "reference_sql": "SELECT mission_area, COUNT(*) FROM Organizations GROUP BY mission_area;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(donation_amount) instead of COUNT(*) to get the number of donations per mission_area"
    }
  },
  {
    "example_id": 65,
    "prompt": "What is the total prize money for esports events of the 'Simulation' genre?",
    "generated_sql": "SELECT SUM(prize_money) FROM esports_events WHERE genre = 'Simulation';",
    "reference_sql": "SELECT SUM(PrizeMoney) FROM EsportsEvents JOIN Games ON EsportsEvents.GameName = Games.GameName WHERE Games.Genre = 'Simulation';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 66,
    "prompt": "What is the count of farms in Nigeria that have implemented automation in the last year?",
    "generated_sql": "SELECT farm_id, COUNT(*) FROM automation_farms WHERE country = 'Nigeria' AND implementation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY farm_id;",
    "reference_sql": "SELECT COUNT(*) FROM farm_automation WHERE automation_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query groups by farm_id and returns per-farm counts instead of a single total count of farms."
    }
  },
  {
    "example_id": 67,
    "prompt": "How many healthcare services are available in each region, and what is their ranking based on availability?",
    "generated_sql": "SELECT region, SUM(service_count) as total_services, rank FROM (SELECT region, SUM(service_count) AS total_services, rank FROM healthcare_services) AS subquery GROUP BY region;",
    "reference_sql": "SELECT Region, Service, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY Service) AS Rank FROM HealthcareServices;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No ranking logic implemented; improper subquery grouping and missing window function"
    }
  },
  {
    "example_id": 68,
    "prompt": "List the names of all parks in urban areas",
    "generated_sql": "SELECT name FROM Parks WHERE location LIKE 'Urban%';",
    "reference_sql": "SELECT p.park_name FROM parks p INNER JOIN areas a ON p.area_id = a.area_id WHERE a.area_type = 'urban';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using location LIKE 'Urban%' assumes location stores area type and uses prefix matching rather than a specific urban-area indicator"
    }
  },
  {
    "example_id": 69,
    "prompt": "What is the total production of Neodymium in 2020, for companies in the APAC region?",
    "generated_sql": "SELECT SUM(production) FROM neodymium_production WHERE country = 'APAC' AND year = 2020;",
    "reference_sql": "SELECT SUM(quantity) FROM production JOIN companies ON production.company_id = companies.id WHERE production.element = 'Neodymium' AND production.year = 2020 AND companies.region = 'APAC';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on country = 'APAC' is incorrect; should filter by region column"
    }
  },
  {
    "example_id": 70,
    "prompt": "What is the change in housing affordability in Portland from Q1 2021 to Q2 2021?",
    "generated_sql": "SELECT AVG(housing_premium) - AVG(housing_cost) as change FROM Portland_housing WHERE quarter = 1 AND month = 1 AND year = 2021;",
    "reference_sql": "SELECT (MAX(affordability) FILTER (WHERE year = 2021 AND quarter = 2) - MAX(affordability) FILTER (WHERE year = 2021 AND quarter = 1)) FROM portland_housing;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query only calculates a single quarter and uses wrong metrics; it does not compute Q2 minus Q1 affordability change."
    }
  },
  {
    "example_id": 71,
    "prompt": "What is the total revenue and food safety risk score for each menu item in 'Fine Dining' restaurants?",
    "generated_sql": "SELECT MenuItemID, FoodSafetyRiskScore, SUM(Revenue) FROM Restaurants WHERE MenuItemID IN (SELECT MenuItemID FROM Restaurants WHERE Type = 'Fine Dining') GROUP BY MenuItemID, FoodSafetyRiskScore;",
    "reference_sql": "SELECT r.name AS restaurant, mi.name AS menu_item, mi.risk_score, SUM(mi.revenue) AS total_revenue FROM restaurants r JOIN menu_items mi ON r.category = mi.category WHERE r.category = 'Fine Dining' GROUP BY r.name, mi.name, mi.risk_score;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums revenue from Restaurants table and misuses MenuItemID instead of joining with sales or orders data to calculate menu item revenue"
    }
  },
  {
    "example_id": 72,
    "prompt": "What is the difference in the total quantity of products sold in the 'apparel' category between this year and last year?",
    "generated_sql": "SELECT SUM(quantity) - SUM(quantity) FROM inventory WHERE category = 'apparel' AND sale_date BETWEEN '2022-12-01' AND '2022-12-31';",
    "reference_sql": "SELECT product_category, (SUM(CASE WHEN year = 2022 THEN quantity ELSE 0 END) - SUM(CASE WHEN year = 2021 THEN quantity ELSE 0 END)) as quantity_diff FROM sales WHERE product_category = 'Apparel' GROUP BY product_category;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses the same SUM twice over a single month and doesn\u2019t compare this year vs last year over the full year."
    }
  },
  {
    "example_id": 73,
    "prompt": "What are the maximum and minimum sizes of space debris for each source type?",
    "generated_sql": "SELECT source_type, MAX(size) as max_size, MIN(size) as min_size FROM space_debris_sizes GROUP BY source_type;",
    "reference_sql": "SELECT source_type, MAX(size) as max_size, MIN(size) as min_size FROM space_debris GROUP BY source_type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 74,
    "prompt": "Show me the cybersecurity policies that were altered in the last week.",
    "generated_sql": "SELECT * FROM cybersecurity_policies WHERE date >= DATEADD(week, -1, CURRENT_DATE);",
    "reference_sql": "SELECT * FROM cybersecurity_policies WHERE date >= DATEADD(week, -1, GETDATE());",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 75,
    "prompt": "Which countries are part of the EU and have had security incidents?",
    "generated_sql": "SELECT country FROM security_incidents WHERE country IN ('EU', 'South Korea') AND incident_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE;",
    "reference_sql": "SELECT DISTINCT country FROM security_incidents WHERE country IN ('France', 'Germany', 'United Kingdom');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on a hardcoded country list and wrong timeframe instead of checking EU membership"
    }
  },
  {
    "example_id": 76,
    "prompt": "What is the total number of multimodal trips taken in Toronto, Canada using public transportation?",
    "generated_sql": "SELECT SUM(trips.trip_count) FROM trips JOIN trips.trips ON trips.trip_id = trips.trip_id JOIN trips.trips ON trips.trips_id = trips.trips_id JOIN trips.trips ON trips.trips_id = trips.trips_id JOIN trips.trips ON trips.trips_id = trips.trips_id JOIN trips.trips ON trips.trips_id = trips.trips_id WHERE trips.city = 'Toronto' AND trips.trips_type =",
    "reference_sql": "SELECT COUNT(*) FROM multimodal_trips_canada WHERE city = 'Toronto' AND mode LIKE '%public%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query includes erroneous repeated self-joins and has an incomplete WHERE clause"
    }
  },
  {
    "example_id": 77,
    "prompt": "Find the union names that have no reported workplace injuries.",
    "generated_sql": "SELECT union_name FROM Workplace_Injuries WHERE reported = false;",
    "reference_sql": "SELECT name FROM unions WHERE id NOT IN (SELECT union_id FROM injuries);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It selects unions from rows marked false but doesn't exclude those with any true reports"
    }
  },
  {
    "example_id": 78,
    "prompt": "How many unions have more than 5000 members in the 'Education' sector?",
    "generated_sql": "SELECT COUNT(*) FROM unions WHERE sector = 'Education' AND members > 5000;",
    "reference_sql": "SELECT COUNT(*) FROM Unions WHERE Sector = 'Education' GROUP BY Sector HAVING COUNT(*) > 5000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 79,
    "prompt": "What is the maximum weekly wage for workers in the 'retail' industry in unions?",
    "generated_sql": "SELECT MAX(wages) FROM unions WHERE industry ='retail';",
    "reference_sql": "SELECT MAX(wage) FROM workers JOIN unions ON workers.union_id = unions.id WHERE industry = 'retail';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 80,
    "prompt": "Find the average travel time (in days) for vessels traveling between the Port of Valparaiso and the Port of Singapore in the first half of 2021, ranked by the average travel time in ascending order.",
    "generated_sql": "SELECT AVG(avg_travel_time) FROM vessels WHERE port_id IN (SELECT port_id FROM ports WHERE port_name = 'Port of Valparaiso' AND port_name = 'Port of Singapore') ORDER BY avg_travel_time ASC LIMIT 1;",
    "reference_sql": "SELECT route, AVG(travel_time) as avg_travel_time FROM VesselTravel WHERE route = 7 AND departure_date >= '2021-01-01' AND departure_date < '2021-07-01' GROUP BY route ORDER BY avg_travel_time ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses incorrect port filter with AND, lacks voyage table, date filtering, grouping, and ordering by vessel average travel time"
    }
  },
  {
    "example_id": 81,
    "prompt": "What is the count of vessels that have visited a specific port in a given month?",
    "generated_sql": "SELECT COUNT(*) FROM pacific_port_visits WHERE port = 'Port of Vancouver' AND visit_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE;",
    "reference_sql": "SELECT COUNT(PortCalls.id) FROM PortCalls WHERE PortCalls.port = 'PortA' AND PortCalls.call_date >= '2021-03-01' AND PortCalls.call_date <= '2021-03-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts all visit records instead of distinct vessels and uses a sliding 1-month window rather than a specified calendar month"
    }
  },
  {
    "example_id": 82,
    "prompt": "What is the average landfill tipping fee for each region?",
    "generated_sql": "SELECT Region, AVG(TippingFee) AS Avg_TippingFee FROM TippingFees GROUP BY Region;",
    "reference_sql": "SELECT region, AVG(tipping_fee) FROM Landfill_All GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 83,
    "prompt": "Update the capacity of a wastewater plant in the wastewater_plants table",
    "generated_sql": "UPDATE wastewater_plants SET capacity = 100000 WHERE plant_name = 'Wastewater Plant 1' AND plant_state = 'MA';",
    "reference_sql": "UPDATE wastewater_plants SET capacity = 600000 WHERE id = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query uses hardcoded values for capacity, plant_name, and plant_state without parameters; it lacks the specific plant and capacity to update as per the request."
    }
  },
  {
    "example_id": 84,
    "prompt": "List algorithmic fairness scores for creative AI applications in Europe, ordered by score in descending order.",
    "generated_sql": "SELECT app_id, score, name FROM ai_apps_Europe ORDER BY score DESC;",
    "reference_sql": "SELECT * FROM CreativeAI WHERE region = 'Europe' ORDER BY fairness_score DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to restrict to creative AI applications"
    }
  },
  {
    "example_id": 85,
    "prompt": "Show algorithmic fairness scores for creative AI applications in Oceania, grouped by score in ascending order.",
    "generated_sql": "SELECT score, score_range FROM algorithmic_fairness_scores WHERE region = 'Oceania';",
    "reference_sql": "SELECT * FROM CreativeAI WHERE region = 'Oceania' ORDER BY fairness_score ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query missing filter for creative AI applications and lacks ORDER BY score ASC"
    }
  },
  {
    "example_id": 86,
    "prompt": "What is the average safety score for creative AI applications in Europe?",
    "generated_sql": "SELECT AVG(safety_score) FROM safety_scores WHERE application_type = 'Creative AI' AND region = 'Europe';",
    "reference_sql": "SELECT AVG(safety_score) FROM creative_ai WHERE country IN ('France', 'Germany', 'Spain');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 87,
    "prompt": "What is the difference between the average satisfaction score of models trained on dataset D and dataset C, for each continent?",
    "generated_sql": "SELECT continent, AVG(satisfaction_score) AS avg_satisfaction_score FROM (SELECT continent, AVG(satisfaction_score) AS avg_satisfaction_score FROM datasets WHERE dataset = DISTINCT dataset_id = 2) D, (SELECT continent, AVG(satisfaction_score) AS avg_satisfaction_score FROM datasets WHERE dataset = C.dataset_id) C GROUP BY continent;",
    "reference_sql": "SELECT continent, AVG(m.satisfaction) - (SELECT AVG(satisfaction) FROM models m2 WHERE m.continent = m2.continent AND m2.dataset = 'datasetC') FROM models m WHERE m.dataset = 'datasetD' GROUP BY continent;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query is syntactically incorrect, does not join subqueries on continent, misuses DISTINCT, and does not compute the difference between the two averages."
    }
  },
  {
    "example_id": 88,
    "prompt": "What is the maximum crop yield in 'South America' in 2021?",
    "generated_sql": "SELECT MAX(yield) FROM crop_yield WHERE region = 'South America' AND year = 2021;",
    "reference_sql": "SELECT MAX(crop_yield) FROM crop_yields WHERE year = 2021 AND region = 'South America';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 89,
    "prompt": "What are the names and launch dates of all satellites with the type 'Navigation'?",
    "generated_sql": "SELECT name, launch_date FROM satellites WHERE type = 'Navigation';",
    "reference_sql": "SELECT s.name, s.launch_date FROM Satellite s WHERE s.type = 'Navigation';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 90,
    "prompt": "What is the average habitat preservation funding per square kilometer for each North American conservation area, broken down by conservation area and state?",
    "generated_sql": "SELECT conservation_area, state, AVG(funding) FROM conservation_funding WHERE conservation_area = 'North America' GROUP BY conservation_area, state;",
    "reference_sql": "SELECT na.name, na.state, AVG(na.funding / na.area_size) as avg_funding_per_sq_km FROM north_american_conservation_areas na GROUP BY na.name, na.state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters conservation_area to 'North America' instead of selecting areas within North America and does not compute funding per square kilometer"
    }
  },
  {
    "example_id": 91,
    "prompt": "What is the ratio of successful community education programs to total programs for each country, ordered by the success rate in descending order?",
    "generated_sql": "SELECT country, COUNT(*) as num_successful_programs, SUM(success_rate) as total_programs FROM (SELECT country, SUM(success_rate) as total_programs FROM education_programs GROUP BY country) t WHERE country IN ('Brazil', 'Colombia', 'Argentina', 'Argentina', 'Brazil', 'Canada', 'China', 'Egypt', 'Ethiopia', 'Iran', 'Iran', 'Iraq', 'India', 'Italy', 'Japan', 'Kazakhstan', 'Kuwait', 'Laos', 'Laos', '",
    "reference_sql": "SELECT Country, COUNT(*) FILTER (WHERE Success) * 1.0 / COUNT(*) as SuccessRate FROM CountryPrograms GROUP BY Country ORDER BY SuccessRate DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query miscomputes totals using SUM(success_rate) instead of counts, doesn\u2019t filter for community education or compute the ratio, and uses an incorrect subquery"
    }
  },
  {
    "example_id": 92,
    "prompt": "What is the total nutrient value of feed in the 'feeding' table?",
    "generated_sql": "SELECT SUM(value) FROM feeding;",
    "reference_sql": "SELECT SUM(nutrients) FROM feeding;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 93,
    "prompt": "How many repeat attendees have visited 'MuseumY' in the past year, and what is the average number of visits per attendee?",
    "generated_sql": "SELECT AVG(repeats) as avg_repeats FROM (SELECT attendees.id, attendees.name, TRUNC(CURDATE() - visitor_date) as visitor_date FROM attendees INNER JOIN visitor_attendees ON attendees.attendee_id = visitor_attendees.id WHERE attendees.site_name = 'MuseumY' GROUP BY attendees.id) AS repeat_attendees;",
    "reference_sql": "SELECT AVG(visits) FROM (SELECT a.attendee_id, COUNT(*) AS visits FROM MuseumY m JOIN Attendees a ON m.attendee_id = a.attendee_id WHERE m.visit_date >= DATEADD(year, -1, GETDATE()) GROUP BY a.attendee_id) AS repeat_attendees;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter the past year, does not count visits per attendee, and references a non-existent 'repeats' column instead of calculating visit counts and repeat thresholds."
    }
  },
  {
    "example_id": 94,
    "prompt": "Which songs have the highest and lowest streams within their genre?",
    "generated_sql": "SELECT genre, MAX(streams) as highest_streams, MIN(streams) as lowest_streams FROM songs GROUP BY genre;",
    "reference_sql": "SELECT SongName, Genre, Streams, RANK() OVER(PARTITION BY Genre ORDER BY Streams DESC) AS Rank FROM Music;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query returns stream counts but not the song titles for the highest and lowest streams within each genre"
    }
  },
  {
    "example_id": 95,
    "prompt": "What is the total construction labor cost for plumbers in Georgia?",
    "generated_sql": "SELECT SUM(labor_cost) FROM construction_labor WHERE state = 'Georgia' AND type = 'plumber';",
    "reference_sql": "SELECT SUM(cost) FROM construction_labor WHERE state = 'Georgia' AND job = 'Plumber';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 96,
    "prompt": "Find the total rainfall for each country and year, and rank them.",
    "generated_sql": "SELECT country, year, SUM(rainfall) as total_rainfall FROM rainfall_data GROUP BY country, year ORDER BY total_rainfall DESC;",
    "reference_sql": "SELECT Country, Year, SUM(Rainfall) as TotalRainfall, RANK() OVER (PARTITION BY Year ORDER BY SUM(Rainfall) DESC) as Rank FROM RainfallData GROUP BY Country, Year;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 97,
    "prompt": "What are the average climate finances spent by organizations in 'americas' and 'europe'?",
    "generated_sql": "SELECT AVG(budget) FROM budgets WHERE organization_id IN (SELECT id FROM organizations WHERE region = 'Americas') AND organization_id IN (SELECT id FROM organizations WHERE region = 'Europe');",
    "reference_sql": "SELECT AVG(amount) FROM org_climate_finance WHERE region IN ('americas', 'europe');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters organizations to be in both regions simultaneously instead of computing separate averages per region."
    }
  },
  {
    "example_id": 98,
    "prompt": "Delete records of R&D expenditures greater than $100,000 in Q1 2021",
    "generated_sql": "DELETE FROM ResearchExpenditures WHERE expenditure > 100000 AND quarter = 'Q1 2021';",
    "reference_sql": "DELETE FROM rd_expenditures WHERE amount > 100000 AND quarter = 1 AND year = 2021",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 99,
    "prompt": "Average healthcare access score in urban areas by year.",
    "generated_sql": "SELECT AVG(score) FROM healthcare_access WHERE location LIKE 'Urban%' AND year = 2021;",
    "reference_sql": "SELECT Year, AVG(Score) FROM HealthcareAccessScore WHERE Area = 'Urban' GROUP BY Year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Filters to a single year and lacks grouping by year"
    }
  },
  {
    "example_id": 100,
    "prompt": "How many males in Texas have accessed healthcare services in the last month?",
    "generated_sql": "SELECT COUNT(*) FROM patients WHERE state = 'Texas' AND healthcare_delivery = true AND service_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "reference_sql": "SELECT COUNT(*) FROM HealthcareAccess WHERE Gender = 'Male' AND AccessDate >= DATEADD(MONTH, -1, GETDATE()) AND State = 'Texas';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for male gender"
    }
  },
  {
    "example_id": 101,
    "prompt": "Show the sum of investments by year and industry",
    "generated_sql": "SELECT year, industry, sum(investments) FROM transactions WHERE investment_date BETWEEN '2018-01-01' AND '2021-12-31' GROUP BY year, industry;",
    "reference_sql": "SELECT investment_year, industry, SUM(investment_amount) as total_investments FROM investments GROUP BY investment_year, industry;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary date filter; question did not specify limiting to 2018-2021"
    }
  },
  {
    "example_id": 102,
    "prompt": "Update the policy advocacy budget for the Native American community in California to $500,000 for the current fiscal year.",
    "generated_sql": "UPDATE policy_advocacy SET budget = 500000 WHERE community = 'Native American';",
    "reference_sql": "UPDATE policy_advocacy_budget SET budget = 500000.00 WHERE community = 'Native American' AND state = 'California' AND fiscal_year = YEAR(CURDATE());",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing conditions for California and current fiscal year"
    }
  },
  {
    "example_id": 103,
    "prompt": "How many whale sharks have been spotted in each location?",
    "generated_sql": "SELECT Location, SUM(WAVES) FROM WhaleSharks WHERE Location = 'Northeast' GROUP BY Location;",
    "reference_sql": "SELECT location, COUNT(*) as spotted_count FROM whale_sharks GROUP BY location;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query filters to only the 'Northeast' location instead of aggregating for all locations."
    }
  },
  {
    "example_id": 104,
    "prompt": "What is the average depth of all marine protected areas, grouped by country?",
    "generated_sql": "SELECT country, AVG(depth) as avg_depth FROM marine_protected_areas GROUP BY country;",
    "reference_sql": "SELECT country, AVG(avg_depth) FROM marine_protected_areas GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 105,
    "prompt": "What is the total number of transactions for the digital asset 'ETH' on a given date?",
    "generated_sql": "SELECT COUNT(*) FROM digital_assets a JOIN transactions t ON a.asset_id = t.asset_id WHERE a.asset_name = 'ETH' AND t.transaction_date BETWEEN DATE_ADD(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();",
    "reference_sql": "SELECT transaction_count FROM digital_assets WHERE asset_name = 'ETH';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Date filter uses a one-month range relative to today instead of filtering for a specific given date"
    }
  },
  {
    "example_id": 106,
    "prompt": "How many vegan makeup products were sold in India in Q1 of 2022?",
    "generated_sql": "SELECT COUNT(*) FROM Sales WHERE IsVegan = TRUE AND ProductName = 'Makeups' AND SaleDate BETWEEN '2022-01-01' AND '2022-03-31';",
    "reference_sql": "SELECT COUNT(*) FROM MakeupSales WHERE is_vegan = true AND country = 'India' AND sale_date BETWEEN '2022-01-01' AND '2022-03-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for India and incorrect condition for makeup products"
    }
  },
  {
    "example_id": 107,
    "prompt": "What is the total sales revenue of non-organic skincare products in the North American market?",
    "generated_sql": "SELECT SUM(sales_revenue) FROM sales WHERE product_type = 'Non-Organic' AND country = 'North America';",
    "reference_sql": "SELECT SUM(revenue) FROM SkincareSales INNER JOIN ProductIngredients ON SkincareSales.productID = ProductIngredients.productID WHERE organic = false AND region = 'North America';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for skincare products and incorrect use of country for North America region"
    }
  },
  {
    "example_id": 108,
    "prompt": "What was the maximum ticket sales for any event in Tokyo?",
    "generated_sql": "SELECT MAX(sales) FROM Tokyo_Events;",
    "reference_sql": "SELECT MAX(ticket_sales) FROM EventData WHERE city = 'Tokyo';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a table named Tokyo_Events instead of filtering the Events table by city = 'Tokyo'"
    }
  },
  {
    "example_id": 109,
    "prompt": "Which defense contracts have the highest total value, and what are their respective values?",
    "generated_sql": "SELECT DISTINCT contract_name, total_value FROM defense_contracts GROUP BY contract_name ORDER BY total_value DESC LIMIT 1;",
    "reference_sql": "SELECT Contract_Name, Value FROM (SELECT Contract_Name, Value, ROW_NUMBER() OVER (ORDER BY Value DESC) as Rank FROM Defense_Contracts) as Ranked_Contracts WHERE Rank <= 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Only returns a single row and does not aggregate total values across entries"
    }
  },
  {
    "example_id": 110,
    "prompt": "How many peacekeeping operations were conducted by each country in Q3 of 2018?",
    "generated_sql": "SELECT country, COUNT(operation_id) AS num_operations FROM peacekeeping_operations WHERE operation_date BETWEEN '2018-07-01' AND '2018-12-31' GROUP BY country;",
    "reference_sql": "SELECT c.name, COUNT(p.operation_id) as total_operations FROM country c INNER JOIN peacekeeping_operations p ON c.id = p.country_id WHERE p.year = 2018 AND p.quarter BETWEEN 3 AND 3 GROUP BY c.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The date range includes Q4 (October\u2013December) instead of only Q3 (July\u2013September)."
    }
  },
  {
    "example_id": 111,
    "prompt": "List all transactions with a value greater than $10,000, along with the customer ID and the transaction date, in descending order of transaction date?",
    "generated_sql": "SELECT name, customer_id, transaction_date, transaction_amount FROM transactions WHERE transaction_amount > 10000 GROUP BY customer_id ORDER BY transaction_date DESC;",
    "reference_sql": "SELECT * FROM transactions WHERE transaction_value > 10000 ORDER BY transaction_date DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "GROUP BY customer_id aggregates transactions and prevents listing each transaction; grouping is not needed to list individual transactions"
    }
  },
  {
    "example_id": 112,
    "prompt": "What is the average account balance for customers in each investment strategy?",
    "generated_sql": "SELECT strategy, AVG(account_balance) as avg_balance FROM investment_strategies GROUP BY strategy;",
    "reference_sql": "SELECT strategy_name, AVG(account_balance) FROM customers GROUP BY strategy_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "account_balance is unlikely in investment_strategies table, missing join to customer accounts"
    }
  },
  {
    "example_id": 113,
    "prompt": "What is the total number of high-risk accounts in the Northwest region?",
    "generated_sql": "SELECT COUNT(*) FROM high_risk_accounts WHERE region = 'Northwest';",
    "reference_sql": "SELECT COUNT(*) FROM accounts_by_region WHERE region = 'Northwest' AND risk_level = 'high';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 114,
    "prompt": "What is the average weight of cargo handled by vessels in the 'Bulk Carrier' type at each port?",
    "generated_sql": "SELECT port_name, AVG(cargo_weight) as avg_weight FROM cargo_handling_2 JOIN port ON (port_id = cargo_handling_2.port_id) WHERE port_type = 'Bulk Carrier' GROUP BY port_name;",
    "reference_sql": "SELECT p.name AS port_name, AVG(vc.weight) AS avg_weight FROM ports p JOIN vessels v ON p.id = v.port_id JOIN vessel_cargo vc ON v.name = vc.vessel_name WHERE v.type = 'Bulk Carrier' GROUP BY p.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on port_type instead of vessel type; should filter by vessels of type 'Bulk Carrier'"
    }
  },
  {
    "example_id": 115,
    "prompt": "What is the total weight of cargo handled by each port in february_2022 from the cargo_handling table?",
    "generated_sql": "SELECT p.port_name, SUM(c.weight) FROM ports p JOIN cargo c ON p.port_id = c.port_id WHERE c.handled_date BETWEEN '2022-02-01' AND '2022-02-28' GROUP BY p.port_name;",
    "reference_sql": "SELECT port, SUM(weight) as february_total_weight FROM cargo_handling WHERE date BETWEEN '2022-02-01' AND '2022-02-28' GROUP BY port;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 116,
    "prompt": "What is the average salary of employees in factories with a certain certification?",
    "generated_sql": "SELECT AVG(salary) FROM Employees WHERE certification = 'Certified';",
    "reference_sql": "SELECT AVG(employees.salary) FROM factories INNER JOIN employees ON factories.factory_id = employees.factory_id WHERE factories.certified = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on employee certification without joining to factories to check factory certification"
    }
  },
  {
    "example_id": 117,
    "prompt": "What is the minimum and maximum average age of healthcare workers in 'rural_hospitals' table?",
    "generated_sql": "SELECT MIN(age), MAX(age) FROM rural_hospitals;",
    "reference_sql": "SELECT MIN(avg_age), MAX(avg_age) FROM rural_hospitals;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns min and max of individual ages rather than min and max of average ages"
    }
  },
  {
    "example_id": 118,
    "prompt": "Display the number of unique users who have streamed or downloaded music on each platform in Africa.",
    "generated_sql": "SELECT platform, COUNT(DISTINCT user_id) as num_strangers FROM users WHERE continent = 'Africa' AND device_type = 'Music' GROUP BY platform;",
    "reference_sql": "SELECT platform, user_count FROM platform_users_africa;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on device_type in users table instead of using streaming/download events and misses condition for music actions."
    }
  },
  {
    "example_id": 119,
    "prompt": "What is the average mental health score of students for each grade level, ordered by the average score?",
    "generated_sql": "SELECT grade_level, AVG(mental_health_score) as avg_score FROM student_mental_health GROUP BY grade_level ORDER BY avg_score DESC;",
    "reference_sql": "SELECT grade_id, AVG(mental_health_score) as avg_score FROM student_mental_health GROUP BY grade_id ORDER BY avg_score DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 120,
    "prompt": "How many renewable energy power plants are there in Texas?",
    "generated_sql": "SELECT COUNT(*) FROM renewable_energy WHERE location = 'Texas';",
    "reference_sql": "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 121,
    "prompt": "What is the maximum solar capacity in Mexico?",
    "generated_sql": "SELECT MAX(capacity) FROM solar_capacity WHERE country = 'Mexico';",
    "reference_sql": "SELECT MAX(capacity) FROM solar_capacity WHERE country = 'Mexico';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 122,
    "prompt": "Count the number of wells drilled by CompanyA",
    "generated_sql": "SELECT COUNT(*) as num_wells FROM companies WHERE company_name = 'CompanyA';",
    "reference_sql": "SELECT COUNT(*) FROM wells WHERE company = 'CompanyA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It counts companies instead of wells; should query the wells table"
    }
  },
  {
    "example_id": 123,
    "prompt": "What is the average number of points scored by each hockey player in the NHL?",
    "generated_sql": "SELECT player_id, AVG(points) FROM players WHERE league = 'NBA' GROUP BY player_id;",
    "reference_sql": "SELECT position, AVG(points) FROM hockey_players JOIN nhl_teams ON hockey_players.id = nhl_teams.players_id GROUP BY position;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters for league = 'NBA' instead of 'NHL'."
    }
  },
  {
    "example_id": 124,
    "prompt": "Find the intersection of AI and accessibility research projects in the EU and those in Africa.",
    "generated_sql": "SELECT e.id, a.name FROM ai_projects ai JOIN accessibility_projects a ON ai.id = a.project_id WHERE a.type = 'AI' AND e.location LIKE 'Europe%' AND a.name IN ('Accessibility2Africa', 'Accessibility3Europe');",
    "reference_sql": "SELECT project_name FROM accessibility.research WHERE region = 'EU' INTERSECT SELECT project_name FROM accessibility.research WHERE region = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses undefined alias e, incorrect joins/tables, and static project names instead of intersecting EU and Africa projects"
    }
  },
  {
    "example_id": 125,
    "prompt": "Update the \"registration_date\" of the student \"Sofia Garcia\" in the \"students\" table to \"2021-10-01\"",
    "generated_sql": "UPDATE students SET registration_date = '2021-10-01' WHERE name = 'Sofia Garcia';",
    "reference_sql": "UPDATE students SET registration_date = '2021-10-01' WHERE name = 'Sofia Garcia';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 126,
    "prompt": "What is the average price of eco-friendly materials used in garment production across different countries?",
    "generated_sql": "SELECT AVG(price) FROM garment_production WHERE material = 'Recycled Polyester' AND manufacturing_country IN (SELECT * FROM garment_production GROUP BY manufacturing_country ORDER BY AVG(price) ASC LIMIT 1);",
    "reference_sql": "SELECT AVG(price) as avg_price, country FROM eco_materials GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only Recycled Polyester and limits to one country instead of averaging eco-friendly materials across all countries"
    }
  },
  {
    "example_id": 127,
    "prompt": "Which sustainable materials are used by companies in the 'Asia-Pacific' region?",
    "generated_sql": "SELECT material FROM sustainable_materials WHERE region = 'Asia-Pacific' AND is_sustainable = true;",
    "reference_sql": "SELECT DISTINCT Materials.material FROM Companies JOIN Materials ON Companies.id = Materials.company_id WHERE Companies.region = 'Asia-Pacific';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 128,
    "prompt": "List all Shariah-compliant financial products offered in the Southeast Asian region",
    "generated_sql": "SELECT * FROM Shariah_Compliant_Financial_Products WHERE region = 'Southeast Asian';",
    "reference_sql": "SELECT product_name FROM shariah_compliant_products WHERE region = 'Southeast Asia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters region = 'Southeast Asian' instead of the correct region name (e.g., 'Southeast Asia')"
    }
  },
  {
    "example_id": 129,
    "prompt": "List the names and account balances for customers who have both a Shariah-compliant mortgage and a socially responsible loan?",
    "generated_sql": "SELECT customer_id, name, balance FROM shariah_consistent_mortgage_2 WHERE is_shariah_compliant = TRUE AND is_social_responsible = TRUE;",
    "reference_sql": "SELECT sm.customer_name, sm.account_balance FROM shariah_mortgages sm JOIN shariah_loans sl ON sm.mortgage_id = sl.mortgage_id JOIN socially_responsible_loans srl ON sm.customer_id = srl.customer_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query only uses the mortgage table and does not join the loan table to ensure customers have both products"
    }
  },
  {
    "example_id": 130,
    "prompt": "How many volunteers are there in total, and how many of them are from Africa?",
    "generated_sql": "SELECT COUNT(DISTINCT volunteer_id), ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT volunteer_id) DESC) as volunteer_year FROM volunteer_data;",
    "reference_sql": "SELECT COUNT(*), SUM(region = 'Africa') FROM volunteers;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not filter for Africa and incorrectly uses ROW_NUMBER instead of counting volunteers from Africa."
    }
  },
  {
    "example_id": 131,
    "prompt": "List all suppliers from India with more than 3 delivery incidents in the last 6 months.",
    "generated_sql": "SELECT * FROM suppliers WHERE country = 'India' AND incident_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND EXTRACT(MONTH FROM incident_date) > 3;",
    "reference_sql": "SELECT supplier_name, country FROM FoodSuppliers WHERE country = 'India' AND delivery_incidents > 3 AND last_delivery_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not join suppliers with incidents or aggregate counts; incorrect incident_date filtering"
    }
  },
  {
    "example_id": 132,
    "prompt": "What was the total number of open data initiatives in Africa in 2018?",
    "generated_sql": "SELECT COUNT(*) FROM open_data_initiatives WHERE country IN ('Nigeria', 'South Africa', 'Kenya', 'Egypt', 'Morocco', 'South Africa', 'Nigeria');",
    "reference_sql": "SELECT SUM(num_initiatives) FROM open_data INNER JOIN africa_countries ON open_data.country = africa_countries.country WHERE open_data.year = 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for year = 2018 and restricts to a hardcoded subset of countries rather than all of Africa."
    }
  },
  {
    "example_id": 133,
    "prompt": "Who are the top 3 donors for open data initiatives in the city of Chicago?",
    "generated_sql": "SELECT donor_name, ROUND(donation_amount, 2) as donations FROM open_data_initiatives WHERE city = 'Chicago' GROUP BY donor_name ORDER BY donations DESC LIMIT 3;",
    "reference_sql": "SELECT d.name, d.amount FROM donors d WHERE d.city = 'Chicago' ORDER BY d.amount DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "donation_amount is not aggregated; should use SUM to get total donations per donor"
    }
  },
  {
    "example_id": 134,
    "prompt": "Who are the top 3 authors with the most citations in the Mathematics department in the past 5 years?",
    "generated_sql": "SELECT name, RANK() OVER (ORDER BY citation_date DESC) as rank FROM authors WHERE department = 'Mathematics' AND year >= 2015 AND rank <= 3;",
    "reference_sql": "SELECT author, SUM(cites) as total_cites FROM publications WHERE author IN (SELECT name FROM authors WHERE department = 'Mathematics') AND year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY author ORDER BY total_cites DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not aggregate citation counts or filter citations correctly over the past 5 years and misuses ranking on citation_date instead of citation count."
    }
  },
  {
    "example_id": 135,
    "prompt": "What is the average renewable energy capacity per project in each country?",
    "generated_sql": "SELECT project_name, AVG(capacity) as avg_capacity FROM renewable_energy_capacity GROUP BY project_name;",
    "reference_sql": "SELECT project_name, country, capacity, AVG(capacity) OVER (PARTITION BY country) AS avg_capacity FROM renewable_energy_projects;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by project_name and omits country, instead of computing average capacity per project for each country."
    }
  },
  {
    "example_id": 136,
    "prompt": "Which cultural heritage sites in Japan have the highest visitor count?",
    "generated_sql": "SELECT site_name, COUNT(*) as visitor_count FROM cultural_sites WHERE country = 'Japan' GROUP BY site_name ORDER BY visitor_count DESC LIMIT 1;",
    "reference_sql": "SELECT site_name, visitor_count FROM cultural_heritage_sites WHERE country = 'Japan' ORDER BY visitor_count DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) on site records rather than using the visitor_count column and only returns one site"
    }
  },
  {
    "example_id": 137,
    "prompt": "How many tunnels in Washington state were constructed after 2010?",
    "generated_sql": "SELECT SUM(tunnel_count) FROM tunnels WHERE state = 'Washington' AND construction_date > '2010-01-01';",
    "reference_sql": "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(tunnel_count) and wrong date boundary instead of COUNT(*) and filtering for dates after 2010"
    }
  },
  {
    "example_id": 138,
    "prompt": "What is the average resilience score for each type of infrastructure project in Texas in 2021?",
    "generated_sql": "SELECT i.type, AVG(i.score) AS avg_score FROM Infrastructure_Project i JOIN Projects p ON i.project_id = p.id WHERE p.state = 'Texas' AND YEAR(p.date) = 2021 GROUP BY i.type;",
    "reference_sql": "SELECT Project_Type, AVG(Resilience_Score) FROM Infrastructure_Projects WHERE Year = 2021 AND State = 'Texas' GROUP BY Project_Type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 139,
    "prompt": "What is the total cost of all resilience projects in the state of 'California'?",
    "generated_sql": "SELECT SUM(cost) FROM resilience_projects WHERE state = 'California';",
    "reference_sql": "SELECT SUM(cost) FROM Infrastructure_Projects WHERE state = 'California';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 140,
    "prompt": "List all active legal technology providers in the justice_schemas.legal_tech_providers table, along with the number of tools they offer.",
    "generated_sql": "SELECT provider_name, num_tools FROM legal_tech_providers WHERE num_tools > 0;",
    "reference_sql": "SELECT name, num_tools FROM justice_schemas.legal_tech_providers WHERE is_active = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses num_tools>0 instead of filtering on an active status column and doesn\u2019t reference the justice_schemas schema."
    }
  },
  {
    "example_id": 141,
    "prompt": "Delete pollution records from the ocean_pollution table that are older than 10 years.",
    "generated_sql": "DELETE FROM ocean_pollution WHERE year > 10;",
    "reference_sql": "DELETE FROM ocean_pollution WHERE pollution_date < (CURRENT_DATE - INTERVAL '10 years');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Deletes records where year > 10 instead of records older than 10 years (year < current_year - 10)"
    }
  },
  {
    "example_id": 142,
    "prompt": "Find marine pollution control projects that started after 2015, ordered by budget",
    "generated_sql": "SELECT name, budget, start_year FROM marine_pollution_control WHERE start_year < 2015 ORDER BY budget;",
    "reference_sql": "SELECT * FROM pollution_control_projects WHERE start_date > '2015-01-01' ORDER BY budget;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses start_year < 2015 instead of start_year > 2015"
    }
  },
  {
    "example_id": 143,
    "prompt": "List all whale shark sightings in the Pacific Ocean.",
    "generated_sql": "SELECT * FROM whale_shark_sightings WHERE ocean = 'Pacific Ocean';",
    "reference_sql": "SELECT species, location, date FROM marine_sightings WHERE species = 'Whale Shark' AND location LIKE '%Pacific%';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 144,
    "prompt": "What are the maximum and minimum depths of the Arctic Ocean?",
    "generated_sql": "SELECT region, MAX(depth) as max_depth, MIN(depth) as min_depth FROM ocean_borders WHERE region = 'Arctic' GROUP BY region;",
    "reference_sql": "SELECT ocean, max_depth, min_depth FROM ocean_depths WHERE ocean = 'Arctic Ocean';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 145,
    "prompt": "How many movies were released each year?",
    "generated_sql": "SELECT year, COUNT(*) FROM Movies GROUP BY year;",
    "reference_sql": "SELECT release_year, COUNT(*) FROM movies GROUP BY release_year;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 146,
    "prompt": "What are the menu items with a sustainability score above 90 and their corresponding categories?",
    "generated_sql": "SELECT menu_item, category FROM menu_categories_2 WHERE sustainability >= 90 AND category IN ('Hamburger', 'Pizza', 'Pasta', 'Coconut');",
    "reference_sql": "SELECT category, item_name FROM Menu WHERE sustainability_score > 90;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only specific categories and uses >= 90 instead of > 90"
    }
  },
  {
    "example_id": 147,
    "prompt": "What is the total cost of ingredients for gluten-free dishes in the healthy menu?",
    "generated_sql": "SELECT SUM(cost) FROM menu WHERE ingredients LIKE '%gluten-free%';",
    "reference_sql": "SELECT SUM(cost) FROM ingredients WHERE is_gluten_free = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not filter for the healthy menu category"
    }
  },
  {
    "example_id": 148,
    "prompt": "Insert a new mining operation 'Operation E' in Australia with water consumption of 500 cubic meters",
    "generated_sql": "INSERT INTO mining_operations (id, operation_name, water_consumption) VALUES (2, 'Operation E', 500);",
    "reference_sql": "INSERT INTO mining_operations (operation_id, operation_name, location) VALUES (4, 'Operation E', 'Australia'); INSERT INTO water_consumption (operation_id, water_consumption_cubic_meters) VALUES (4, 500);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing country column and value for Australia"
    }
  },
  {
    "example_id": 149,
    "prompt": "What is the total number of employees by role at each mining site in the Western US?",
    "generated_sql": "SELECT SUM(Employees) FROM MiningSite WHERE Location LIKE 'West%' AND Role = 'Engineering';",
    "reference_sql": "SELECT mining_sites.name, role, COUNT(*) FROM mining_sites INNER JOIN employees ON mining_sites.id = employees.site_id GROUP BY mining_sites.name, role, location;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only sums engineering employees and lacks grouping by site and role"
    }
  },
  {
    "example_id": 150,
    "prompt": "Delete any customer records with data usage below 5 GB.",
    "generated_sql": "DELETE FROM customer_usage WHERE data_usage < 5000000000;",
    "reference_sql": "DELETE FROM customers WHERE data_usage < 5.0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes data_usage is stored in bytes and uses 5000000000; query may not correctly target values below 5 GB"
    }
  },
  {
    "example_id": 151,
    "prompt": "What is the total number of customer complaints regarding mobile and broadband services by region?",
    "generated_sql": "SELECT region, SUM(complaints.count) AS total_complaints FROM complaints WHERE complaints.region = 'Mobile' GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(*) AS total_complaints FROM complaints WHERE complaint_type IN ('Mobile', 'Broadband') GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters region = 'Mobile' instead of service type and omits broadband."
    }
  },
  {
    "example_id": 152,
    "prompt": "Delete all comments made by users under 18 years old.",
    "generated_sql": "DELETE FROM comments WHERE user_id IN (SELECT user_id FROM user_age_limits WHERE user_age < 18);",
    "reference_sql": "DELETE FROM comments WHERE DATEDIFF('day', created_at, NOW()) < 18 * 365",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 153,
    "prompt": "What is the minimum depth at which a deep-sea expedition has been conducted in the Atlantic Ocean?",
    "generated_sql": "SELECT MIN(depth) FROM Deep_Sea_Expeditions WHERE ocean = 'Atlantic' AND expedition_name = 'Deep_Sea_Expedition';",
    "reference_sql": "SELECT MIN(depth) FROM deep_sea_expeditions WHERE location = 'Atlantic Ocean';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary expedition_name filter restricts to a specific expedition rather than all Atlantic deep-sea expeditions"
    }
  },
  {
    "example_id": 154,
    "prompt": "Identify the top 2 teams with the highest number of kills in a specific game category.",
    "generated_sql": "SELECT teams.team_name, COUNT(DISTINCT kills.id) as kills_per_team FROM teams INNER JOIN kills ON teams.id = kills.team_id WHERE team_name IN ('NFL', 'NBA', 'NBA', 'NFL', 'NBA', 'NBA', 'CFL', 'NBA') GROUP BY teams.team_name ORDER BY kills_per_team DESC LIMIT 2;",
    "reference_sql": "SELECT Team, SUM(Kills) AS TotalKills FROM GameStats WHERE Game = 'FPS Game' GROUP BY Team ORDER BY TotalKills DESC FETCH FIRST 2 ROWS ONLY;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters team_name instead of game category and uses incorrect IN list"
    }
  },
  {
    "example_id": 155,
    "prompt": "Update the 'player_achievements' table to mark achievements as 'completed' where the achievement_difficulty is 'easy'",
    "generated_sql": "UPDATE player_achievements SET completed = true WHERE achievement_difficulty = 'easy';",
    "reference_sql": "WITH easy_achievements AS (UPDATE player_achievements SET completed = 'true' WHERE achievement_difficulty = 'easy') SELECT * FROM easy_achievements;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 156,
    "prompt": "Which region has the highest number of esports events?",
    "generated_sql": "SELECT region, num_events FROM esports_events_by_region WHERE num_events = (SELECT MAX(num_events) FROM esports_events_by_region);",
    "reference_sql": "SELECT Region, COUNT(*) as EventCount FROM Events GROUP BY Region ORDER BY EventCount DESC LIMIT 1",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 157,
    "prompt": "Delete soil moisture data for sensor 010 before 2023-02-28",
    "generated_sql": "DELETE FROM soil_moisture WHERE sensor_number = 010 AND date_start < '2023-02-28';",
    "reference_sql": "DELETE FROM SoilMoistureData   WHERE sensor_id = 10 AND date < '2023-02-28';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Numeric literal 010 is interpreted as 10; sensor id should be quoted as '010'"
    }
  },
  {
    "example_id": 158,
    "prompt": "What is the total budget allocated to public services in the state of New York, and what percentage of the total state budget does this represent?",
    "generated_sql": "SELECT SUM(budget) FROM public_services WHERE state = 'New York' AND percentage = (SELECT COUNT(*) FROM public_services WHERE state = 'New York') * 100.00;",
    "reference_sql": "SELECT (budget / total_budget) * 100 as percentage FROM budget_allocation INNER JOIN total_budget ON budget_allocation.state = total_budget.state WHERE budget_allocation.state = 'New York' AND budget_allocation.category = 'Public services';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters instead of computing percentage and uses COUNT(*) incorrectly; does not calculate percentage of total state budget"
    }
  },
  {
    "example_id": 159,
    "prompt": "What are the top 3 countries with the most rare earth element production?",
    "generated_sql": "SELECT country, SUM(element) as total_element_production FROM production WHERE element = 'Rare earth' GROUP BY country ORDER BY total_element_production DESC LIMIT 3;",
    "reference_sql": "SELECT country FROM production ORDER BY production DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "SUM(element) is incorrect; should sum the production amount column, not the element field"
    }
  },
  {
    "example_id": 160,
    "prompt": "Count the number of properties in Austin with a listing price below $400,000 and sustainable features.",
    "generated_sql": "SELECT COUNT(*) FROM properties WHERE city = 'Austin' AND listing_price < 400000 AND sustainable_features = true;",
    "reference_sql": "SELECT COUNT(*) FROM properties WHERE city = 'Austin' AND listing_price < 400000 AND sustainable = true;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 161,
    "prompt": "What is the average property value in historically underrepresented communities?",
    "generated_sql": "SELECT AVG(value) FROM Property WHERE community IN ('African American', 'Native Hawaiian') AND value > 300;",
    "reference_sql": "SELECT AVG(Property_Value) FROM Property_Value_History pvh JOIN Property_Details pd ON pvh.Property_ID = pd.Property_ID WHERE Underrepresented = 'Yes';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Includes an unnecessary value > 300 filter and only two communities, not all historically underrepresented groups"
    }
  },
  {
    "example_id": 162,
    "prompt": "How many wind power projects were completed in Germany and Sweden in 2019 and 2020?",
    "generated_sql": "SELECT COUNT(*) FROM wind_projects WHERE country IN ('Germany', 'Sweden') AND year IN (2019, 2020);",
    "reference_sql": "SELECT country, COUNT(*) FROM wind_projects_2 WHERE completion_year IN (2019, 2020) GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing GROUP BY country and year to get counts per country per year"
    }
  },
  {
    "example_id": 163,
    "prompt": "What is the average energy efficiency rating for residential buildings in the United States, grouped by state?",
    "generated_sql": "SELECT state, AVG(energy_efficiency_rating) FROM residential_buildings WHERE country = 'USA' GROUP BY state;",
    "reference_sql": "SELECT state, AVG(rating) AS avg_rating FROM Residential_Buildings GROUP BY state;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 164,
    "prompt": "Find the number of vegetarian dishes that are not offered at any restaurant.",
    "generated_sql": "SELECT COUNT(DISTINCT dish_id) FROM cuisine WHERE is_vegetarian = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM dishes WHERE type = 'vegetarian' AND id NOT IN (SELECT dish_id FROM menus);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not exclude dishes that are offered at restaurants"
    }
  },
  {
    "example_id": 165,
    "prompt": "What is the total revenue for 'Breakfast' menu items in the 'Downtown' location?",
    "generated_sql": "SELECT SUM(revenue) FROM MenuItems WHERE location = 'Downtown';",
    "reference_sql": "SELECT SUM(r.revenue) FROM menus m JOIN revenue r ON m.menu_id = r.menu_id WHERE m.dish_type = 'Breakfast' AND m.location = 'Downtown';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for 'Breakfast' menu items"
    }
  },
  {
    "example_id": 166,
    "prompt": "Create a view to display suppliers with a sustainability score greater than 80",
    "generated_sql": "CREATE VIEW suppliers_sustainability_scores AS SELECT s.name, s.score FROM suppliers s INNER JOIN sustainability_score s_score ON s.id = s.supplier_id WHERE s.score > 80;",
    "reference_sql": "CREATE VIEW sustainable_suppliers AS SELECT * FROM suppliers WHERE sustainability_score > 80;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses s.score instead of the score from the sustainability_score table and the join is unnecessary"
    }
  },
  {
    "example_id": 167,
    "prompt": "Display the number of employees working in each store in Canada.",
    "generated_sql": "SELECT e.store_name, COUNT(e.employee_id) as num_employees FROM employees e WHERE e.country = 'Canada' GROUP BY e.store_name;",
    "reference_sql": "SELECT location, num_employees FROM store_employee_view WHERE country = 'Canada';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 168,
    "prompt": "What is the total mass of space objects in high Earth orbit?",
    "generated_sql": "SELECT SUM(mass) FROM space_objects WHERE orbit_type = 'high_earth_orbit';",
    "reference_sql": "SELECT SUM(mass) FROM space_objects_heo;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 169,
    "prompt": "What is the percentage of male and female fans who participated in athlete wellbeing programs in the last 6 months, by age group?",
    "generated_sql": "SELECT age_group, 100.0 * SUM(participated) / (SELECT COUNT(*) FROM athlete_wellbeing_programs) AS percentage FROM athlete_wellbeing_programs WHERE program_name IN ('Gym', 'Soccer', 'Hockey', 'Basketball', 'Cricket', 'Football', 'League playoffs', 'Athlete development', 'Fitness', 'Workout', 'Hip-Hop', 'Surrealism', 'Cup games', 'Cycling', 'Football', 'Hockey', 'Football', 'Foot",
    "reference_sql": "SELECT age_group, gender, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wellbeing_participants WHERE gender = age_group AND last_event_date >= CURDATE() - INTERVAL 6 MONTH) AS percentage FROM (SELECT CASE WHEN age < 30 THEN '18-29' WHEN age < 40 THEN '30-39' ELSE '40+' END AS age_group, gender FROM wellbeing_participants WHERE last_event_date >= CURDATE() - INTERVAL 6 MONTH) AS age_groups GROUP BY age_group, gender;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing gender grouping, incorrect denominator, and no filter for the last 6 months"
    }
  },
  {
    "example_id": 170,
    "prompt": "What is the total revenue generated by the Los Angeles Lakers from merchandise sales in Q1 of 2021?",
    "generated_sql": "SELECT SUM(revenue) FROM merchandise WHERE merchandise_type = 'Soccer' AND Q1 = 2021;",
    "reference_sql": "SELECT SUM(revenue) FROM merchandise_sales WHERE team = 'Los Angeles Lakers' AND quarter = 'Q1' AND year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect filters: uses merchandise_type 'Soccer' and Q1=2021 instead of filtering for team='Los Angeles Lakers' and date in Q1 2021."
    }
  },
  {
    "example_id": 171,
    "prompt": "Remove the 'Zero-day exploit' record from the 'exploits' table",
    "generated_sql": "DELETE FROM exploits WHERE exploit_name = 'Zero-day'",
    "reference_sql": "DELETE FROM exploits WHERE name='Zero-day exploit';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses 'Zero-day' instead of the full 'Zero-day exploit' name"
    }
  },
  {
    "example_id": 172,
    "prompt": "What is the average severity of vulnerabilities in the 'Malware' category?",
    "generated_sql": "SELECT AVG(severity) FROM vulnerabilities WHERE category = 'Malware';",
    "reference_sql": "SELECT AVG(severity = 'Critical') + AVG(severity = 'High') * 0.75 + AVG(severity = 'Medium') * 0.5 + AVG(severity = 'Low') * 0.25 as average FROM vulnerabilities WHERE category = 'Malware';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 173,
    "prompt": "How many bicycle-sharing systems are available in the 'transportation_systems' table?",
    "generated_sql": "SELECT SUM(count) FROM transportation_systems WHERE type = 'bicycle_sharing';",
    "reference_sql": "SELECT COUNT(*) FROM transportation_systems WHERE system_type = 'Bicycle-Sharing';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses SUM(count) instead of counting rows; it should use COUNT(*) to count bicycle-sharing systems."
    }
  },
  {
    "example_id": 174,
    "prompt": "What is the maximum number of bike-share trips in a day in Paris?",
    "generated_sql": "SELECT MAX(trips) FROM Paris_Trips WHERE city = 'Paris';",
    "reference_sql": "SELECT MAX(trips_per_day) FROM bike_trips WHERE city = 'Paris';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not group by date to calculate daily totals before taking the maximum"
    }
  },
  {
    "example_id": 175,
    "prompt": "What is the average claim amount in the 'East' region?",
    "generated_sql": "SELECT AVG(claim_amount) FROM claims WHERE region = 'East';",
    "reference_sql": "SELECT AVG(Amount) FROM Claims WHERE Region = 'East';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 176,
    "prompt": "What is the total number of electric vehicles adopted in Canada and the UK?",
    "generated_sql": "SELECT COUNT(*) FROM electric_vehicles WHERE country IN ('Canada', 'UK');",
    "reference_sql": "SELECT SUM(AdoptionRate) FROM ElectricVehicleAdoptionCAUK WHERE IsCAUK IN (1, 2);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 177,
    "prompt": "Show the number of visitors for each exhibition type",
    "generated_sql": "SELECT Exhibitions.ExhibitionType, COUNT(Visitors.VisitorID) as VisitorCount FROM Exhibitions INNER JOIN Visitors ON Exhibitions.ExhibitionID = Visitors.ExhibitionID GROUP BY Exhibitions.ExhibitionType;",
    "reference_sql": "SELECT Exhibitions.type, COUNT(Tickets.visitor_id) FROM Exhibitions JOIN Tickets ON Exhibitions.id = Tickets.exhibition_id GROUP BY Exhibitions.type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 178,
    "prompt": "How many landfills are there in Tokyo with a capacity over 100,000 tons?",
    "generated_sql": "SELECT COUNT(*) FROM landfills WHERE city = 'Tokyo' AND capacity > 1000000;",
    "reference_sql": "SELECT COUNT(*) FROM landfills WHERE location = 'Tokyo' AND capacity > 100000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters capacity > 1,000,000 instead of > 100,000"
    }
  },
  {
    "example_id": 179,
    "prompt": "What is the maximum duration of 'Yoga' workouts in the 'workout_data' table?",
    "generated_sql": "SELECT MAX(duration) FROM workout_data WHERE category = 'Yoga';",
    "reference_sql": "SELECT MAX(duration) as max_duration FROM workout_data WHERE workout_type = 'Yoga';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 180,
    "prompt": "What is the total investment in agricultural innovation in the 'Investment_Data' table for each crop type?",
    "generated_sql": "SELECT Crop FROM Investment_Data WHERE Investment_Type = 'Agriculture' GROUP BY Crop;",
    "reference_sql": "SELECT crop_type, SUM(investment_amount) FROM Investment_Data GROUP BY crop_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not calculate total investment; missing SUM(Investment_Amount) in SELECT clause"
    }
  },
  {
    "example_id": 181,
    "prompt": "List the top 3 countries with the highest number of satellites launched",
    "generated_sql": "SELECT name, COUNT(*) as num_satellites, SUM(launch_year) as total_launches FROM satellites WHERE country IN ('India', 'China', 'Japan') GROUP BY name ORDER BY total_launches DESC LIMIT 3;",
    "reference_sql": "SELECT Country, COUNT(*) as SatelliteCount, RANK() OVER(ORDER BY COUNT(*) DESC) as Rank FROM Satellites GROUP BY Country HAVING COUNT(*) > 0 ORDER BY Rank;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only three countries and orders by sum of launch_year instead of count of satellites for all countries"
    }
  },
  {
    "example_id": 182,
    "prompt": "What is the total number of fish in fish farms located in the North Atlantic Ocean?",
    "generated_sql": "SELECT COUNT(*) FROM fish_farms WHERE location = 'North Atlantic Ocean';",
    "reference_sql": "SELECT SUM(number_of_fish) FROM fish_farms WHERE location = 'North Atlantic Ocean';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts farms instead of summing the fish counts"
    }
  },
  {
    "example_id": 183,
    "prompt": "What was the total attendance at poetry readings in San Francisco?",
    "generated_sql": "SELECT SUM(attendance) FROM poetry_reads WHERE city = 'San Francisco';",
    "reference_sql": "SELECT SUM(attendance) FROM events WHERE event_type = 'Poetry Reading' AND city = 'San Francisco';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 184,
    "prompt": "What's the average rating of K-dramas released between 2016 and 2018?",
    "generated_sql": "SELECT AVG(rating) FROM (SELECT rating FROM movies WHERE release_year BETWEEN 2017 AND 2018) AS subquery;",
    "reference_sql": "SELECT AVG(rating) FROM kdramas WHERE release_year BETWEEN 2016 AND 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for K-dramas and uses incorrect year range (2017-2018 instead of 2016-2018)"
    }
  },
  {
    "example_id": 185,
    "prompt": "How many cases were opened in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM cases WHERE cause = 'Medical Device' AND year = 2021;",
    "reference_sql": "SELECT COUNT(*) FROM cases WHERE YEAR(open_date) = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters by cause = 'Medical Device' instead of counting all cases opened in 2021."
    }
  },
  {
    "example_id": 186,
    "prompt": "What is the number of flu cases in each region?",
    "generated_sql": "SELECT region, COUNT(*) FROM flu_cases GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(*) FROM flu_cases GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 187,
    "prompt": "What is the obesity rate among adults in North American countries in 2019?",
    "generated_sql": "SELECT AVG(ObesityRate) FROM ObesityRate WHERE Country IN ('Canada', 'USA', 'Mexico') AND Year = 2019;",
    "reference_sql": "SELECT Country, Continent, ObesityRate FROM ObesityRates WHERE Continent = 'North America' AND Year = 2019;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Only averages three countries instead of all North American countries and misses per-country rates"
    }
  },
  {
    "example_id": 188,
    "prompt": "Update the common name of the scientific name \"Loligo opalescens\" to \"California market squid\".",
    "generated_sql": "UPDATE species SET common_name = 'California market squid' WHERE name = 'Loligo opalescens';",
    "reference_sql": "UPDATE marine_species SET common_name = 'California market squid' WHERE scientific_name = 'Loligo opalescens';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 189,
    "prompt": "What is the minimum depth at which a marine species can be found?",
    "generated_sql": "SELECT MIN(depth) FROM species;",
    "reference_sql": "SELECT MIN(min_depth) FROM marine_species_depths;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing a WHERE clause to filter for marine species"
    }
  },
  {
    "example_id": 190,
    "prompt": "What is the minimum ocean temperature, grouped by ocean basin?",
    "generated_sql": "SELECT ocean_basin, MIN(temperature) OVER (PARTITION BY ocean_basin) as min_temperature FROM ocean_temperatures;",
    "reference_sql": "SELECT ocean_basin, MIN(temperature) FROM ocean_temperature GROUP BY ocean_basin;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses a window function instead of GROUP BY, returning a row per record rather than one aggregated row per basin"
    }
  },
  {
    "example_id": 191,
    "prompt": "What is the total number of transactions performed by all decentralized applications?",
    "generated_sql": "SELECT COUNT(*) FROM transactions;",
    "reference_sql": "SELECT COUNT(*) FROM transactions;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts all transactions without filtering for decentralized application transactions"
    }
  },
  {
    "example_id": 192,
    "prompt": "Create a table to store ingredient sourcing information",
    "generated_sql": "CREATE TABLE ingredients_sourcing(id INT PRIMARY KEY, name VARCHAR(50), supplier VARCHAR(50), quantity INT, is_organic VARCHAR(50));",
    "reference_sql": "CREATE TABLE ingredient_sourcing (ingredient_id INT, supplier_id INT, sourcing_date DATE, PRIMARY KEY (ingredient_id, sourcing_date));",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 193,
    "prompt": "What is the maximum number of pieces created by an artist who has used oil as a medium?",
    "generated_sql": "SELECT MAX(pieces_created) FROM (SELECT artist_id, COUNT(DISTINCT piece_id) AS pieces_created FROM artist_pieces WHERE medium = 'oil') AS max_pieces;",
    "reference_sql": "SELECT MAX(pieces) FROM artists_oil WHERE medium = 'oil';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY artist_id to count pieces per artist before taking the maximum"
    }
  },
  {
    "example_id": 194,
    "prompt": "What is the earliest year a peacekeeping operation was conducted in 'Asia'?",
    "generated_sql": "SELECT MIN(date) FROM peacekeeping_operations WHERE region = 'Asia';",
    "reference_sql": "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns the earliest full date rather than extracting the year; should use YEAR(MIN(date)) or MIN(year)"
    }
  },
  {
    "example_id": 195,
    "prompt": "What is the total number of peacekeeping operations conducted by each country, ranked from highest to lowest?",
    "generated_sql": "SELECT country, COUNT(*) as total_operations FROM peacekeeping_operations GROUP BY country ORDER BY total_operations DESC;",
    "reference_sql": "SELECT Country, SUM(Operations) OVER (PARTITION BY Country ORDER BY Year ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalOperations, RANK() OVER (ORDER BY SUM(Operations) DESC) AS PeacekeepingRank FROM PeacekeepingOperations GROUP BY Country ORDER BY PeacekeepingRank;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 196,
    "prompt": "Calculate the number of unique clients living in 'Sydney' with transactions during the month of 'February'.",
    "generated_sql": "SELECT COUNT(C.client_id) FROM clients C INNER JOIN transactions T ON C.client_id = T.client_id WHERE C.location = 'Sydney' AND L.transaction_date >= '2019-02-01' AND L.transaction_date < '2020-01-01';",
    "reference_sql": "SELECT COUNT(DISTINCT clients.id) FROM clients JOIN transactions ON clients.id = transactions.client_id WHERE clients.city = 'Sydney' AND DATE_TRUNC('month', transactions.transaction_time) = '2022-02-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses wrong date range, incorrect table alias, and missing DISTINCT to count unique clients"
    }
  },
  {
    "example_id": 197,
    "prompt": "Get average returns of ETFs with expense ratio < 0.2 in the past year",
    "generated_sql": "SELECT AVG(retail_return) FROM ETF WHERE EXPENSIVE_REORDER = 0.2 AND EXPENSIVE_REORDER < 0.2 AND EXPENSIVE_REORDER BETWEEN YEAR(CURRENT_DATE) AND YEAR(NOW()) - 1;",
    "reference_sql": "SELECT e.symbol, AVG(r.avg_return) FROM etfs e JOIN etf_returns r ON e.etf_id = r.etf_id WHERE e.expense_ratio < 0.2 GROUP BY e.symbol;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Conditions on expense ratio are contradictory and date filter is incorrect or missing"
    }
  },
  {
    "example_id": 198,
    "prompt": "What is the maximum cargo weight handled by port 'Hong Kong' and 'Shanghai'?",
    "generated_sql": "SELECT MAX(cargo_weight) FROM port_cargo WHERE port_name = 'Hong Kong' AND port_name = 'Hong Kong' AND port_name = 'Shanghai';",
    "reference_sql": "SELECT MAX(weight) FROM cargo WHERE port_name IN ('Hong Kong', 'Shanghai');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect WHERE clause with AND instead of OR and missing grouping by port_name"
    }
  },
  {
    "example_id": 199,
    "prompt": "What is the most common type of cargo for each vessel?",
    "generated_sql": "SELECT vessel_name, cargo_type, COUNT(*) as num_cargo FROM cargo GROUP BY vessel_name, cargo_type ORDER BY num_cargo DESC;",
    "reference_sql": "SELECT V.vessel_name, cargo_type, COUNT(cargo_type) AS frequency FROM cargo C JOIN vessels V ON C.vessel_id = V.vessel_id GROUP BY V.vessel_name, cargo_type ORDER BY frequency DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not select the top cargo_type per vessel; missing filtering for maximum count per vessel"
    }
  },
  {
    "example_id": 200,
    "prompt": "List the top three categories of workforce development programs with the highest budget increases.",
    "generated_sql": "SELECT program_category, SUM(budget_increases) AS total_budget_increases FROM programs GROUP BY program_category ORDER BY total_budget_increases DESC LIMIT 3;",
    "reference_sql": "SELECT category, SUM(budget - LAG(budget) OVER (PARTITION BY category ORDER BY budget_date)) as total_budget_increase FROM programs GROUP BY category ORDER BY total_budget_increase DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 201,
    "prompt": "What are the names and locations of all factories with a workforce diversity score above 85?",
    "generated_sql": "SELECT f.name, f.location FROM factories f INNER JOIN diversity_score d ON f.id = d.factory_id WHERE d.value > 85;",
    "reference_sql": "SELECT name, location FROM factories WHERE diversity_score > 85;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 202,
    "prompt": "Update the number of listens to 200 for artist id 1 in the music_consumption table",
    "generated_sql": "UPDATE music_consumption SET number_of_listens = 2 WHERE id IN (SELECT id FROM music_consumption WHERE artist_id = 1)",
    "reference_sql": "UPDATE music_consumption SET listens = 200 WHERE artist_id = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "number_of_listens is set to 2 instead of 200"
    }
  },
  {
    "example_id": 203,
    "prompt": "Which artists have released music in multiple decades, but not consecutively?",
    "generated_sql": "SELECT artist_name FROM artists WHERE decade IN (SELECT year FROM music_releases WHERE genre = 'Music') OR EXISTS (SELECT 1 FROM artist_releases WHERE year = year);",
    "reference_sql": "SELECT ArtistID FROM ArtistDecades WHERE DecadeEndYear % 10 = 0 AND DecadeStartYear % 10 != 0 INTERSECT SELECT ArtistID FROM ArtistDecades WHERE DecadeEndYear % 10 != 0 AND DecadeStartYear % 10 = 0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not group by artist or calculate decades and does not identify non-consecutive decade releases"
    }
  },
  {
    "example_id": 204,
    "prompt": "Which cities have donors but no active programs?",
    "generated_sql": "SELECT DISTINCT c.city FROM donors d JOIN cities c ON d.donor_id = c.donor_id WHERE c.city IS NULL;",
    "reference_sql": "SELECT city FROM Donors WHERE city NOT IN (SELECT city FROM Programs);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly joins donors to cities and filters for NULL city instead of finding cities with donors that have no active programs."
    }
  },
  {
    "example_id": 205,
    "prompt": "What is the total energy produced by geothermal power in Indonesia in 2019?",
    "generated_sql": "SELECT SUM(energy_production) FROM geothermal_power WHERE country = 'Indonesia' AND year = 2019;",
    "reference_sql": "SELECT SUM(energy_produced) FROM geothermal_power WHERE country = 'Indonesia' AND YEAR(production_date) = 2019;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 206,
    "prompt": "What is the difference in total points scored between the home and away games for each team in the 2020 baseball season?",
    "generated_sql": "SELECT t.team_name, SUM(t.points) - SUM(a.points) AS total_points_away FROM teams t JOIN games a ON t.team_id = a.team_id WHERE t.season = '2020' GROUP BY t.team_name;",
    "reference_sql": "SELECT team_name, (points_home - points_away) as diff FROM baseball_season;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not separate home and away points; sums incorrect tables and fields"
    }
  },
  {
    "example_id": 207,
    "prompt": "What is the total number of schools in rural areas?",
    "generated_sql": "SELECT SUM(size) FROM Schools WHERE location LIKE 'rural%';",
    "reference_sql": "SELECT COUNT(*) FROM schools WHERE location = 'Rural';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It sums the size column instead of counting the number of schools; should use COUNT(*)"
    }
  },
  {
    "example_id": 208,
    "prompt": "List all customers who have a Shariah-compliant finance product and a high financial wellbeing score",
    "generated_sql": "SELECT customers.customer_name FROM customers INNER JOIN finance_products ON customers.customer_id = finance_products.customer_id WHERE customers.financial_wellbeing_score > 90;",
    "reference_sql": "SELECT customers.customer_id, shariah_finance.product, customers.financial_wellbeing FROM customers INNER JOIN shariah_finance ON customers.customer_id = shariah_finance.customer_id WHERE customers.has_shariah_compliant_finance = TRUE AND customers.financial_wellbeing > 7;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for Shariah-compliant finance products"
    }
  },
  {
    "example_id": 209,
    "prompt": "Rank customers by total deposits in Shariah-compliant accounts, with ties given the same rank.",
    "generated_sql": "SELECT customer_id, SUM(debits) as total_debits, SUM(bills) as total_bills, RANK() OVER (ORDER BY SUM(total_debits) DESC ORDER BY total_debits DESC) as rank FROM customers INNER JOIN shariah_compliant_debits ON customers.customer_id = shariah_compliant_debits.customer_id GROUP BY customer_id;",
    "reference_sql": "SELECT customer_id, RANK() OVER (ORDER BY SUM(balance) DESC) as deposit_rank FROM deposits WHERE account_type = 'Shariah-compliant' GROUP BY customer_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums debits and bills instead of deposits and uses invalid window function syntax"
    }
  },
  {
    "example_id": 210,
    "prompt": "What is the total revenue for each warehouse after a 10% discount?",
    "generated_sql": "SELECT w.name, SUM(R.revenue) as total_revenue FROM warehouse_revenue w JOIN (SELECT w.id, SUM(R.revenue) as total_revenue FROM warehouse_revenue w WHERE w.price * w.discount = 1.0 * w.price GROUP BY w.id) r ON w.id = r.w.id;",
    "reference_sql": "SELECT warehouse_id, revenue * 0.9 FROM warehouse_revenue;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not apply a 10% discount to revenue and has incorrect aggregation and join logic."
    }
  },
  {
    "example_id": 211,
    "prompt": "What is the distribution of biotech startup funding sources?",
    "generated_sql": "SELECT SUM(funding.amount) AS total_funding, SUM(funding.source_id) AS total_sources FROM funding JOIN startups ON funding.startup_id = startups.id GROUP BY funding.source_id ORDER BY total_funding DESC;",
    "reference_sql": "SELECT funding_source_type, COUNT(*) FROM funding_sources GROUP BY funding_source_type",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No filter for biotech startups and source_id summed instead of counting or naming sources"
    }
  },
  {
    "example_id": 212,
    "prompt": "What is the total number of biosensors developed in the Asia-Pacific region?",
    "generated_sql": "SELECT COUNT(*) FROM biosensors WHERE region = 'Asia-Pacific';",
    "reference_sql": "SELECT COUNT(*) FROM biosensors.sensors WHERE location = 'Asia-Pacific';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 213,
    "prompt": "How many research grants were awarded to the Computer Science department in the year 2020?",
    "generated_sql": "SELECT COUNT(*) FROM grant WHERE department = 'Computer Science' AND year = 2020;",
    "reference_sql": "SELECT COUNT(*) FROM grant WHERE department = 'Computer Science' AND YEAR(grant_date) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing condition to filter only research grants"
    }
  },
  {
    "example_id": 214,
    "prompt": "List faculty diversity metrics including the number of female, male, and non-binary faculty members in the Mathematics department",
    "generated_sql": "SELECT faculty_gender, COUNT(DISTINCT member_id) AS count FROM faculty_diversity WHERE department = 'Mathematics' GROUP BY faculty_gender;",
    "reference_sql": "SELECT f.gender, COUNT(*) as num_faculty FROM Faculty f WHERE f.department_id = (SELECT id FROM Department WHERE name = 'Mathematics') GROUP BY f.gender;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 215,
    "prompt": "What is the total number of research grants awarded by department?",
    "generated_sql": "SELECT department, SUM(amount) as total_grants FROM grants GROUP BY department;",
    "reference_sql": "SELECT dept_name, SUM(grant_amount) FROM research_grants GROUP BY dept_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums grant amounts rather than counting the number of grants per department."
    }
  },
  {
    "example_id": 216,
    "prompt": "What is the maximum energy consumption by a green building project in Asia?",
    "generated_sql": "SELECT MAX(energy_consumption) FROM green_buildings WHERE location LIKE 'Asia%';",
    "reference_sql": "SELECT MAX(energy_consumption) FROM green_buildings WHERE country = 'India' OR country = 'China' OR country = 'Japan';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using LIKE 'Asia%' may not correctly filter projects located in Asia; should use the exact continent filter or '%Asia%' pattern"
    }
  },
  {
    "example_id": 217,
    "prompt": "What is the distribution of users by age group for each virtual tour?",
    "generated_sql": "SELECT tour_id, user_age, ROW_NUMBER() OVER (ORDER BY user_age DESC) as age_by_age FROM tours;",
    "reference_sql": "SELECT tour_id, age_group, COUNT(*) as user_count FROM virtual_tour_users GROUP BY tour_id, age_group;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not group users into age groups or count distribution per tour"
    }
  },
  {
    "example_id": 218,
    "prompt": "Find the number of unique endangered languages in Oceania and their corresponding traditional art forms.",
    "generated_sql": "SELECT DISTINCT LANGUAGE, traditional_art FROM (SELECT LANGUAGE, traditional_art, COUNT(DISTINCT LANGUAGE) OVER (PARTITION BY LANGUAGE) AS unique_languages FROM Oceania ORDER BY unique_languages DESC) as unique_languages_oceania;",
    "reference_sql": "SELECT language, arts FROM languages WHERE region = 'Oceania' INTERSECT SELECT endangered_languages FROM endangered_languages;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter endangered languages, does not count unique languages, and misuses window function"
    }
  },
  {
    "example_id": 219,
    "prompt": "What is the total number of traditional art pieces created in each region with a population greater than 500,000?",
    "generated_sql": "SELECT region, SUM(num_art_pieces) FROM traditional_art_pieces GROUP BY region;",
    "reference_sql": "SELECT r.name, COUNT(ap.id) FROM regions r JOIN art_pieces ap ON r.id = ap.region_id WHERE r.population > 500000 GROUP BY r.id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query does not filter regions with population > 500,000."
    }
  },
  {
    "example_id": 220,
    "prompt": "What is the total number of traditional art pieces in North American museums?",
    "generated_sql": "SELECT SUM(num_pieces) FROM North_American_Museums WHERE title LIKE '%Traditional%';",
    "reference_sql": "SELECT SUM(quantity) FROM ArtPieces WHERE type = 'traditional art' AND country IN ('USA', 'Mexico') AND region = 'North America';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters museum title for 'Traditional' instead of art type and omits region filter for North America"
    }
  },
  {
    "example_id": 221,
    "prompt": "Which mental health conditions were treated most frequently in Canada during 2022?",
    "generated_sql": "SELECT treatment_type, COUNT(*) as treatment_count FROM mental_health_conditions WHERE country = 'Canada' AND YEAR(treatment_date) = 2022 GROUP BY treatment_type ORDER BY treatment_count DESC;",
    "reference_sql": "SELECT conditions.condition, COUNT(conditions.condition) AS count FROM conditions JOIN patients ON conditions.patient_id = patients.id JOIN treatments ON patients.id = treatments.patient_id WHERE patients.country = 'Canada' AND treatments.treatment_date >= '2022-01-01' AND treatments.treatment_date < '2023-01-01' GROUP BY conditions.condition ORDER BY count DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 222,
    "prompt": "List all legal aid clinics in the justice_schemas.legal_aid_clinics table that have been operational for more than five years.",
    "generated_sql": "SELECT * FROM legal_aid_clinics.clinics WHERE is_operational >= 5;",
    "reference_sql": "SELECT clinic_name FROM justice_schemas.legal_aid_clinics WHERE years_operational > 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect table reference and column; should query justice_schemas.legal_aid_clinics and filter years_operational > 5"
    }
  },
  {
    "example_id": 223,
    "prompt": "How many marine conservation initiatives were launched in the Indian Ocean in 2015 and 2016?",
    "generated_sql": "SELECT COUNT(*) FROM marine_conservation_initiatives WHERE region = 'Indian Ocean' AND launch_year BETWEEN 2015 AND 2016;",
    "reference_sql": "SELECT COUNT(*) FROM marine_conservation_initiatives WHERE region = 'Indian Ocean' AND year IN (2015, 2016);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 224,
    "prompt": "How many pollution control initiatives are in the South Pacific Ocean?",
    "generated_sql": "SELECT COUNT(*) FROM pollution_control_initiatives WHERE location = 'South Pacific Ocean';",
    "reference_sql": "SELECT Oceans.ocean, COUNT(SouthPacificPollution.initiative_name) FROM Oceans LEFT JOIN SouthPacificPollution ON Oceans.ocean = SouthPacificPollution.location GROUP BY Oceans.ocean;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 225,
    "prompt": "How many species of marine life are present in the Southern Ocean?",
    "generated_sql": "SELECT COUNT(*) FROM marine_life WHERE region = 'Southern Ocean';",
    "reference_sql": "SELECT COUNT(DISTINCT species_name) FROM marine_life WHERE location = 'Southern Ocean';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 226,
    "prompt": "What are the names and locations of marine research stations in the Atlantic Ocean?",
    "generated_sql": "SELECT name, location FROM marine_research_stations WHERE region = 'Atlantic Ocean';",
    "reference_sql": "SELECT Research_Station.station_name, latitude, longitude FROM Research_Station WHERE ocean_name = 'Atlantic';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 227,
    "prompt": "What is the average depth of ocean floor mapping projects located in the Arctic region?",
    "generated_sql": "SELECT AVG(depth) FROM ocean_floor_mapping WHERE region = 'Arctic';",
    "reference_sql": "SELECT AVG(depth) FROM ocean_floor_mapping WHERE region = 'Arctic';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 228,
    "prompt": "What is the total frequency of news content for each genre in the media_content table?",
    "generated_sql": "SELECT genre, SUM(frequency) FROM media_content GROUP BY genre;",
    "reference_sql": "SELECT genre, SUM(frequency) FROM media_content WHERE genre LIKE 'News%' GROUP BY genre;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for news content; it sums all content frequencies instead of only news"
    }
  },
  {
    "example_id": 229,
    "prompt": "What is the average quantity of vegan dishes sold per day in the Los Angeles region?",
    "generated_sql": "SELECT AVG(quantity) FROM vegan_sales WHERE region = 'Los Angeles' AND dish_type = 'Vegan';",
    "reference_sql": "SELECT AVG(quantity) FROM orders JOIN menu ON orders.item_id = menu.item_id WHERE menu.dish_type = 'vegan' AND menu.region = 'Los Angeles' GROUP BY order_date;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing grouping by day to compute daily averages before averaging"
    }
  },
  {
    "example_id": 230,
    "prompt": "Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.",
    "generated_sql": "SELECT subscriber_id, subscription_id, DATEDIFF(100, subscriber_id, YEAR(c.subscription_date)) * 100.0 / CURDATE() as speed_drop_percentage FROM subscribers c JOIN subscribers_speed s ON c.subscription_id = s.subscriber_id JOIN speed d ON s.speed_date >= c.subscriber_id AND s.speed_date < c.subscriber_id GROUP BY subscriber_id, subscription_id ORDER BY speed_drop_percentage DESC;",
    "reference_sql": "SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not compute consecutive speed drops over the last three months and uses incorrect joins and calculations"
    }
  },
  {
    "example_id": 231,
    "prompt": "How many mobile subscribers are there in each region?",
    "generated_sql": "SELECT region, SUM(num_subscribers) FROM mobile_subscribers GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(*) FROM mobile_subscribers GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 232,
    "prompt": "What is the total number of broadband subscribers from urban areas?",
    "generated_sql": "SELECT SUM(subscribers) FROM broadband_subscribers WHERE area = 'urban';",
    "reference_sql": "SELECT COUNT(*) FROM broadband_subscribers WHERE subscriber_location = 'Urban';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 233,
    "prompt": "Identify the number of unique causes supported by volunteers from different countries.",
    "generated_sql": "SELECT COUNT(DISTINCT causes) FROM Causes WHERE country IN ('USA', 'Canada', 'Australia', 'France', 'Mexico', 'Japan') AND support_percentage = 50;",
    "reference_sql": "SELECT country, COUNT(DISTINCT cause) as unique_causes FROM volunteers GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters specific countries and support_percentage, and does not group by country to count distinct causes per country as required."
    }
  },
  {
    "example_id": 234,
    "prompt": "How many players are there in each gender?",
    "generated_sql": "SELECT gender, COUNT(*) FROM players GROUP BY gender;",
    "reference_sql": "SELECT Gender, COUNT(*) as NumPlayers FROM Players GROUP BY Gender;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 235,
    "prompt": "Update the genre of all games with the name 'Civilization' to 'Simulation'",
    "generated_sql": "UPDATE games SET genre = 'Simulation' WHERE name = 'Civilization';",
    "reference_sql": "UPDATE games SET genre = 'Simulation' WHERE name = 'Civilization';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 236,
    "prompt": "List the number of IoT sensors in the 'PrecisionFarming' schema that have a 'moisture' measurement and were installed after 2019-01-01.",
    "generated_sql": "SELECT COUNT(*) FROM PrecisionFarming.IoTSensors WHERE sensor_type ='moisture' AND installed_before_2019_01_01 AND sensor_name = 'PrecisionFarming.PrecisionFarmers';",
    "reference_sql": "SELECT COUNT(*) FROM PrecisionFarming.IoT_Sensors WHERE measurement = 'moisture' AND install_date > '2019-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses an invalid installed_before_2019_01_01 condition, filters on sensor_name incorrectly, and does not check installed_date > '2019-01-01'."
    }
  },
  {
    "example_id": 237,
    "prompt": "What is the average co-ownership price per square foot in the Bay Area?",
    "generated_sql": "SELECT AVG(co_ownership_price) FROM co_ownership WHERE state = 'CA';",
    "reference_sql": "SELECT AVG(price / size) FROM bay_area_prop WHERE co_ownership = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query calculates average price not price per square foot and includes entire California instead of Bay Area"
    }
  },
  {
    "example_id": 238,
    "prompt": "What is the change in co-ownership cost per property between consecutive rows, ordered by the 'co_ownership' table's ID?",
    "generated_sql": "SELECT row_id, COUNT(DISTINCT co_ownership.property_id) * 1.0 / COUNT(DISTINCT co_ownership.property_id) as change_co_ownership_per_unit FROM co_ownership GROUP BY row_id ORDER BY change_co_ownership_per_unit DESC;",
    "reference_sql": "SELECT id, city, co_ownership_cost, LAG(co_ownership_cost) OVER (PARTITION BY city ORDER BY id) AS previous_co_ownership_cost, co_ownership_cost - LAG(co_ownership_cost) OVER (PARTITION BY city ORDER BY id) AS cost_change FROM co_ownership ORDER BY id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses COUNT instead of computing difference of consecutive co-ownership costs using a window function"
    }
  },
  {
    "example_id": 239,
    "prompt": "What is the total square footage of all properties in urban areas with affordable housing?",
    "generated_sql": "SELECT SUM(land_area) FROM properties WHERE area LIKE '%urban%';",
    "reference_sql": "SELECT SUM(size) FROM properties JOIN urban_areas ON properties.area = urban_areas.area WHERE urban_areas.affordable = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for affordable housing"
    }
  },
  {
    "example_id": 240,
    "prompt": "What is the average capacity of renewable energy projects for each country?",
    "generated_sql": "SELECT country, AVG(capacity) FROM renewable_projects GROUP BY country;",
    "reference_sql": "SELECT country, AVG(capacity) FROM projects GROUP BY country",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 241,
    "prompt": "Which menu item in 'Bistro Italiano' has the highest sales?",
    "generated_sql": "SELECT MenuItem, SUM(Sales) as TotalSales FROM MenuItems WHERE MenuItem LIKE 'Bistro%' GROUP BY MenuItem ORDER BY TotalSales DESC LIMIT 1;",
    "reference_sql": "SELECT menu_item, MAX(sales) FROM Sales WHERE restaurant_name = 'Bistro Italiano';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on MenuItem name instead of Restaurant name 'Bistro Italiano'"
    }
  },
  {
    "example_id": 242,
    "prompt": "How many space objects are there in total?",
    "generated_sql": "SELECT COUNT(*) FROM Space_Objects;",
    "reference_sql": "SELECT COUNT(*) FROM space_objects_count;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 243,
    "prompt": "How many astronauts are from 'Brazil'?",
    "generated_sql": "SELECT COUNT(DISTINCT astronaut_id) FROM Astronauts WHERE country = 'Brazil';",
    "reference_sql": "SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 244,
    "prompt": "Which cybersecurity policies in the 'cybersecurity_policies' table were last updated on a specific date?",
    "generated_sql": "SELECT policy_name, updated_date FROM cybersecurity_policies WHERE policy_name = 'Update Policy Yesterday' OR policy_name = 'Update Policy Today' LIMIT 1;",
    "reference_sql": "SELECT policy_name, last_updated FROM cybersecurity_policies WHERE last_updated = '2022-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by policy_name instead of matching the specified updated_date"
    }
  },
  {
    "example_id": 245,
    "prompt": "How many artworks were created by 'Vincent van Gogh'?",
    "generated_sql": "SELECT COUNT(*) FROM Artworks WHERE Artist = 'Vincent van Gogh';",
    "reference_sql": "SELECT COUNT(*) FROM artworks WHERE artist = 'Vincent van Gogh';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 246,
    "prompt": "What is the average age of visitors who attended the \"Modern Art\" exhibition?",
    "generated_sql": "SELECT AVG(VisitorAge) FROM Exhibitions WHERE ExhibitName = 'Modern Art';",
    "reference_sql": "SELECT AVG(visitor_age) FROM visitor_attendance JOIN exhibitions ON visitor_attendance.exhibition_id = exhibitions.exhibition_id WHERE exhibitions.exhibition_name = 'Modern Art';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses the Exhibitions table directly for visitor ages and ignores attendance or visitor tables"
    }
  },
  {
    "example_id": 247,
    "prompt": "What is the average water consumption per capita in Tokyo and Seoul for the year 2019?",
    "generated_sql": "SELECT AVG(water_consumption) FROM (SELECT City, Total_Water_Usage FROM Water_Usage WHERE Year = 2019 GROUP BY City, Total_Water_Usage) AS Water_Usage_Count;",
    "reference_sql": "SELECT AVG(awc.water_consumption / ap.population) FROM asia_water_consumption awc INNER JOIN asia_population ap ON awc.city = ap.city WHERE awc.year = 2019;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for Tokyo and Seoul or compute per capita consumption."
    }
  },
  {
    "example_id": 248,
    "prompt": "What is the total water consumption in liters for residential users in July 2021?",
    "generated_sql": "SELECT SUM(consumption) FROM water_consumption WHERE usage_date BETWEEN '2021-07-01' AND '2021-07-31' AND user_id IN (SELECT user_id FROM users WHERE id BETWEEN 1 AND 2);",
    "reference_sql": "SELECT SUM(consumption) FROM water_consumption WHERE user_category = 'residential' AND usage_date >= '2021-07-01' AND usage_date <= '2021-07-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters users by specific ID range instead of filtering residential users by type"
    }
  },
  {
    "example_id": 249,
    "prompt": "What is the total distance walked by members in each age group?",
    "generated_sql": "SELECT age, SUM(distance) FROM Members GROUP BY age;",
    "reference_sql": "SELECT AVG(distance) as avg_distance, FLOOR(AGE(FROM_DATE(NOW(), '2020-01-01')) / 5) * 5 as age_group FROM workouts JOIN members ON workouts.member_id = members.member_id GROUP BY age_group;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by exact age instead of defined age groups"
    }
  },
  {
    "example_id": 250,
    "prompt": "Delete unsafe AI algorithms with incidents greater than 200 in 2022",
    "generated_sql": "DELETE FROM AI_algorithms WHERE incident_level > 200;",
    "reference_sql": "DELETE FROM unsafe_ai_algorithms WHERE incidents > 200 AND year = 2022;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for year = 2022"
    }
  },
  {
    "example_id": 251,
    "prompt": "Compare the number of economic diversification projects in two regions, one in Europe and one in Oceania, by showing the project type and the number of projects in each region.",
    "generated_sql": "SELECT region, project_type, COUNT(*) AS num_projects FROM economic_diversity WHERE region IN (SELECT region FROM regions WHERE country IN ('Europe', 'Oceania')) GROUP BY region, project_type;",
    "reference_sql": "SELECT 'Europe' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Europe' UNION ALL SELECT 'Oceania' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Oceania';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters regions by country using continent names and uses a subquery unnecessarily, rather than directly filtering the region field for 'Europe' and 'Oceania'"
    }
  },
  {
    "example_id": 252,
    "prompt": "Delete all aircraft models that were manufactured before 2000 from the aircraft_manufacturing table",
    "generated_sql": "DELETE FROM aircraft_manufacturing WHERE model_type = 'Non-Compassionate' AND year < 2000;",
    "reference_sql": "DELETE FROM aircraft_manufacturing WHERE year_manufactured < 2000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters by model_type; it should delete all records with year < 2000 without additional conditions."
    }
  },
  {
    "example_id": 253,
    "prompt": "What is the maximum number of flights operated by a single astronaut?",
    "generated_sql": "SELECT MAX(flight_count) FROM Astronauts;",
    "reference_sql": "SELECT MAX(num_flights) FROM flights;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 254,
    "prompt": "Insert a new record into the 'habitat_preservation' table with the following details: 'habitat_preservation_id' as 3, 'location_id' as 2, 'preservation_method' as 'Planting new trees', 'start_date' as '2022-01-01', 'end_date' as '2023-12-31', 'area_preserved' as 500",
    "generated_sql": "INSERT INTO habitat_preservation (habitat_preservation_id, location_id, preservation_method, start_date, end_date, area_preserved) VALUES (3, 2, 'Planting new trees', '2022-01-01', '2023-12-31', 500, 500);",
    "reference_sql": "INSERT INTO habitat_preservation (habitat_preservation_id, location_id, preservation_method, start_date, end_date, area_preserved) VALUES (3, 2, 'Planting new trees', '2022-01-01', '2023-12-31', 500);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The VALUES list has 7 entries but only 6 columns specified"
    }
  },
  {
    "example_id": 255,
    "prompt": "What is the total area of marine protected areas in the Atlantic Ocean that are larger than 100000 square kilometers?",
    "generated_sql": "SELECT SUM(area) FROM marine_protected_areas WHERE ocean = 'Atlantic Ocean' AND size > 100000;",
    "reference_sql": "SELECT SUM(area_size) as total_area FROM MarineProtectedAreas WHERE ocean = 'Atlantic Ocean' AND area_size > 100000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters on column size instead of area"
    }
  },
  {
    "example_id": 256,
    "prompt": "What was the total funding for 'Art' programs in 'Texas' and 'California'?",
    "generated_sql": "SELECT SUM(funding.amount) FROM funding INNER JOIN programs ON funding.program_name = programs.id WHERE programs.program_type = 'Art' AND programs.state = 'Texas' AND programs.state = 'California';",
    "reference_sql": "SELECT SUM(funding_amount) FROM Programs WHERE (state = 'Texas' OR state = 'California') AND focus = 'Art';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses AND for two states, which can never be true; should use OR or IN for Texas and California."
    }
  },
  {
    "example_id": 257,
    "prompt": "What are the total number of movies released in the 'Comedy' genre and the 'Action' genre, combined, that have a production budget over 100 million dollars?",
    "generated_sql": "SELECT COUNT(DISTINCT genre) AS total_movies, SUM(production_budget) AS total_budget FROM movies WHERE genre IN ('Comedy', 'Action') GROUP BY genre ORDER BY total_budget DESC LIMIT 100;",
    "reference_sql": "SELECT SUM(CASE WHEN Genre IN ('Comedy', 'Action') THEN 1 ELSE 0 END) AS TotalComedyAndActionMovies, SUM(CASE WHEN Genre IN ('Comedy', 'Action') AND ProductionBudget > 100000000 THEN 1 ELSE 0 END) AS TotalComedyAndActionBlockbusters FROM Movies;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing production_budget > 100 million filter and incorrect aggregation (should count movies, not distinct genres, without grouping by genre)"
    }
  },
  {
    "example_id": 258,
    "prompt": "What is the total revenue generated by African-American movies released in 2020?",
    "generated_sql": "SELECT SUM(revenue) FROM Movies WHERE genre = 'Action' AND country = 'Africa' AND releaseyear = 2020;",
    "reference_sql": "SELECT SUM(revenue) FROM african_american_movies WHERE release_year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters use genre = 'Action' and country = 'Africa' instead of selecting African-American movies"
    }
  },
  {
    "example_id": 259,
    "prompt": "Insert a new compliance violation for dispensary 1 on 2022-01-05 with the description 'Expired products'.",
    "generated_sql": "INSERT INTO compliance_violations (violation_id, violation_date, violation_description) VALUES (1, '2022-01-05', 'Expired products');",
    "reference_sql": "INSERT INTO compliance_violations (dispensary_id, violation_date, description) VALUES (1, '2022-01-05', 'Expired products');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing dispensary_id column in the INSERT"
    }
  },
  {
    "example_id": 260,
    "prompt": "Who are the top 3 customers by total purchases from the 'Green Earth' dispensary?",
    "generated_sql": "SELECT customer_name, SUM(quantity_sold) as total_sales FROM purchases WHERE store_id = (SELECT store_id FROM stores WHERE store_name = 'Green Earth Dispensary') AND order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND order_date < DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY customer_name ORDER BY total_sales DESC LIMIT 3;",
    "reference_sql": "SELECT CustomerName, SUM(TotalPaid) AS TotalPurchases FROM Customers JOIN Purchases ON Customers.CustomerID = Purchases.CustomerID WHERE DispensaryName = 'Green Earth' GROUP BY CustomerName ORDER BY TotalPurchases DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query includes arbitrary date filters not specified in the request"
    }
  },
  {
    "example_id": 261,
    "prompt": "How many cases did attorney 'Jane Doe' handle in total?",
    "generated_sql": "SELECT COUNT(*) FROM cases WHERE attorney = 'Jane Doe';",
    "reference_sql": "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 262,
    "prompt": "Show the chemical name and its production cost for the lowest costing chemical",
    "generated_sql": "SELECT chemical_name, production_cost FROM chemical WHERE chemical_name <> 'Cars' ORDER BY production_cost DESC;",
    "reference_sql": "SELECT chemical, cost FROM chemical_costs ORDER BY cost ASC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query orders by production_cost descending, excludes 'Cars', and misses LIMIT to get lowest cost"
    }
  },
  {
    "example_id": 263,
    "prompt": "Which countries received shipments of Chemical E in the last 3 months?",
    "generated_sql": "SELECT Country FROM Shipments WHERE ChemicalE.Type = 'Chemical E' AND ShipmentDate >= DATEADD(month, -3, GETDATE()) AND ShipmentDate < DATEADD(month, -3, GETDATE()) GROUP BY Country;",
    "reference_sql": "SELECT DISTINCT shipped_to FROM shipments WHERE product = 'Chemical E' AND shipped_date >= '2022-04-01'",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The date filters use the same bound (both >= and < DATEADD(month, -3, GETDATE())), so no rows will match, and the chemical filter syntax is incorrect."
    }
  },
  {
    "example_id": 264,
    "prompt": "List the number of community health centers and infectious disease tracking facilities in 'southwest' regions.",
    "generated_sql": "SELECT region, COUNT(*) FROM community_health_centers WHERE region IN ('southwest') GROUP BY region;",
    "reference_sql": "SELECT COUNT(*) FROM ( (SELECT * FROM centers WHERE region = 'southwest') UNION (SELECT * FROM diseases WHERE region = 'southwest') );",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only counts community health centers, not infectious disease tracking facilities"
    }
  },
  {
    "example_id": 265,
    "prompt": "What is the total production (in metric tons) of organic crops in Oceania, broken down by crop type?",
    "generated_sql": "SELECT crop_type, SUM(production) as total_production FROM organic_crop_production WHERE region IN ('Oceania', 'Australia') GROUP BY crop_type;",
    "reference_sql": "SELECT crop_name, SUM(production_tons) FROM organic_crops WHERE country = 'Oceania' GROUP BY crop_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly includes region 'Australia' instead of restricting only to 'Oceania'."
    }
  },
  {
    "example_id": 266,
    "prompt": "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.",
    "generated_sql": "UPDATE students SET accommodation_type = 'Sign Language Interpretation' WHERE student_id = 2;",
    "reference_sql": "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 267,
    "prompt": "What is the total number of disability support programs offered in urban and rural areas, and the percentage of total programs for each area type?",
    "generated_sql": "SELECT ProgramType, COUNT(*) / (SELECT COUNT(*) FROM DisabilitySupports WHERE Area = 'Urban' GROUP BY ProgramType) AS NumPrograms, (SUM(Programs) OVER (PARTITION BY ProgramType)) * 100.0 / (SELECT COUNT(*) FROM DisabilitySupports WHERE Area = 'Urban') AS NumProgramsPercentage FROM DisabilityPrograms WHERE Area = 'Urban' GROUP BY ProgramType;",
    "reference_sql": "SELECT area_type, COUNT(*) as total_programs, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM programs) , 2) as percentage_of_total FROM programs WHERE area_type IN ('urban', 'rural') GROUP BY area_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query aggregates by ProgramType instead of Area, omits rural area, and miscalculates percentages."
    }
  },
  {
    "example_id": 268,
    "prompt": "Who are the top 5 decentralized applications by transaction volume in South America?",
    "generated_sql": "SELECT application_id, SUM(amount) AS total_amount FROM transactions WHERE location = 'South America' GROUP BY application_id ORDER BY total_amount DESC LIMIT 5;",
    "reference_sql": "SELECT name, SUM(daily_tx_volume) as total_tx_volume, RANK() OVER (ORDER BY SUM(daily_tx_volume) DESC) as rank FROM dapps WHERE region = 'South America' GROUP BY name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for decentralized applications or join to retrieve application names"
    }
  },
  {
    "example_id": 269,
    "prompt": "How many wildlife habitats in South Africa have a total area greater than 50000 hectares?",
    "generated_sql": "SELECT SUM(area) FROM wildlife_habitats WHERE country = 'South Africa' AND total_area > 50000;",
    "reference_sql": "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses SUM(area) instead of COUNT(*) to count habitats"
    }
  },
  {
    "example_id": 270,
    "prompt": "Provide the number of wildlife species in the 'Amazon' region.",
    "generated_sql": "SELECT COUNT(*) FROM wildlife_species WHERE region = 'Amazon';",
    "reference_sql": "SELECT region, SUM(species) FROM wildlife_species WHERE region = 'Amazon';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 271,
    "prompt": "What is the total area of wildlife habitats for each country?",
    "generated_sql": "SELECT country, SUM(area) FROM wildlife_habitats GROUP BY country;",
    "reference_sql": "SELECT country, SUM(area_ha) FROM country_habitat GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 272,
    "prompt": "Which country sources the most organic ingredients for cosmetics?",
    "generated_sql": "SELECT country, COUNT(CASE WHEN ingredient = 'organic' THEN quantity END) AS total_organic_quantity FROM Cosmetics_Sources GROUP BY country HAVING total_organic_quantity = (SELECT MAX(total_organic_quantity) FROM Cosmetics_Sources);",
    "reference_sql": "SELECT country, SUM(is_organic) as total_organic_ingredients FROM cosmetics.ingredient_sourcing GROUP BY country ORDER BY total_organic_ingredients DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT instead of SUM for quantities and subquery incorrectly references the aggregate alias over wrong scope"
    }
  },
  {
    "example_id": 273,
    "prompt": "Delete all records in the Makeup table with a Revenue less than 25000.",
    "generated_sql": "DELETE FROM Makeup WHERE Revenue < 25000;",
    "reference_sql": "DELETE FROM Makeup WHERE Revenue < 25000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 274,
    "prompt": "Identify the most frequently purchased beauty product by customers from the US.",
    "generated_sql": "SELECT product_name, user_id, COUNT(*) as count FROM purchases JOIN users ON purchases.user_id = users.id WHERE users.country = 'USA' GROUP BY user_id, product_name ORDER BY count DESC LIMIT 1;",
    "reference_sql": "SELECT product_name, COUNT(*) as purchase_count FROM customer_purchases WHERE country = 'US' GROUP BY product_name ORDER BY purchase_count DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by user_id causing per-user counts rather than total product count and misses filtering for beauty products"
    }
  },
  {
    "example_id": 275,
    "prompt": "What is the total revenue of cruelty-free skincare products in Belgium?",
    "generated_sql": "SELECT SUM(revenue) FROM products WHERE is_cruelty_free = TRUE AND country = 'Belgium';",
    "reference_sql": "SELECT SUM(revenue) FROM CrueltyFreeSkincare WHERE country = 'Belgium';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not filter for skincare products"
    }
  },
  {
    "example_id": 276,
    "prompt": "How many cultural events were held in Canada in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM events WHERE country = 'Canada' AND year = 2021;",
    "reference_sql": "SELECT SUM(events_held) FROM CulturalEvents WHERE country = 'Canada' AND year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to include only cultural events"
    }
  },
  {
    "example_id": 277,
    "prompt": "What are the names and maintenance costs of all military equipment in the Atlantic region with a maintenance cost less than $5000?",
    "generated_sql": "SELECT equipment_name, maintenance_cost FROM Military_Equipment WHERE region = 'Atlantic' AND maintenance_cost < 5000;",
    "reference_sql": "SELECT name, maintenance_cost FROM MilitaryEquipment WHERE region = 'Atlantic' AND maintenance_cost < 5000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 278,
    "prompt": "How many military innovation patents were filed by China in 2015?",
    "generated_sql": "SELECT COUNT(*) FROM innovation_patents WHERE country = 'China' AND year = 2015;",
    "reference_sql": "SELECT COUNT(*) FROM patents WHERE country = 'China' AND year = 2015;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for military innovation patents"
    }
  },
  {
    "example_id": 279,
    "prompt": "What is the total humanitarian assistance provided (in USD) by each country in the 'humanitarian_assistance' table, for operations in 'Africa'?",
    "generated_sql": "SELECT country, SUM(assistance_amount) FROM humanitarian_assistance WHERE region = 'Africa' GROUP BY country;",
    "reference_sql": "SELECT country, SUM(amount) as total_assistance FROM humanitarian_assistance WHERE region = 'Africa' GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 280,
    "prompt": "What is the total number of military innovation patents issued to each country in the last 3 years?",
    "generated_sql": "SELECT country, COUNT(*) as patents_issued FROM patents WHERE issue_date >= DATE('now', CURRENT_DATE) - INTERVAL 3 YEAR GROUP BY country;",
    "reference_sql": "SELECT co.name, COUNT(mi.year) FROM Military_Innovation_Patents mi INNER JOIN Countries co ON mi.country = co.name WHERE mi.year BETWEEN (YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE) GROUP BY co.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for military innovation patents and incorrect date calculation syntax"
    }
  },
  {
    "example_id": 281,
    "prompt": "What is the total investment of clients with the last name \"Patel\" in any fund?",
    "generated_sql": "SELECT SUM(fund_funds.amount) FROM fund_funds INNER JOIN client_funds ON fund_funds.client_id = client_funds.client_id WHERE client_funds.client_name = 'Patel';",
    "reference_sql": "SELECT SUM(investment) FROM clients INNER JOIN fund_investments ON clients.client_id = fund_investments.client_id WHERE clients.name LIKE '%Patel';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters client_name equal to 'Patel' instead of checking last_name and uses incorrect tables for clients"
    }
  },
  {
    "example_id": 282,
    "prompt": "Retrieve all details of vessels that have a capacity greater than 10000 TEUs",
    "generated_sql": "SELECT Vessel FROM Vessels WHERE Capacity > 10000;",
    "reference_sql": "SELECT * FROM vessels WHERE capacity > 10000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query selects only the Vessel column instead of all vessel details; should use SELECT * or list all relevant columns"
    }
  },
  {
    "example_id": 283,
    "prompt": "What is the average tonnage of all cargo handled in the 'cargo_handling' table for the month of April?",
    "generated_sql": "SELECT AVG(tonnage) FROM cargo_handling WHERE month = 4 AND date BETWEEN '2022-04-01' AND '2022-04-30';",
    "reference_sql": "SELECT AVG(tonnage) FROM cargo_handling WHERE MONTH(handling_date) = 4;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query hard-codes date range for April 2022 and excludes other years, not all April records"
    }
  },
  {
    "example_id": 284,
    "prompt": "Show the number of workers employed in ethical manufacturing for each factory.",
    "generated_sql": "SELECT * FROM factory_employees WHERE labor_method = 'ethical';",
    "reference_sql": "SELECT f.name, SUM(em.worker_count) as total_workers FROM factories f JOIN ethical_manufacturing em ON f.factory_id = em.factory_id GROUP BY f.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not aggregate or group by factory to count workers per factory."
    }
  },
  {
    "example_id": 285,
    "prompt": "What is the total number of hospital beds in hospitals in Texas that specialize in cancer treatment?",
    "generated_sql": "SELECT SUM(num_beds) FROM hospitals WHERE specialty = 'cancer' AND location = 'Texas';",
    "reference_sql": "SELECT SUM(num_beds) FROM hospitals WHERE state = 'Texas' AND specialty = 'cancer';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 286,
    "prompt": "Calculate the overall average age of teachers",
    "generated_sql": "SELECT AVG(age) FROM teacher_age;",
    "reference_sql": "SELECT AVG(Age) as AverageAge FROM Teachers;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "References a table named teacher_age which is not the specified teachers table"
    }
  },
  {
    "example_id": 287,
    "prompt": "What is the average mental health score for students in traditional courses?",
    "generated_sql": "SELECT AVG(mental_health_score) FROM students WHERE is_traditional = TRUE;",
    "reference_sql": "SELECT AVG(students.mental_health_score) FROM students JOIN courses ON students.course_id = courses.course_id WHERE courses.course_type = 'Traditional';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 288,
    "prompt": "What is the average salary of male and female employees in the 'employees' table?",
    "generated_sql": "SELECT gender, AVG(salary) FROM employees WHERE gender = 'Male' GROUP BY gender;",
    "reference_sql": "SELECT gender, AVG(salary) FROM employees GROUP BY gender;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query filters only male employees, omitting female employees"
    }
  },
  {
    "example_id": 289,
    "prompt": "What is the production count for well 'A01' in the 'Gulf of Mexico'?",
    "generated_sql": "SELECT production_count FROM well_data WHERE well_id = 01 AND country = 'United States';",
    "reference_sql": "SELECT production_count FROM production WHERE well_id = 'A01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters use well_id = 01 instead of 'A01' and country instead of region = 'Gulf of Mexico'"
    }
  },
  {
    "example_id": 290,
    "prompt": "Which athletes have the most gold medals in the Winter Olympics?",
    "generated_sql": "SELECT athletes.name, SUM(athletes.gold_medals) as total_gold_medals FROM athletes LEFT JOIN Olympics ON athletes.athlete_id = Olympics.athlete_id WHERE Olympics.name = 'Winter Olympics' GROUP BY athletes.name HAVING total_gold_medals > 0;",
    "reference_sql": "SELECT athlete, SUM(gold) FROM winter_olympics GROUP BY athlete ORDER BY SUM(gold) DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query returns all athletes with gold medals instead of only those with the maximum number in Winter Olympics."
    }
  },
  {
    "example_id": 291,
    "prompt": "Which basketball players have scored the most points in a single season?",
    "generated_sql": "SELECT players.player_name, SUM(points.score) as total_points FROM players INNER JOIN points ON players.player_id = points.player_id WHERE players.season = 1 GROUP BY players.player_name ORDER BY total_points DESC LIMIT 1;",
    "reference_sql": "SELECT p.name, p.season_points FROM points p ORDER BY p.season_points DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query restricts to season=1 and limits to one result rather than finding the max across all seasons and all tied players."
    }
  },
  {
    "example_id": 292,
    "prompt": "How many organizations provide 'food_support' in 'refugee_camps' and 'disaster_zones'?",
    "generated_sql": "SELECT COUNT(*) FROM organizations WHERE facility_id IN (SELECT id FROM facility WHERE name ='refugee_camps' AND name = 'disaster_zones');",
    "reference_sql": "SELECT SUM(num_orgs) FROM refugee_camps WHERE services LIKE '%food_support%' UNION SELECT SUM(num_orgs) FROM disaster_zones WHERE services LIKE '%food_support%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses AND instead of selecting facilities by either name and omits filtering for 'food_support'"
    }
  },
  {
    "example_id": 293,
    "prompt": "Add a new eco-friendly factory with employee details.",
    "generated_sql": "INSERT INTO factories (factory_id, name, country, state, country_id) VALUES (4, 'Nevada', 'CA', 'CA', 4);",
    "reference_sql": "INSERT INTO factories (id, name, country, eco_friendly, workers) VALUES (3, 'Green Mill', 'Vietnam', true, 300);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not include eco-friendly attribute or insert employee details"
    }
  },
  {
    "example_id": 294,
    "prompt": "What is the minimum wage in factories in Africa?",
    "generated_sql": "SELECT MIN(wage) FROM factories WHERE location = 'Africa' AND country = 'Africa';",
    "reference_sql": "SELECT MIN(wage) FROM FactoryWages INNER JOIN Factories ON FactoryWages.factory_id = Factories.factory_id WHERE Factories.region = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering both location and country for 'Africa' is incorrect since country values are not 'Africa'"
    }
  },
  {
    "example_id": 295,
    "prompt": "What is the minimum wage in factories, by country, for the last 3 years?",
    "generated_sql": "SELECT country, MIN(wage) as minimum_wage FROM factories WHERE year >= 2017 GROUP BY country;",
    "reference_sql": "SELECT country, year, MIN(wage) OVER (PARTITION BY country) FROM ethical_fashion.factories WHERE year BETWEEN 2018 AND 2020 ORDER BY country, year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not group by year and does not correctly limit to the last 3 years; it aggregates across all years \u22652017 without per-year breakdown."
    }
  },
  {
    "example_id": 296,
    "prompt": "How many textile factories are present in each region and their respective waste generation?",
    "generated_sql": "SELECT region, SUM(waste) FROM textile_factories GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(*) as factory_count, SUM(waste_generation) as total_waste FROM textile_factories GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query omits the count of factories; it only sums waste"
    }
  },
  {
    "example_id": 297,
    "prompt": "Which Shariah-compliant financial institutions offer socially responsible loans in Southeast Asia?",
    "generated_sql": "SELECT * FROM shariah_compliant_loans WHERE region = 'Southeast Asia' AND type = 'Socially Responsible';",
    "reference_sql": "SELECT f.name FROM financial_institutions f INNER JOIN loans l ON f.name = l.institution_name WHERE f.shariah_compliant = TRUE AND l.socially_responsible = TRUE AND f.location LIKE 'Southeast%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects loans rather than institutions and does not return distinct institution names or join an institutions table"
    }
  },
  {
    "example_id": 298,
    "prompt": "How many dairy-free desserts are available in France?",
    "generated_sql": "SELECT COUNT(*) FROM Dishes WHERE Dishes.DairyFree = TRUE AND Dishes.DairyFree = TRUE AND Dishes.DairyFree = TRUE AND Dishes.DairyFree = TRUE AND Dishes.DairyFree = TRUE AND Dishes.DairyFree = TRUE AND Dishes.DairyFree = TRUE AND Dishes.DairyFree = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM Desserts WHERE is_dairy_free = TRUE AND country = 'France';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filters for country = France and category = dessert; redundant dairy-free conditions."
    }
  },
  {
    "example_id": 299,
    "prompt": "Delete all shipments with item XYZ",
    "generated_sql": "DELETE FROM shipments WHERE item = 'XYZ' AND delivery_date IS NULL;",
    "reference_sql": "DELETE FROM shipments WHERE item = 'XYZ';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary condition delivery_date IS NULL"
    }
  },
  {
    "example_id": 300,
    "prompt": "List the top 2 countries with the most bioprocess engineering patents in 2021.",
    "generated_sql": "SELECT country, COUNT(*) as patent_count FROM patents WHERE year = 2021 GROUP BY country ORDER BY patent_count DESC LIMIT 2;",
    "reference_sql": "SELECT country, SUM(patent_count) as total_patent_count FROM bioprocess.patents WHERE year = 2021 GROUP BY country ORDER BY total_patent_count DESC LIMIT 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not filter for bioprocess engineering patents, only by year."
    }
  },
  {
    "example_id": 301,
    "prompt": "Count the number of public hearings held in each district in the last 6 months",
    "generated_sql": "SELECT district_name, COUNT(*) as num_hearsings FROM public_hearings WHERE hearing_date >= DATEADD(month, -6, GETDATE()) GROUP BY district_name;",
    "reference_sql": "SELECT District, COUNT(*) FROM PublicHearings WHERE HearingDate >= DATEADD(month, -6, GETDATE()) GROUP BY District;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 302,
    "prompt": "What was the average funding for 'Climate Change' initiatives provided by the US in 2021?",
    "generated_sql": "SELECT AVG(funding) FROM initiatives WHERE initiative_type = 'Climate Change' AND initiative_date BETWEEN '2021-01-01' AND '2021-12-31';",
    "reference_sql": "SELECT AVG(FundingAmount) FROM USFunding WHERE Sector = 'Climate Change' AND Year = 2021 AND Funder = 'US';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to include only initiatives provided by the US"
    }
  },
  {
    "example_id": 303,
    "prompt": "How many solar power projects were completed in California since 2015 with a budget over $5 million?",
    "generated_sql": "SELECT COUNT(project_id) FROM solar_projects WHERE state = 'California' AND budget > 5000000 AND completed > 0;",
    "reference_sql": "SELECT COUNT(*) FROM projects WHERE state = 'California' AND year_completed >= 2015 AND project_type = 'Solar' AND budget > 5000000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for completion date since 2015 and incorrect use of completed > 0 instead of a date condition"
    }
  },
  {
    "example_id": 304,
    "prompt": "Calculate the total revenue of virtual tourism events in the United States.",
    "generated_sql": "SELECT SUM(revenue) FROM virtual_tourism;",
    "reference_sql": "SELECT SUM(revenue) FROM events WHERE country = 'USA' AND type = 'virtual';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for events in the United States"
    }
  },
  {
    "example_id": 305,
    "prompt": "Count the number of indigenous communities in each Arctic country.",
    "generated_sql": "SELECT COUNT(DISTINCT location) FROM indigenous_communities_arctic GROUP BY location;",
    "reference_sql": "SELECT country, COUNT(DISTINCT community_name) as community_count FROM indigenous_communities GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups and counts by location instead of counting communities per country"
    }
  },
  {
    "example_id": 306,
    "prompt": "What is the minimum age of patients who received therapy in Colorado?",
    "generated_sql": "SELECT MIN(age) FROM patients WHERE state = 'Colorado' AND therapy = true;",
    "reference_sql": "SELECT MIN(age) FROM patients WHERE treatment = 'Therapy' AND state = 'Colorado';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 307,
    "prompt": "What is the total budget of mental health campaigns launched in 'Northeast' region in 2022?",
    "generated_sql": "SELECT SUM(budget) FROM mental_health_campaigns WHERE region = 'Northeast' AND launch_year = 2022;",
    "reference_sql": "SELECT SUM(budget) FROM campaigns_2022 WHERE region = 'Northeast';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 308,
    "prompt": "What is the youngest age of a patient diagnosed with depression in 2021?",
    "generated_sql": "SELECT MIN(age) FROM patient_disorders WHERE diagnosis = 'Depression' AND year = 2021;",
    "reference_sql": "SELECT MIN(age) FROM diagnoses WHERE diagnosis_name = 'Depression' AND YEAR(diagnosis_date) = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 309,
    "prompt": "What is the minimum cost of tunnel projects in the Central region?",
    "generated_sql": "SELECT MIN(cost) FROM Project WHERE region = 'Central' AND type = 'Tunnel';",
    "reference_sql": "SELECT MIN(cost) FROM InfrastructureProjects WHERE region = 'Central' AND project_type = 'tunnel';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 310,
    "prompt": "Summarize the total number of eco-tourists who visited Japan, Thailand, and Indonesia in Q1 and Q2 of 2021",
    "generated_sql": "SELECT COUNT(*) FROM TourGroup_Europe_Asia WHERE country IN ('Japan', 'Thailand', 'Indonesia') AND visit_date BETWEEN '2021-01-01' AND '2021-06-30';",
    "reference_sql": "SELECT country, SUM(eco_tourists) AS total_eco_tourists FROM EcoTouristsQ1Q2 WHERE country IN ('Japan', 'Thailand', 'Indonesia') AND quarter IN (1, 2) GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No eco-tourist filter and no grouping by quarter"
    }
  },
  {
    "example_id": 311,
    "prompt": "Insert a new marine species record for the Mariana Trench with ID 4, species 'Angler Fish', location 'Mariana Trench', year 2019, and population 100.",
    "generated_sql": "INSERT INTO marine_species (id, species, location, year, population) VALUES (4, 'Angler Fish', 'Mariana Trench', 2019, 100);",
    "reference_sql": "INSERT INTO marine_species_research (id, species, location, year, population) VALUES (4, 'Angler Fish', 'Mariana Trench', 2019, 100);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 312,
    "prompt": "List the top 3 most represented ethnicities in movies produced in the USA.",
    "generated_sql": "SELECT ethnicity FROM movie_ethnicity ORDER BY ethnicity DESC LIMIT 3;",
    "reference_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS count FROM movies WHERE production_country = 'USA' GROUP BY lead_actor_ethnicity ORDER BY count DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter by USA or aggregate and order by count"
    }
  },
  {
    "example_id": 313,
    "prompt": "What is the average quantity of 'Local Greens' sold per day in the Southeast region?",
    "generated_sql": "SELECT AVG(sales) FROM LocalGreens WHERE region = 'Southeast';",
    "reference_sql": "SELECT AVG(Quantity) as Average_Quantity FROM Daily_Region_Sales WHERE Menu_Item = 'Local Greens' AND Region = 'Southeast';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not compute per-day averages; missing grouping by date and averaging daily totals"
    }
  },
  {
    "example_id": 314,
    "prompt": "What are the total copper exports and CO2 emissions from Chile between 2016 and 2018?",
    "generated_sql": "SELECT SUM(expens_amount) as total_copper_exports, CO2_emissions FROM copper_exports WHERE destination = 'Chile' AND year BETWEEN 2016 AND 2018;",
    "reference_sql": "SELECT SUM(chile_copper_export.export_amount), SUM(chile_co2_emission.emission) FROM chile_copper_export INNER JOIN chile_co2_emission ON chile_copper_export.year = chile_co2_emission.year WHERE chile_copper_export.year BETWEEN 2016 AND 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "CO2_emissions is not aggregated over the period and lacks a SUM and GROUP BY, so it does not return the total emissions."
    }
  },
  {
    "example_id": 315,
    "prompt": "What is the average productivity of miners in Australia, and what is the total production volume of the mining companies they work for?",
    "generated_sql": "SELECT AVG(productivity) AS average_productivity, SUM(production) AS total_production FROM mining_companies WHERE country = 'Australia';",
    "reference_sql": "SELECT AVG(miners.productivity), SUM(mining_companies.production_volume) FROM miners INNER JOIN mining_companies ON miners.company_id = mining_companies.company_id WHERE miners.miner_name LIKE '%Australia%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query only uses mining_companies table and misses miners productivity and necessary join"
    }
  },
  {
    "example_id": 316,
    "prompt": "Which mining operations have a higher than average environmental impact?",
    "generated_sql": "SELECT name FROM mining_operations WHERE environmental_impact > (SELECT environmental_impact FROM mining_operations WHERE name LIKE '%mining%') GROUP BY name HAVING COUNT(*) > 1;",
    "reference_sql": "SELECT operation_name FROM mining_operations WHERE environmental_impact > (SELECT AVG(environmental_impact) FROM mining_operations);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query compares to an environmental_impact of name LIKE '%mining%' instead of the overall average and incorrectly uses GROUP BY and HAVING clauses."
    }
  },
  {
    "example_id": 317,
    "prompt": "What is the total number of broadband customers and the total connection speed in Mbps for each region in 2021?",
    "generated_sql": "SELECT region, SUM(total_browsing_speed) AS total_speed, SUM(total_browsing_frequency) AS total_frequency FROM broadband_customers WHERE year = 2021 GROUP BY region;",
    "reference_sql": "SELECT subscribers.region, COUNT(subscribers.id) AS total_customers, SUM(speeds.connection_speed) AS total_speed FROM subscribers JOIN speeds ON subscribers.id = speeds.subscriber_id WHERE subscribers.service = 'broadband' AND speeds.year = 2021 GROUP BY subscribers.region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums incorrect columns and omits summing customer counts"
    }
  },
  {
    "example_id": 318,
    "prompt": "What is the total number of subscribers in each product category?",
    "generated_sql": "SELECT product_category, COUNT(DISTINCT subscriber_id) FROM subscribers GROUP BY product_category;",
    "reference_sql": "SELECT product_category, COUNT(*) AS num_subscribers FROM product_subscribers GROUP BY product_category;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 319,
    "prompt": "What is the minimum streaming revenue for users in Japan?",
    "generated_sql": "SELECT MIN(revenue) FROM users WHERE country = 'Japan';",
    "reference_sql": "SELECT MIN(revenue) AS min_revenue FROM japan_streaming;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 320,
    "prompt": "Who are the top 3 donors in 2022?",
    "generated_sql": "SELECT DonorName, COUNT(*) AS DonationCount FROM Donors WHERE DonationDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY DonorName ORDER BY DonationCount DESC LIMIT 3;",
    "reference_sql": "SELECT donor_id, SUM(donation_amount) as total_donated FROM donations WHERE YEAR(donation_date) = 2022 GROUP BY donor_id ORDER BY total_donated DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses count of donations instead of summing donation amounts"
    }
  },
  {
    "example_id": 321,
    "prompt": "Show esports events with a prize pool between the maximum and minimum prize pools in the 'Esports_Events_NA' table.",
    "generated_sql": "SELECT Event_Name, MAX(Prize_Pool) FROM Esports_Events_NA WHERE Prize_Pool > (SELECT MIN(Prize_Pool) FROM Esports_Events_NA);",
    "reference_sql": "SELECT * FROM Esports_Events WHERE PrizePool BETWEEN (SELECT MAX(PrizePool) FROM Esports_Events_NA) AND (SELECT MIN(PrizePool) FROM Esports_Events_NA);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses MAX aggregate incorrectly and only filters prizes greater than the minimum without restricting to less than the maximum"
    }
  },
  {
    "example_id": 322,
    "prompt": "What is the minimum age of players who play multiplayer games?",
    "generated_sql": "SELECT MIN(Age) FROM Players WHERE GameType = 'Multiplayer';",
    "reference_sql": "SELECT MIN(Age) FROM Players WHERE MaxPlayers > 1;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 323,
    "prompt": "Find the number of co-owned properties sold in each neighborhood in the last year.",
    "generated_sql": "SELECT neighborhood_id, COUNT(DISTINCT property_id) as num_sales FROM co_owned_properties WHERE sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY neighborhood_id;",
    "reference_sql": "SELECT NeighborhoodName, COUNT(*) AS CoOwnedPropertiesSoldCount FROM Properties JOIN Neighborhoods ON Properties.NeighborhoodID = Neighborhoods.NeighborhoodID WHERE CoOwned = 1 AND Sold >= DATEADD(year, -1, CURRENT_TIMESTAMP) GROUP BY NeighborhoodName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses the co_owned_properties table directly and assumes it has sale_date and neighborhood_id columns; it should join the sales and properties tables to count sold co-owned properties by neighborhood."
    }
  },
  {
    "example_id": 324,
    "prompt": "What is the total CO2 emissions (in metric tons) of the carbon offset program 'Plant a Tree'?",
    "generated_sql": "SELECT SUM(emissions_metric) FROM carbon_offset_programs WHERE program = 'Plant a Tree';",
    "reference_sql": "SELECT SUM(co2_emissions) FROM carbon_offset WHERE name = 'Plant a Tree';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 325,
    "prompt": "Display the number of sustainable menu items for each restaurant and the percentage of the menu that is sustainable.",
    "generated_sql": "SELECT r.name, SUM(s.number_of_sustainable) AS sustainable_menu_items, (SUM(s.number_of_sustainable) / (SELECT SUM(s.number_of_sustainable)) * 100) AS sustainable_percentage FROM RestaurantSustainability r JOIN Menu s ON r.item_id = s.id GROUP BY r.name;",
    "reference_sql": "SELECT R.RestaurantName, COUNT(MI.IsSustainable) as SustainableCount, (COUNT(MI.IsSustainable) * 100.0 / (SELECT COUNT(*) FROM MenuItems WHERE RestaurantID = R.RestaurantID)) as SustainablePercentage FROM Restaurants R INNER JOIN MenuItems MI ON R.RestaurantID = MI.RestaurantID GROUP BY R.RestaurantID;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query divides by the total sustainable items across all restaurants instead of each restaurant's total menu item count for the percentage calculation."
    }
  },
  {
    "example_id": 326,
    "prompt": "Add a new product sourced from a circular supply chain",
    "generated_sql": "INSERT INTO products (product_id, name, source_country) VALUES (1, 'Bike', 'Australia'), (2, 'Eco-friendly Cotton Bags', 'USA'), (3, 'Organic Cotton Hats', 'USA');",
    "reference_sql": "INSERT INTO products (product_id, product_name, sourcing_type) VALUES (4, 'Product D', 'Circular');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserts multiple products without specifying circular supply chain attributes and includes unrelated products"
    }
  },
  {
    "example_id": 327,
    "prompt": "Create a table named 'products'",
    "generated_sql": "CREATE TABLE products (id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), quantity INT);",
    "reference_sql": "CREATE TABLE products( product_id INT PRIMARY KEY, name VARCHAR(255), supplier_id INT, quantity_sold INT, price DECIMAL(5,2));",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 328,
    "prompt": "What is the average price of products in the 'Electronics' category that are produced using circular supply chains?",
    "generated_sql": "SELECT AVG(price) FROM products WHERE category = 'Electronics' AND supply_chain_type = 'Circular';",
    "reference_sql": "SELECT AVG(price) FROM products WHERE category = 'Electronics' AND is_circular_supply_chain = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 329,
    "prompt": "What is the total number of space missions launched by Japan and the USA?",
    "generated_sql": "SELECT SUM(missions) FROM space_missions WHERE country IN ('Japan', 'USA');",
    "reference_sql": "SELECT SUM(cnt) FROM (SELECT launch_country, COUNT(*) AS cnt FROM space_missions WHERE launch_country IN ('Japan', 'USA') GROUP BY launch_country) AS subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Should count the number of missions (e.g., COUNT(*)) rather than summing a missions column"
    }
  },
  {
    "example_id": 330,
    "prompt": "What is the maximum number of fans that attended a single game in the MLB?",
    "generated_sql": "SELECT MAX(num_fans) FROM games WHERE team = 'MLB';",
    "reference_sql": "SELECT MAX(fans) FROM attendance;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on team = 'MLB' is incorrect; MLB is a league, not a team"
    }
  },
  {
    "example_id": 331,
    "prompt": "Find the number of unique IP addresses associated with malware activity in the 'Asia-Pacific' region in the past week.",
    "generated_sql": "SELECT COUNT(DISTINCT ip_address) FROM malware_activity WHERE region = 'Asia-Pacific' AND activity_date >= DATE_SUB(CURRENT_DATE, INTERVAL 07 days) AND timestamp BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 7 days) AND CURRENT_DATE AND country = 'USA';",
    "reference_sql": "SELECT COUNT(DISTINCT ip_address) FROM malware_activity_v2 WHERE region = 'Asia-Pacific' AND last_seen >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Includes an unnecessary country filter and redundant timestamp conditions not requested"
    }
  },
  {
    "example_id": 332,
    "prompt": "What is the average severity of vulnerabilities found in the 'Network' section for the last month?",
    "generated_sql": "SELECT AVG(severity) FROM Vulnerabilities WHERE section = 'Network' AND timestamp >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 MONTH);",
    "reference_sql": "SELECT AVG(severity) as avg_severity FROM vulnerabilities WHERE section = 'Network' AND vulnerability_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 333,
    "prompt": "How many electric vehicles does each manufacturer have in the 'vehicle_data' table?",
    "generated_sql": "SELECT manufacturer, COUNT(*) FROM vehicle_data WHERE is_electric = true GROUP BY manufacturer;",
    "reference_sql": "SELECT make, COUNT(*) FROM vehicle_data WHERE is_ev = true GROUP BY make;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 334,
    "prompt": "What is the total revenue for each retail store in the Northern region?",
    "generated_sql": "SELECT StoreID, SUM(Revenue) FROM RetailStores WHERE Region = 'Northern' GROUP BY StoreID;",
    "reference_sql": "SELECT store_id, SUM(revenue) as total_revenue FROM sales WHERE region = 'Northern' GROUP BY store_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 335,
    "prompt": "List the policy numbers, claim amounts, and claim dates for policies that have more than two claims and the total claim amount exceeds $5000",
    "generated_sql": "SELECT policy_number, claim_amount, claim_date FROM policies WHERE claim_amount > 5000;",
    "reference_sql": "SELECT p.policy_number, c.claim_amount, c.claim_date FROM policies p INNER JOIN claims c ON p.policy_number = c.policy_number GROUP BY p.policy_number, c.claim_amount, c.claim_date HAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing aggregation on claims, count>2 and sum>5000 conditions, and no join to claims table"
    }
  },
  {
    "example_id": 336,
    "prompt": "List all unique cargo types and their respective total weights for vessels 'X' and 'Y' from the 'cargo_tracking' and 'vessels' tables",
    "generated_sql": "SELECT DISTINCT c.vessel_name, SUM(c.weight) as total_weight FROM cargo_tracking c JOIN vessels v ON c.vessel_id = v.vessel_id GROUP BY c.vessel_name;",
    "reference_sql": "SELECT c.cargo_type, SUM(c.weight) as total_weight FROM cargo_tracking c INNER JOIN vessels v ON c.vessel_id = v.vessel_id WHERE v.vessel_name IN ('X', 'Y') GROUP BY c.cargo_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by vessel_name instead of cargo_type and does not filter for vessels 'X' and 'Y'"
    }
  },
  {
    "example_id": 337,
    "prompt": "Identify the recycling rates for all plastic waste in the year 2020 across different regions.",
    "generated_sql": "SELECT region, recycling_rate FROM (SELECT region, recycling_rate, year, ROW_NUMBER() OVER (PARTITION BY region ORDER BY year) rn FROM recycling_rates WHERE year = 2020 AND region = 'Plastic') AS recycling_rates_by_region;",
    "reference_sql": "SELECT wt.waste_type, r.region, r.recycling_rate FROM recycling_rates r JOIN waste_type wt ON r.waste_type = wt.waste_type WHERE wt.waste_type = 'Plastic' AND r.year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters region = 'Plastic' instead of filtering waste_type, and uses unnecessary window function without selecting rn = 1"
    }
  },
  {
    "example_id": 338,
    "prompt": "What is the correlation between rainfall and water consumption in Phoenix?",
    "generated_sql": "SELECT rainfall, water_consumption FROM (SELECT location, rainfall, water_consumption, COUNT(*) AS water_consumption_count, ROW_NUMBER() OVER (PARTITION BY location ORDER BY rainfall DESC) AS rn FROM rainfall GROUP BY location) as precipitation_data WHERE location = 'Phoenix' GROUP BY location;",
    "reference_sql": "SELECT CORR(Rainfall, Water_Consumption) FROM Rainfall, Household_Water_Usage WHERE Rainfall.Year = Household_Water_Usage.Year AND City = 'Phoenix';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query neither computes a correlation coefficient nor correctly filters and aggregates the data for Phoenix"
    }
  },
  {
    "example_id": 339,
    "prompt": "What is the average salary of employees in the Manufacturing department?",
    "generated_sql": "SELECT AVG(salary) FROM Employees WHERE department = 'Manufacturing';",
    "reference_sql": "SELECT AVG(Salary) AS AvgSalary FROM Employees WHERE Department = 'Manufacturing';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 340,
    "prompt": "What is the ratio of community education programs to animals in each habitat type?",
    "generated_sql": "SELECT habitat_type, COUNT(*) FILTER (WHERE program_type = 'animal') as num_animal_programs, 1.0 * COUNT(*) / COUNT(*) as num_animal_programs_ratio FROM (SELECT habitat_type, COUNT(*) AS num_animal_programs FROM community_education GROUP BY habitat_type) AS animal_programs GROUP BY habitat_type;",
    "reference_sql": "SELECT a.type, programs/animals as ratio FROM education a JOIN animal_population b ON a.type = b.type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It does not join with the animals table and computes the ratio incorrectly"
    }
  },
  {
    "example_id": 341,
    "prompt": "What is the total funding received by the 'Theater' program in the 'Funding' table?",
    "generated_sql": "SELECT SUM(funding) FROM Funding WHERE program_name = 'Theater';",
    "reference_sql": "SELECT SUM(amount) FROM Funding WHERE program = 'Theater';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 342,
    "prompt": "What was the total revenue from art classes by age group in Q3 2022?",
    "generated_sql": "SELECT DATE(CURDATE()) as year, SUM(CASE WHEN age BETWEEN 12 AND 18 THEN 1 ELSE 0 END) as total_revenue FROM ArtClasses WHERE semester = 'Q3' AND EXTRACT(YEAR FROM sale_date) = 2022;",
    "reference_sql": "SELECT SUM(Price) AS TotalRevenue, AgeGroup FROM ArtClasses WHERE MONTH(StartDate) BETWEEN 7 AND 9 GROUP BY AgeGroup;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums age counts instead of revenue, does not group by age group, and uses CURDATE() incorrectly"
    }
  },
  {
    "example_id": 343,
    "prompt": "How many TV shows were released by network per year?",
    "generated_sql": "SELECT network, COUNT(*) as total_show_releases FROM TV_Shows WHERE release_year BETWEEN 2010 AND 2020 GROUP BY network;",
    "reference_sql": "SELECT network, release_year, COUNT(*) as shows_released FROM tv_shows GROUP BY network, release_year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing grouping by release_year; does not provide counts per year"
    }
  },
  {
    "example_id": 344,
    "prompt": "How many cultivation licenses have been revoked in Massachusetts in the last month?",
    "generated_sql": "SELECT COUNT(*) FROM LicenseRevelations WHERE region = 'Massachusetts' AND license_status ='revoked' AND date >= DATEADD(month, -1, GETDATE());",
    "reference_sql": "SELECT COUNT(*) FROM Licenses WHERE type = 'cultivation' AND revoke_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for cultivation licenses"
    }
  },
  {
    "example_id": 345,
    "prompt": "How many new raw materials were added in the 'Plastic Production' department in the last week?",
    "generated_sql": "SELECT COUNT(*) FROM PlasticProduction WHERE department = 'Plastic Production' AND added_date >= DATEADD(day, -7, CURRENT_DATE);",
    "reference_sql": "SELECT COUNT(*) FROM Raw_Materials WHERE department = 'Plastic Production' AND supply_date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 346,
    "prompt": "What is the total cost for each project per month?",
    "generated_sql": "SELECT name, cost_month, SUM(cost_total) as total_cost FROM projects WHERE start_date >= '2022-01-01' AND end_date < '2022-06-01' GROUP BY name, cost_month;",
    "reference_sql": "select Project, DATE_PART('month', Timestamp) as Month, SUM(Cost) as TotalCost from CostData group by Project, Month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query applies arbitrary date filters not specified by the request"
    }
  },
  {
    "example_id": 347,
    "prompt": "List all climate mitigation projects in Oceania and their respective end dates.",
    "generated_sql": "SELECT project_name, end_date FROM climate_mitigation WHERE location = 'Oceania';",
    "reference_sql": "SELECT project_name, end_date FROM climate_mitigation WHERE region = 'Oceania';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 348,
    "prompt": "What is the average investment in climate finance projects in East Asia in the last 5 years?",
    "generated_sql": "SELECT AVG(investment) FROM climate_finance_projects WHERE country IN ('China', 'Japan', 'South Korea', 'India', 'Indonesia') AND year >= 2018;",
    "reference_sql": "SELECT AVG(investment_amount) FROM climate_finance_projects WHERE region = 'East Asia' AND investment_year BETWEEN 2017 AND 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The country filter is incorrect for East Asia (includes India and Indonesia, excludes some East Asian countries) and the year filter is static rather than dynamically last 5 years."
    }
  },
  {
    "example_id": 349,
    "prompt": "What is the minimum temperature increase in Europe in any year since 2000, and what is the year in which it occurred?",
    "generated_sql": "SELECT MIN(temperature) AS min_temperature, YEAR(timestamp) AS year, MIN(temperature) AS min_temperature FROM temperatures WHERE country = 'Europe' AND YEAR(timestamp) BETWEEN YEAR(2000) AND YEAR(2021);",
    "reference_sql": "SELECT region, MIN(temperature) AS min_temp, year FROM temperature_data WHERE region = 'Europe' GROUP BY region, year HAVING min_temp = (SELECT MIN(temperature) FROM temperature_data WHERE region = 'Europe');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No GROUP BY year and it returns the overall minimum temperature, not the minimum annual increase"
    }
  },
  {
    "example_id": 350,
    "prompt": "What is the total number of electric vehicles sold in Africa per year since 2015?",
    "generated_sql": "SELECT Year, SUM(Eq_Num) FROM Sales WHERE Vehicle_Type = 'Electric' AND Vehicle_Model = 'Tesla' AND Country = 'Africa' GROUP BY Year;",
    "reference_sql": "SELECT year, SUM(sales) AS electric_vehicle_sales FROM VehicleSales WHERE continent = 'Africa' AND vehicle_type = 'Electric' GROUP BY year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only Tesla vehicles and omits condition to include years since 2015"
    }
  },
  {
    "example_id": 351,
    "prompt": "Find the maximum Series B funding amount in the E-Learning sector.",
    "generated_sql": "SELECT MAX(funding_amount) FROM E-Learning_Funding;",
    "reference_sql": "SELECT MAX(amount) FROM funding WHERE round = 'Series B' AND industry = 'E-Learning';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for Series B funding rounds."
    }
  },
  {
    "example_id": 352,
    "prompt": "Find the number of companies founded by women in each country.",
    "generated_sql": "SELECT c.name, COUNT(c.id) as num_founded FROM companies c JOIN founding_companies fc ON c.id = fc.company_id WHERE c.gender = 'Female' GROUP BY c.name;",
    "reference_sql": "SELECT country, COUNT(*) as num_female_founded FROM Companies WHERE founder_gender = 'Female' GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by company name instead of country and does not select the country; it also uses company gender rather than founder gender and misses the founders table join"
    }
  },
  {
    "example_id": 353,
    "prompt": "What is the average funding amount for companies founded by women?",
    "generated_sql": "SELECT AVG(funding_amount) FROM companies WHERE founder_gender = 'Female';",
    "reference_sql": "SELECT AVG(funding_amount) FROM investments JOIN companies ON investments.company_id = companies.id WHERE companies.founder_gender = 'female';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 354,
    "prompt": "What is the total funding for startups in the 'Software' industry founded before 2015?",
    "generated_sql": "SELECT COUNT(*) as total_funding FROM startups INNER JOIN funding ON startups.id = funding.startup_id WHERE industry = 'Software' AND founded_before_2015 >= 2015;",
    "reference_sql": "SELECT SUM(total_funding) FROM startups WHERE industry = 'Software' AND founded_year < 2015;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) instead of SUM(funding.amount) and the filter on founded_before_2015 is incorrect"
    }
  },
  {
    "example_id": 355,
    "prompt": "List all accommodation requests with their approval status and date approved, if applicable, for students with visual impairments?",
    "generated_sql": "SELECT request_status, request_date FROM accommodation_requests WHERE disability_status = 'Visual' AND approval_date = (SELECT MAX(approval_date) FROM accommodation_requests);",
    "reference_sql": "SELECT StudentName, DisabilityType, ApprovalStatus, RequestDate as DateApproved FROM AccommodationRequests AR JOIN Students S ON AR.StudentID = S.StudentID WHERE DisabilityType = 'Visual Impairment' AND ApprovalStatus <> 'Pending';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only the request with the maximum approval_date and selects incorrect fields instead of listing all requests with approval status and approval_date"
    }
  },
  {
    "example_id": 356,
    "prompt": "What is the total budget allocated for disability support programs in the year 2025, ordered by the amount of budget allocated?",
    "generated_sql": "SELECT YEAR(Amount) as Year, SUM(Amount) as TotalBudget FROM DisabilityBudget WHERE Year = 2025 GROUP BY Year ORDER BY TotalBudget DESC;",
    "reference_sql": "SELECT ProgramName, Budget FROM DisabilitySupportPrograms WHERE Year = 2025 ORDER BY Budget DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using YEAR(Amount) is incorrect and filtering on alias Year is invalid; amount is numeric, not a date"
    }
  },
  {
    "example_id": 357,
    "prompt": "What is the maximum depth of marine species in the 'marine_species' table, grouped by their phylum?",
    "generated_sql": "SELECT phylum, MAX(depth) FROM marine_species GROUP BY phylum;",
    "reference_sql": "SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 358,
    "prompt": "What is the total number of marine protected areas in each ocean basin?",
    "generated_sql": "SELECT ocean_name, COUNT(*) FROM ocean_protected_areas GROUP BY ocean_name;",
    "reference_sql": "SELECT ocean_basin, COUNT(area_id) FROM marine_protected_areas GROUP BY ocean_basin;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 359,
    "prompt": "What is the average number of smart contracts developed per developer in Africa?",
    "generated_sql": "SELECT AVG(developers) FROM smart_contracts WHERE country = 'Africa';",
    "reference_sql": "SELECT AVG(sc_per_dev) FROM (SELECT COUNT(*) as sc_per_dev FROM smart_contracts sc INNER JOIN developers d ON sc.developer_id = d.id GROUP BY d.id) as subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not group by developer and count smart contracts per developer before averaging"
    }
  },
  {
    "example_id": 360,
    "prompt": "What is the change in crime rate for each category, between this year and last year, for the same time period?",
    "generated_sql": "SELECT c.category, c.year, c.crime_rate FROM crime_rate c JOIN crime_categories c2 ON c.category = c2.category WHERE c2.category = 'Rural' AND c.year = c2.year AND c2.crime_rate < c.crime_rate WHERE c2.crime_rate > c.crime_rate GROUP BY c.category, c.year, c.crime_rate;",
    "reference_sql": "SELECT CrimeType, (SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date) ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) - SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date)) AS CrimeRateChange FROM CrimeStatistics WHERE Date BETWEEN DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND CURRENT_DATE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Joins wrong tables, applies contradictory filters, only selects rural, and does not compute year-over-year difference"
    }
  },
  {
    "example_id": 361,
    "prompt": "Identify artists who created art pieces between 1850 and 1900.",
    "generated_sql": "SELECT artist_name FROM Artists WHERE year_created >= 1850 AND year_created < 1900;",
    "reference_sql": "SELECT artist_name FROM art_timeline WHERE year BETWEEN 1850 AND 1900 GROUP BY artist_name HAVING COUNT(DISTINCT year) > 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters artist creation year instead of art piece creation year and lacks join with art pieces table"
    }
  },
  {
    "example_id": 362,
    "prompt": "Calculate the average unemployment rate for veterans in H1 2022",
    "generated_sql": "SELECT AVG(un_ad) FROM veteran_unemployment WHERE year = 2022 AND type = 'Veteran';",
    "reference_sql": "SELECT AVG(unemployed_veterans/total_veterans) FROM veteran_employment WHERE quarter IN ('Q1 2022', 'Q2 2022');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not restrict to the first half (H1) months of 2022"
    }
  },
  {
    "example_id": 363,
    "prompt": "What is the average account balance for clients in Asia in Q2 2022?",
    "generated_sql": "SELECT AVG(account_balance) FROM account_balance_asia WHERE country = 'Asia' AND quarter = 2;",
    "reference_sql": "SELECT AVG(balance) as avg_balance FROM accounts WHERE country IN ('India', 'China', 'Japan') AND account_date BETWEEN '2022-04-01' AND '2022-06-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for year=2022 and incorrect use of country='Asia' instead of filtering region"
    }
  },
  {
    "example_id": 364,
    "prompt": "List the top 3 ports with the highest total gross tonnage of container vessels.",
    "generated_sql": "SELECT p.port_name, SUM(t.tonnage) as total_tonnage FROM ports p JOIN vessels t ON p.port_id = t.port_id GROUP BY p.port_id ORDER BY total_tonnage DESC LIMIT 3;",
    "reference_sql": "SELECT p.PortName, SUM(v.GrossTonnage) AS TotalGrossTonnage FROM Vessel v JOIN Port p ON v.PortID = p.PortID WHERE VesselType = 'Container' GROUP BY p.PortName ORDER BY TotalGrossTonnage DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not restrict to container vessels"
    }
  },
  {
    "example_id": 365,
    "prompt": "Identify the total number of military personnel and their corresponding rank for each branch and country in the 'military_personnel' table, sorted by the total number of personnel in descending order.",
    "generated_sql": "SELECT b.branch, r.country, SUM(p.personnel) as total_personnel FROM branches b JOIN personnel r ON b.branch = r.branch GROUP BY b.branch, r.country ORDER BY total_personnel DESC;",
    "reference_sql": "SELECT branch, country, SUM(personnel) as total_personnel FROM military_personnel GROUP BY branch, country ORDER BY total_personnel DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing rank dimension and incorrect table usage; should group by branch, country, and rank from military_personnel"
    }
  },
  {
    "example_id": 366,
    "prompt": "What is the total number of cybersecurity incidents for each country?",
    "generated_sql": "SELECT country, SUM(incidents) FROM cyber_incidents GROUP BY country;",
    "reference_sql": "SELECT country, SUM(num_incidents) as total_incidents FROM cybersecurity_incidents GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 367,
    "prompt": "List the total number of unique users who have streamed music in each country?",
    "generated_sql": "SELECT country, COUNT(DISTINCT user_id) FROM users GROUP BY country;",
    "reference_sql": "SELECT cs.country_name, COUNT(DISTINCT ms.user_id) as num_users FROM music_streams ms JOIN country_summary cs ON ms.country_code = cs.country_code GROUP BY cs.country_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts all users by country without restricting to those who have streamed music (no join on streaming events)"
    }
  },
  {
    "example_id": 368,
    "prompt": "Find the average amount donated by donors from the USA.",
    "generated_sql": "SELECT AVG(donation_amount) FROM donors WHERE country = 'USA';",
    "reference_sql": "SELECT AVG(Amount) as AverageDonation FROM Donors JOIN Donations ON Donors.DonorID = Donations.DonorID WHERE Donors.Country = 'USA';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 369,
    "prompt": "What is the average donation amount for donors from the USA?",
    "generated_sql": "SELECT AVG(DonationAmount) FROM Donors WHERE Country = 'USA';",
    "reference_sql": "SELECT AVG(donation) FROM Donors WHERE country = 'USA';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 370,
    "prompt": "What is the maximum number of professional development courses completed by a teacher in '2021'?",
    "generated_sql": "SELECT MAX(COURSE_COUNT) FROM professional_development WHERE YEAR(completion_date) = 2021;",
    "reference_sql": "SELECT teacher_name, MAX(cnt) as max_courses FROM (SELECT teacher_name, COUNT(course_name) as cnt FROM teacher_professional_development WHERE EXTRACT(YEAR FROM completion_date) = 2021 GROUP BY teacher_name) as subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing aggregation by teacher to count courses per teacher before taking the maximum"
    }
  },
  {
    "example_id": 371,
    "prompt": "How many energy storage projects were installed in China between 2010 and 2020?",
    "generated_sql": "SELECT COUNT(*) FROM energy_storage_projects WHERE country = 'China' AND year BETWEEN 2010 AND 2020;",
    "reference_sql": "SELECT COUNT(*) FROM storage_projects WHERE country = 'China' AND year_built BETWEEN 2010 AND 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 372,
    "prompt": "What was the total gas production in 'Alaska' for the first 6 months of 2020?",
    "generated_sql": "SELECT SUM(gas_production) FROM gas_production WHERE state = 'Alaska' AND year = 2020 AND production_date BETWEEN '2020-01-01' AND '2020-12-31';",
    "reference_sql": "SELECT SUM(production_gas) FROM wells WHERE region = 'Alaska' AND MONTH(production_date) <= 6 AND YEAR(production_date) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The date range includes the full year instead of the first six months (should end at 2020-06-30)."
    }
  },
  {
    "example_id": 373,
    "prompt": "What is the average attendance at NFL games?",
    "generated_sql": "SELECT AVG(attendance) FROM NFL_games;",
    "reference_sql": "SELECT AVG(attendance) FROM nfl_games;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 374,
    "prompt": "What is the total quantity of organic cotton sourced from India and Pakistan?",
    "generated_sql": "SELECT SUM(quantity) FROM organic_cotton WHERE supplier LIKE '%India%' AND supplier LIKE '%Pakistan%';",
    "reference_sql": "SELECT SUM(q.quantity) FROM quantities q INNER JOIN textile_sources ts ON q.source_id = ts.source_id WHERE ts.country IN ('India', 'Pakistan') AND ts.material = 'Organic Cotton';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses AND instead of OR, so it filters for rows containing both India and Pakistan rather than either country."
    }
  },
  {
    "example_id": 375,
    "prompt": "What is the total revenue earned from size-diverse garments, per country, for countries in South America?",
    "generated_sql": "SELECT SUM(revenue) FROM garment_revenue WHERE country IN ('Brazil', 'Argentina', 'Colombia', 'Chile', 'Ecuador', 'Paraguay', 'Peru', 'Venezuela') AND garment_type IN ('Silk', 'Textile') AND size_diverse = TRUE;",
    "reference_sql": "SELECT g.country_of_origin, SUM(o.revenue) FROM Orders o JOIN Garments g ON o.garment_id = g.garment_id WHERE g.country_of_origin LIKE 'South% America%' AND g.size_diverse = TRUE GROUP BY g.country_of_origin;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY country, includes irrelevant garment_type filter, and omits some South American countries"
    }
  },
  {
    "example_id": 376,
    "prompt": "What is the average loan amount for clients in Turkey and Iran?",
    "generated_sql": "SELECT AVG(loan_amount) FROM clients WHERE country IN ('Turkey', 'Iran');",
    "reference_sql": "SELECT AVG(amount) FROM loans WHERE country IN ('Turkey', 'Iran');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not include GROUP BY country to get separate averages for Turkey and Iran"
    }
  },
  {
    "example_id": 377,
    "prompt": "What is the average transaction value for Shariah-compliant investments in the United States?",
    "generated_sql": "SELECT AVG(transactions.value) FROM transactions INNER JOIN investments ON transactions.investment_id = investments.investment_id WHERE investments.investment_type = 'Shariah-compliant' AND investments.investment_country = 'United States';",
    "reference_sql": "SELECT AVG(value) FROM shariah_investments WHERE country = 'United States';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 378,
    "prompt": "How many food safety incidents were reported in 2020?",
    "generated_sql": "SELECT COUNT(*) FROM FoodSafetyIncidents WHERE year = 2020;",
    "reference_sql": "SELECT COUNT(*) FROM incidents WHERE date LIKE '2020%';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 379,
    "prompt": "What is the minimum salary for faculty members in the College of Arts and Humanities?",
    "generated_sql": "SELECT MIN(Salary) FROM Faculty WHERE College = 'College of Arts and Humanities';",
    "reference_sql": "SELECT MIN(salary) FROM FACULTY WHERE department = 'College of Arts and Humanities';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 380,
    "prompt": "What is the total carbon offset of initiatives in the 'CarbonOffsetInitiatives' table?",
    "generated_sql": "SELECT SUM(offset) FROM CarbonOffsetInitiatives;",
    "reference_sql": "SELECT SUM(carbon_offset_tons) FROM CarbonOffsetInitiatives;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 381,
    "prompt": "Who are the top 3 artists with the longest artist statements in the database?",
    "generated_sql": "SELECT FirstName, LastName, ArtistName FROM Artists ORDER BY ArtistName LIMIT 3;",
    "reference_sql": "SELECT artist_name, statement_length FROM artist_statements ORDER BY statement_length DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query orders by ArtistName instead of the length of artist statements and doesn't calculate statement length"
    }
  },
  {
    "example_id": 382,
    "prompt": "What is the average annual precipitation in the past 10 years for each weather station?",
    "generated_sql": "SELECT weather_station_name, AVG(precipitation) AS avg_annual_precipitation FROM weather_stations WHERE year BETWEEN 2010 AND 2020 GROUP BY weather_station_name;",
    "reference_sql": "SELECT Name, AVG(AnnualPrecipitation) OVER (PARTITION BY Name ORDER BY Name ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS AvgAnnualPrecipitation FROM WeatherStation WHERE YEAR(CurrentDate) - YEAR(DateInstalled) BETWEEN 1 AND 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It averages all precipitation records instead of computing each year\u2019s total and then averaging; also hardcodes years rather than past 10 years dynamically"
    }
  },
  {
    "example_id": 383,
    "prompt": "How many traditional art forms were added to the database in the last month?",
    "generated_sql": "SELECT COUNT(*) as num_art_forms FROM art_forms WHERE date >= DATEADD(month, -1, GETDATE());",
    "reference_sql": "SELECT COUNT(*) FROM (SELECT * FROM TraditionalArts WHERE AddedDate >= DATEADD(MONTH, -1, GETDATE())) t;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for traditional art forms"
    }
  },
  {
    "example_id": 384,
    "prompt": "What is the total number of legal aid services provided to individuals in rural areas in the state of California in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM legal_aid_services WHERE region = 'Rural' AND year = 2021 AND city IN ('Los Angeles', 'San Francisco', 'San Francisco') AND state = 'California';",
    "reference_sql": "SELECT SUM(services_provided) FROM legal_aid_services WHERE state = 'California' AND location = 'Rural Area' AND year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters by specific cities instead of including all rural areas in California."
    }
  },
  {
    "example_id": 385,
    "prompt": "What is the average depth of all marine life research sites?",
    "generated_sql": "SELECT AVG(depth) AS avg_depth FROM marine_life_sites;",
    "reference_sql": "SELECT AVG(max_depth) FROM marine_sites;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 386,
    "prompt": "Who are the top content creators in terms of representation?",
    "generated_sql": "SELECT name, MIN(representation) as min_representation FROM creators GROUP BY name ORDER BY min_representation DESC LIMIT 1;",
    "reference_sql": "SELECT name, views FROM content_creators WHERE represents_group = true ORDER BY views DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MIN instead of MAX and grouping unnecessarily, returns only one creator rather than all top creators"
    }
  },
  {
    "example_id": 387,
    "prompt": "List all mining sites located in 'California' from the 'mining_sites' table.",
    "generated_sql": "SELECT mining_sites.site_name FROM mining_sites INNER JOIN mining_sites_by_state ON mining_sites_by_state.site_id = mining_sites_by_state.site_id WHERE mining_sites.state = 'California';",
    "reference_sql": "SELECT site_name FROM mining_sites WHERE state = 'California';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect JOIN clause referencing the same table alias; unnecessary join and wrong ON condition"
    }
  },
  {
    "example_id": 388,
    "prompt": "List all mobile subscribers who have not made any network infrastructure investments in the last 6 months.",
    "generated_sql": "SELECT subscribers.name FROM subscribers INNER JOIN network_investments ON subscribers.subscriber_id = network_investments.subscriber_id WHERE network_investments.investment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY subscribers.name HAVING COUNT(DISTINCT subscriber_type.subscriber_id) = 0;",
    "reference_sql": "SELECT s.id, s.subscriber_type FROM subscribers s LEFT JOIN investments i ON s.id = i.subscriber_id WHERE i.subscriber_id IS NULL OR i.investment_date < DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses INNER JOIN and filters to include investments in last 6 months instead of excluding them, missing mobile subscriber filter"
    }
  },
  {
    "example_id": 389,
    "prompt": "List all mobile subscribers who have not used any data in the last month.",
    "generated_sql": "SELECT name FROM mobile_subscribers WHERE use_data IS NULL AND subscription_date >= DATE_SUB('2022-01-01', INTERVAL 1 MONTH);",
    "reference_sql": "SELECT id, last_data_usage_date, monthly_data_usage FROM subscribers WHERE monthly_data_usage = 0 AND last_data_usage_date < DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on NULL and uses hard-coded date instead of checking zero data usage in the last month"
    }
  },
  {
    "example_id": 390,
    "prompt": "List all artists who have performed in a music festival in both the US and Canada.",
    "generated_sql": "SELECT Artist FROM MusicFestivals WHERE Country IN ('USA', 'Canada') ORDER BY PerformanceDate ASC LIMIT 1;",
    "reference_sql": "SELECT Artists.name FROM Artists INNER JOIN Festivals ON Artists.id = Festivals.artist_id WHERE Artists.country = 'US' AND Festivals.country = 'Canada' GROUP BY Artists.name HAVING COUNT(DISTINCT Festivals.country) = 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses LIMIT 1 and does not ensure artists have performed in both USA and Canada"
    }
  },
  {
    "example_id": 391,
    "prompt": "What is the average time spent by users on a news article, grouped by their geographical regions and article categories?",
    "generated_sql": "SELECT region, article_category, AVG(time_spent) AS avg_time_spent FROM news_articles GROUP BY region, article_category;",
    "reference_sql": "SELECT user_region, article_category, AVG(time_spent) AS avg_time_spent FROM user_sessions GROUP BY user_region, article_category;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 392,
    "prompt": "What is the total word count of articles published by 'John Doe' in the 'media' schema?",
    "generated_sql": "SELECT SUM(word_count) FROM media.articles WHERE author = 'John Doe';",
    "reference_sql": "SELECT SUM(word_count) FROM media.articles WHERE author = 'John Doe';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 393,
    "prompt": "Select the names, games, and scores of players who have a higher score than the player with the highest score in game A.",
    "generated_sql": "SELECT name, games, scores FROM players WHERE games = (SELECT MAX(games) FROM players WHERE game_id IN (SELECT player_id FROM player_games)) GROUP BY name, games;",
    "reference_sql": "SELECT Name, Game, Score FROM Players WHERE Game = 'GameA' AND Score > (SELECT MAX(Score) FROM Players WHERE Game = 'GameA');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses the wrong columns and tables; it compares games instead of scores and does not calculate the maximum score for game A"
    }
  },
  {
    "example_id": 394,
    "prompt": "What is the percentage of players who prefer FPS and action genres out of the total number of players?",
    "generated_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM PlayerPreferences WHERE genre = 'FPS')) AS pct_pref_genre FROM PlayerPreferences;",
    "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM TotalPlayers) FROM TotalPlayers WHERE Genre IN ('FPS', 'Action');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Denominator uses only FPS players and query does not filter for FPS and action genres"
    }
  },
  {
    "example_id": 395,
    "prompt": "Calculate the average precipitation in the 'weather_data_2022' table for wheat fields in France.",
    "generated_sql": "SELECT AVG(precipitation) FROM weather_data_2022 WHERE location = 'France';",
    "reference_sql": "SELECT AVG(precipitation) FROM weather_data_2022 WHERE crop_type = 'Wheat' AND location = 'France';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for wheat fields in WHERE clause"
    }
  },
  {
    "example_id": 396,
    "prompt": "What is the average temperature in each country for the month of June, sorted by the highest average temperature?",
    "generated_sql": "SELECT country, AVG(avg_temp) as avg_temp, COUNT(*) as num_crops FROM crops WHERE EXTRACT(MONTH FROM measurement) = 6 GROUP BY country ORDER BY avg_temp DESC;",
    "reference_sql": "SELECT Country, AVG(Temperature) as AvgTemp FROM WeatherData WHERE Timestamp BETWEEN '2022-06-01 00:00:00' AND '2022-06-30 23:59:59' GROUP BY Country ORDER BY AvgTemp DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "The query includes an unnecessary COUNT(*) column (num_crops) that is not requested"
    }
  },
  {
    "example_id": 397,
    "prompt": "What was the average budget allocated to public services in District G and H in 2021?",
    "generated_sql": "SELECT AVG(budget) FROM public_services_district_2 WHERE district_id IN (SELECT id FROM district WHERE name = 'District G' AND year = 2021) AND district_id IN (SELECT id FROM district WHERE name = 'District H');",
    "reference_sql": "SELECT AVG(Amount) FROM Budget WHERE District IN ('District G', 'District H') AND Year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using AND between district G and H filters yields no rows; should use OR and include the year filter for both"
    }
  },
  {
    "example_id": 398,
    "prompt": "What is the maximum market price of Terbium in China for 2017?",
    "generated_sql": "SELECT MAX(market_price) FROM ternary_commodities WHERE element = 'terbium' AND country = 'China' AND year = 2017;",
    "reference_sql": "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 399,
    "prompt": "Get the total revenue from sustainable and non-sustainable sources",
    "generated_sql": "SELECT SUM(revenue) FROM (SELECT source, SUM(revenue) AS total_revenue FROM sources WHERE is_sustainable = TRUE AND is_non_sustainable = FALSE) as subquery;",
    "reference_sql": "SELECT SUM(CASE WHEN is_sustainable THEN revenue_amount ELSE 0 END) AS sustainable_revenue, SUM(CASE WHEN NOT is_sustainable THEN revenue_amount ELSE 0 END) AS non_sustainable_revenue FROM Revenue JOIN SustainableSourcing ON Revenue.revenue_id = SustainableSourcing.revenue_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only calculates revenue for sustainable sources and omits non-sustainable sources and separate totals."
    }
  },
  {
    "example_id": 400,
    "prompt": "Identify the average food safety score for restaurants in the \"urban\" area.",
    "generated_sql": "SELECT AVG(score) FROM restaurants WHERE area = 'urban';",
    "reference_sql": "SELECT AVG(inspections.score) FROM inspections WHERE inspections.area = 'urban';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 401,
    "prompt": "What is the maximum revenue generated in a single day from delivery orders?",
    "generated_sql": "SELECT MAX(revenue) FROM orders WHERE order_time BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT MAX(SUM(price)) FROM Delivery_Orders GROUP BY date;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for delivery orders, does not group by day, and arbitrarily restricts to January 2022"
    }
  },
  {
    "example_id": 402,
    "prompt": "What was the maximum daily revenue for each restaurant in 2022?",
    "generated_sql": "SELECT R.RestaurantName, MAX(R.Revenue) as MaxRevenue FROM Restaurants R JOIN Revenue ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED ROWS BETWEEN INSERT ON R.RestaurantID = R.RestaurantID AND ROW_NUMBER() OVER (PARTITION BY R.RestaurantID ORDER BY R.RestaurantID) AS ROW_NUMBER() OVER(PARTITION BY R.RestaurantID ORDER BY R.Revenue ROWS B",
    "reference_sql": "SELECT restaurant_name, MAX(daily_revenue) as max_daily_revenue FROM daily_revenue GROUP BY restaurant_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query is syntactically incorrect, fails to join properly, and does not filter for the year 2022."
    }
  },
  {
    "example_id": 403,
    "prompt": "What is the total mass of space debris in Medium Earth Orbit (MEO) that was launched before 2010?",
    "generated_sql": "SELECT SUM(mass) FROM debris_sports WHERE orbit = 'MEO' AND launch_year < 2010;",
    "reference_sql": "SELECT SUM(mass) FROM space_debris WHERE orbit = 'MEO' AND launch_date < '2010-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses incorrect table name 'debris_sports' instead of the space debris table"
    }
  },
  {
    "example_id": 404,
    "prompt": "How many new fans have signed up for the fan club in the last 30 days, sorted by their sign-up date?",
    "generated_sql": "SELECT sign_date, COUNT(*) as total_signups FROM fans WHERE membership_date >= CURDATE() - INTERVAL 30 DAY GROUP BY sign_date ORDER BY sign_date DESC;",
    "reference_sql": "SELECT COUNT(*) FROM fan_club_members WHERE sign_up_date >= CURDATE() - INTERVAL 30 DAY ORDER BY sign_up_date;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters on membership_date but groups by sign_date, using inconsistent columns"
    }
  },
  {
    "example_id": 405,
    "prompt": "How many unique cities have hosted the Olympics in the 'olympics_history' table?",
    "generated_sql": "SELECT COUNT(DISTINCT city_id) FROM olympics_history;",
    "reference_sql": "SELECT COUNT(DISTINCT city) FROM olympics_history;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts DISTINCT city_id but question asks for unique cities (should use city column)"
    }
  },
  {
    "example_id": 406,
    "prompt": "What is the average ticket price for basketball games in New York?",
    "generated_sql": "SELECT AVG(ticket_price) FROM basketball_games WHERE city = 'New York';",
    "reference_sql": "SELECT avg(avg_ticket_price) FROM stadiums WHERE city = 'New York' AND sport = 'Basketball';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 407,
    "prompt": "Which threat intelligence sources have provided the most false positives in the last quarter?",
    "generated_sql": "SELECT source_id, COUNT(DISTINCT detection_count) AS detection_count FROM threat_intelligence WHERE detection_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY source_id ORDER BY detection_count DESC;",
    "reference_sql": "SELECT source, COUNT(*) as total_false_positives FROM false_positives WHERE date > DATE(NOW()) - INTERVAL 90 DAY AND category = 'false positive' GROUP BY source;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for false positives and incorrectly uses COUNT(DISTINCT detection_count) instead of counting false positive occurrences"
    }
  },
  {
    "example_id": 408,
    "prompt": "List all bike-share stations in New York with more than 20 bikes available.",
    "generated_sql": "SELECT * FROM bike_share_stations WHERE city = 'New York' AND bikes > 20;",
    "reference_sql": "SELECT * FROM bike_stations WHERE city = 'New York' AND bikes_available > 20;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 409,
    "prompt": "What is the average speed of high-speed trains in Beijing, China?",
    "generated_sql": "SELECT AVG(max_speed) FROM HighSpeedTramData WHERE city = 'Beijing';",
    "reference_sql": "SELECT AVG(trip_duration / (end_time - start_time)) FROM high_speed_trains WHERE city = 'Beijing' AND line LIKE '%high-speed%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses max_speed field from HighSpeedTramData instead of actual operational speed data of high-speed trains"
    }
  },
  {
    "example_id": 410,
    "prompt": "What is the percentage of trips that are multimodal?",
    "generated_sql": "SELECT (SUM(trips.trip_count) * 100.0 / SUM(trips.trips_count)) AS multimodal_percentage FROM trips WHERE trips.trips_count > 0;",
    "reference_sql": "SELECT AVG(CASE WHEN mode1 <> mode2 THEN 1 ELSE 0 END) as avg_multimodal FROM trips;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No filter for multimodal trips and uses incorrect column names for total trips"
    }
  },
  {
    "example_id": 411,
    "prompt": "What is the total number of vehicles sold in 'sales_data' view that have a speed greater than or equal to 80 mph?",
    "generated_sql": "SELECT COUNT(*) FROM sales_data WHERE speed > 80 AND country = 'Germany';",
    "reference_sql": "SELECT SUM(sales) FROM sales_data WHERE avg_speed >= 80;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query adds an extra country filter and uses > instead of >= for speed"
    }
  },
  {
    "example_id": 412,
    "prompt": "Calculate the average retail sales revenue per 'Jeans' item in Mexico in 2021.",
    "generated_sql": "SELECT AVG(retail_revenue) FROM sales WHERE item_name = 'Jeans' AND country = 'Mexico' AND year = 2021;",
    "reference_sql": "SELECT AVG(revenue) as avg_revenue_per_item FROM RetailSales WHERE garment_type = 'Jeans' AND country = 'Mexico' AND year = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 413,
    "prompt": "What was the average sustainability score for the 'Autumn 2021' collection?",
    "generated_sql": "SELECT AVG(SustainabilityScore) FROM CollectionSustainability WHERE CollectionName = 'Autumn 2021' AND Year = 2021;",
    "reference_sql": "SELECT AVG(sustainability_score) FROM garment_data_2 WHERE collection = 'Autumn 2021';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 414,
    "prompt": "Display policy_id and sum_insured for policies where the sum insured is less than 60000 and policyholder gender is female",
    "generated_sql": "SELECT policy_id, policy_name, policy_insured, SUM(insured) OVER (PARTITION BY policy_id ORDER BY policy_insured) as sum_insured FROM policies WHERE policy_insured < 60000;",
    "reference_sql": "SELECT policy_info.policy_id, policy_info.sum_insured FROM policy_info INNER JOIN policyholder ON policy_info.policy_id = policyholder.policy_id WHERE policy_info.sum_insured < 60000 AND policyholder.gender = 'Female';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing gender filter for female and incorrect aggregation of sum_insured"
    }
  },
  {
    "example_id": 415,
    "prompt": "Count the number of safety tests passed by vehicles in the 'safety_testing' table",
    "generated_sql": "SELECT COUNT(*) FROM safety_testing WHERE passed = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM safety_testing WHERE tests_passed IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 416,
    "prompt": "How many autonomous driving research papers were published in the year 2021 in the 'research_papers' table?",
    "generated_sql": "SELECT COUNT(*) FROM research_papers WHERE publication_year = 2021;",
    "reference_sql": "SELECT COUNT(*) FROM research_papers WHERE YEAR(publication_date) = 2021 AND author = 'Wayve';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for autonomous driving research papers"
    }
  },
  {
    "example_id": 417,
    "prompt": "How many autonomous vehicle crash tests were successful in the 'autonomous_testing' view?",
    "generated_sql": "SELECT COUNT(*) FROM autonomous_testing WHERE successful = true;",
    "reference_sql": "SELECT COUNT(*) FROM autonomous_testing WHERE test_result = 'successful';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 418,
    "prompt": "List the vessels that have had safety incidents in the last 12 months, ordered by the number of incidents in descending order.",
    "generated_sql": "SELECT DISTINCT vessel_id, incident_count FROM vessel_safety WHERE incident_date >= CURRENT_DATE - INTERVAL '12 months';",
    "reference_sql": "SELECT vessel_name, COUNT(*) as incidents FROM SafetyIncidents JOIN Vessels ON SafetyIncidents.vessel_id = Vessels.vessel_id WHERE incident_date >= DATEADD(year, -1, GETDATE()) GROUP BY vessel_name ORDER BY incidents DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not aggregate incident counts by vessel or include ordering by number of incidents"
    }
  },
  {
    "example_id": 419,
    "prompt": "What is the total cargo weight for vessels that arrived in the US between July 2021 and December 2021?",
    "generated_sql": "SELECT SUM(CargoWeight) as TotalCargoWeight FROM VesselAttempts WHERE ArrivalInUS = TRUE AND ArrivalDate BETWEEN '2021-07-01' AND '2021-12-31' AND VesselID IN (SELECT VesselID FROM VesselAttempts WHERE ArrivalDate >= '2021-07-01' AND ArrivalDate <= '2021-12-31');",
    "reference_sql": "SELECT SUM(cargo_weight) FROM vessel_performance WHERE arrived_date BETWEEN '2021-07-01' AND '2021-12-31' AND country = 'US';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 420,
    "prompt": "How many circular economy initiatives were implemented in the Latin America region in 2020?",
    "generated_sql": "SELECT COUNT(*) FROM circular_economy_initiatives WHERE region = 'Latin America' AND YEAR(initiative_date) = 2020;",
    "reference_sql": "SELECT COUNT(initiative_id) FROM circular_economy_initiatives WHERE region = 'Latin America' AND year = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 421,
    "prompt": "What is the combined landfill capacity for 'City A' and 'City B'?",
    "generated_sql": "SELECT SUM(capacity) FROM landfill_capacity WHERE location IN ('City A', 'City B');",
    "reference_sql": "SELECT SUM(capacity) FROM (SELECT capacity FROM landfill_capacity WHERE city = 'City A' UNION ALL SELECT capacity FROM landfill_capacity WHERE city = 'City B') AS combined_capacity;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 422,
    "prompt": "Find the sensor with the maximum water level in the 'sensor_data' table",
    "generated_sql": "SELECT sensor_name FROM sensor_data WHERE water_level = (SELECT MAX(water_level) FROM sensor_data);",
    "reference_sql": "SELECT sensor_id, MAX(water_level) as max_water_level FROM sensor_data;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 423,
    "prompt": "Find the number of AI ethics issues reported in South America, Central America, and the Caribbean, and provide a breakdown by issue category.",
    "generated_sql": "SELECT issue_category, COUNT(*) FROM ai_ethics WHERE region = 'South America' GROUP BY issue_category;",
    "reference_sql": "SELECT issue_category, COUNT(*) as num_issues FROM ethics_issues WHERE country IN ('South America', 'Central America', 'Caribbean') GROUP BY issue_category;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query only filters for South America and omits Central America and the Caribbean"
    }
  },
  {
    "example_id": 424,
    "prompt": "Who are the top 3 countries with the most creative AI algorithm explainability issues?",
    "generated_sql": "SELECT country, explainability_issue_count FROM (SELECT country, explainability_issue_count, ROW_NUMBER() OVER (PARTITION BY country ORDER BY explainability_issue_count DESC) as rank FROM AI_Algorithms) subquery WHERE rank <= 3;",
    "reference_sql": "SELECT country, COUNT(*) AS issue_count FROM creative_ai_algorithm_explainability GROUP BY country ORDER BY issue_count DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "ROW_NUMBER partitioned by country ranks per country instead of selecting top 3 countries overall"
    }
  },
  {
    "example_id": 425,
    "prompt": "What are the names and launch dates of satellites deployed by SpaceTech Inc.?",
    "generated_sql": "SELECT name, launch_date FROM SpaceTech_Intel_Satellites;",
    "reference_sql": "SELECT name, launch_date FROM Satellites WHERE manufacturer = 'SpaceTech Inc.';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing WHERE clause to filter satellites deployed by SpaceTech Inc."
    }
  },
  {
    "example_id": 426,
    "prompt": "What is the maximum habitat size for any animal in the 'animal_habitat' table?",
    "generated_sql": "SELECT MAX(habitat_size) FROM animal_habitat;",
    "reference_sql": "SELECT MAX(habitat_size) FROM animal_habitat;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 427,
    "prompt": "What is the gender breakdown of attendees for the 'African Art' event?",
    "generated_sql": "SELECT gender, attendees.name FROM attendees JOIN events ON attendees.event_id = events.id WHERE events.event_name = 'African Art';",
    "reference_sql": "SELECT Audience.Gender, COUNT(*) AS Attendance FROM Audience INNER JOIN Events ON Audience.EventID = Events.EventID WHERE Events.EventName = 'African Art' GROUP BY Audience.Gender;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing COUNT and GROUP BY to calculate the gender breakdown"
    }
  },
  {
    "example_id": 428,
    "prompt": "How many times has music from the United States been streamed in Africa in the last 3 years?",
    "generated_sql": "SELECT SUM(count) FROM streamed_music WHERE country = 'United States' AND country IN ('UK', 'USA') AND genre = 'Music';",
    "reference_sql": "SELECT SUM(streams) FROM music WHERE artist_country = 'United States' AND (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM date(substr(title, 7, 4)))) BETWEEN 1 AND 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters wrong country conditions and misses Africa region and time filter"
    }
  },
  {
    "example_id": 429,
    "prompt": "Identify the top 2 states with the highest average construction wages in 2020",
    "generated_sql": "SELECT state, AVG(construction_wage) FROM labor_stats JOIN construction_dates ON labor_stats.construction_date = construction_dates.construction_date WHERE labor_stats.year = 2020 GROUP BY state ORDER BY AVG(construction_wage) DESC LIMIT 2;",
    "reference_sql": "SELECT state, AVG(avg_wage) FROM labor_statistics WHERE year = 2020 GROUP BY state ORDER BY AVG(avg_wage) DESC LIMIT 2;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 430,
    "prompt": "What is the average cost of commercial building permits in the state of California for the year 2019?",
    "generated_sql": "SELECT AVG(cost) FROM Permits WHERE state = 'California' AND year = 2019 GROUP BY year;",
    "reference_sql": "SELECT AVG(cost) FROM building_permits WHERE state = 'California' AND year = 2019 AND permit_type = 'Commercial';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for commercial building permits"
    }
  },
  {
    "example_id": 431,
    "prompt": "Create a table to store client demographics",
    "generated_sql": "CREATE TABLE client_demographics (client_id INT PRIMARY KEY, client_name VARCHAR(255), gender VARCHAR(255), age INT, nationality VARCHAR(50), city VARCHAR(100));",
    "reference_sql": "CREATE TABLE client_demographics (client_id INT PRIMARY KEY, client_name VARCHAR(255));",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 432,
    "prompt": "Insert a new client named 'Alex Juarez' into the 'clients' table and assign them a unique client_id.",
    "generated_sql": "INSERT INTO clients (id, name, city, state, country) VALUES (5, 'Alex Juarez', 'Alex City', 'Alex State', 'Alberta');",
    "reference_sql": "INSERT INTO clients (client_name) VALUES ('Alex Juarez');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query hardcodes a specific id and includes unrelated columns instead of assigning a unique client_id and only specifying the name."
    }
  },
  {
    "example_id": 433,
    "prompt": "What is the total billable hours for attorney John Doe?",
    "generated_sql": "SELECT SUM(billable_hours) FROM attorney_hours WHERE name = 'John Doe';",
    "reference_sql": "SELECT SUM(Hours) FROM TimeEntries WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'John Doe');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 434,
    "prompt": "How many healthcare facilities are there in total, by type, in the database?",
    "generated_sql": "SELECT type, COUNT(*) FROM facilities GROUP BY type;",
    "reference_sql": "SELECT type, COUNT(*) FROM hospitals GROUP BY type UNION SELECT type, COUNT(*) FROM clinics GROUP BY type UNION SELECT type, COUNT(*) FROM long_term_care GROUP BY type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 435,
    "prompt": "What is the average age of patients who received a flu shot in 2020, grouped by their gender?",
    "generated_sql": "SELECT gender, AVG(age) as avg_age FROM flu_shots WHERE year = 2020 GROUP BY gender;",
    "reference_sql": "SELECT AVG(age) as avg_age, gender FROM patients WHERE flu_shot = true AND YEAR(shot_date) = 2020 GROUP BY gender;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 436,
    "prompt": "What is the number of cancer screenings performed, by gender?",
    "generated_sql": "SELECT gender, SUM(screening_count) as total_screening_count FROM cancer_screening GROUP BY gender;",
    "reference_sql": "SELECT gender, SUM(num_screenings) as total_screenings FROM cancer_screenings GROUP BY gender;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 437,
    "prompt": "What is the total number of organic farms in the 'farm_data' table, grouped by country?",
    "generated_sql": "SELECT country, SUM(organic_farm_count) FROM farm_data GROUP BY country;",
    "reference_sql": "SELECT country, COUNT(*) as total_organic_farms FROM farm_data WHERE is_organic = true GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 438,
    "prompt": "What is the total production (in metric tons) of organic crops in Europe, broken down by crop type?",
    "generated_sql": "SELECT crop_type, SUM(production_metric_tons) FROM organic_crop_production WHERE production_metric_tons > 0 GROUP BY crop_type;",
    "reference_sql": "SELECT crop_name, SUM(production_tons) FROM organic_crops WHERE country = 'Europe' GROUP BY crop_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for region = 'Europe'"
    }
  },
  {
    "example_id": 439,
    "prompt": "Which smart contracts have a transaction count greater than 1000 and were deployed in the last 30 days?",
    "generated_sql": "SELECT contract_id FROM smart_contracts WHERE transaction_count > 1000 AND timestamp > NOW() - INTERVAL 30 DAY;",
    "reference_sql": "SELECT contract_address FROM smart_contracts s JOIN transactions t ON s.contract_address = t.contract_address WHERE s.deployment_date >= DATEADD(day, -30, CURRENT_DATE) GROUP BY contract_address HAVING COUNT(*) > 1000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 440,
    "prompt": "Who is the top token holder for a specific digital asset?",
    "generated_sql": "SELECT token_holder, MAX(total_tokens) FROM digital_assets GROUP BY token_holder ORDER BY total_tokens ASC;",
    "reference_sql": "SELECT ah.address, SUM(th.balance) FROM token_holders th JOIN digital_assets da ON th.asset_id = da.asset_id GROUP BY ah.address ORDER BY SUM(th.balance) DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It fails to filter for the specific asset, uses MAX with GROUP BY incorrectly, orders ascending, and omits LIMIT 1 to get the top holder."
    }
  },
  {
    "example_id": 441,
    "prompt": "Calculate the total quantity of products sold and group by supplier name, for products in the \"Haircare\" category.",
    "generated_sql": "SELECT supplier_name, SUM(quantity) as total_quantity_sales FROM products_sales WHERE category = 'Haircare' GROUP BY supplier_name;",
    "reference_sql": "SELECT sales_per_product.category as product_category, supplier_id, SUM(quantity_sold) as total_quantity_sold FROM sales_per_product WHERE product_category = 'Haircare' GROUP BY product_category, supplier_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 442,
    "prompt": "List all products that are both vegan and cruelty-free, ordered by name in ascending order.",
    "generated_sql": "SELECT product FROM products WHERE is_vegan = true AND is_cruelty_free = true ORDER BY name ASC;",
    "reference_sql": "SELECT * FROM products WHERE vegan = TRUE AND cruelty_free = TRUE ORDER BY name ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "ORDER BY uses 'name' but the column selected is 'product'; they should match"
    }
  },
  {
    "example_id": 443,
    "prompt": "Which countries produce cruelty-free skincare products and how many are there?",
    "generated_sql": "SELECT country, SUM(quantity) as total_quantity FROM products JOIN sales ON products.product_id = sales.product_id WHERE cruelty_free = true GROUP BY country;",
    "reference_sql": "SELECT country, SUM(product_count) as total_products FROM cruelty_free_products WHERE cruelty_free = true GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Summing sales quantity instead of counting skincare products by country and missing skincare filter"
    }
  },
  {
    "example_id": 444,
    "prompt": "How many emergency response vehicles are stationed in each borough?",
    "generated_sql": "SELECT B.borough_name, COUNT(DISTINCT E.vehicle_id) AS num_vehicles FROM boroughs B JOIN emergency_response_vehicles E ON B.borough_id = E.borough_id GROUP BY B.borough_name;",
    "reference_sql": "SELECT b.name, s.num_vehicles FROM stations s JOIN borough b ON s.borough_id = b.id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 445,
    "prompt": "What is the average response time for emergency calls in CityA, grouped by incident type?",
    "generated_sql": "SELECT incident_type, AVG(response_time) AS avg_response_time FROM (SELECT incident_type, response_time, ROW_NUMBER() OVER (PARTITION BY city ORDER BY response_time ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS subquery) subquery WHERE subquery.row_number = 1;",
    "reference_sql": "SELECT IncidentType, AVG(ResponseTime) FROM EmergencyCalls EC INNER JOIN IncidentTypes IT ON EC.IncidentType = IT.IncidentType WHERE City = 'CityA' GROUP BY IncidentType;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query misuses ROW_NUMBER, doesn\u2019t filter for CityA, and fails to group by incident_type correctly."
    }
  },
  {
    "example_id": 446,
    "prompt": "What is the count of incidents for each type at each location, and what is the percentage of the total count for each location?",
    "generated_sql": "SELECT incidents.type, COUNT(incidents.id) AS incidents_count, SUM(incidents.count) / COUNT(incidents.id) AS total_incidents, (SELECT SUM(incidents.count) FROM incidents WHERE incidents.type = 'Incident') * 100.0 AS percentage FROM incidents GROUP BY incidents.type;",
    "reference_sql": "SELECT location, type, COUNT(*) as incident_count, incident_count * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY location) as percentage FROM incidents GROUP BY location, type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not group by location and miscalculates counts and percentage"
    }
  },
  {
    "example_id": 447,
    "prompt": "What is the maximum and minimum response time for fire departments in each city in the state of Ohio?",
    "generated_sql": "SELECT city, MAX(response_time) as max_response_time, MIN(response_time) as min_response_time FROM fire_departments GROUP BY city;",
    "reference_sql": "SELECT city, MIN(response_time) as min_response_time, MAX(response_time) as max_response_time FROM fire_department_oh GROUP BY city;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing WHERE clause to filter for state = 'Ohio'"
    }
  },
  {
    "example_id": 448,
    "prompt": "Which defense agency has the highest total contract value in Texas?",
    "generated_sql": "SELECT agency, SUM(contract_value) as total_value FROM defense_agencies WHERE location = 'Texas' GROUP BY agency ORDER BY total_value DESC LIMIT 1;",
    "reference_sql": "SELECT Agency, SUM(Contract_Value) as Total_Contract_Value FROM Agency_Contracts WHERE State = 'Texas' GROUP BY Agency ORDER BY Total_Contract_Value DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 449,
    "prompt": "Delete all records in the 'equipment' table where the 'type' is 'ground'",
    "generated_sql": "DELETE FROM equipment WHERE type = 'ground';",
    "reference_sql": "DELETE FROM equipment WHERE type = 'ground';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 450,
    "prompt": "List all transactions involving customers from the US in February 2022.",
    "generated_sql": "SELECT * FROM transactions WHERE customer_state = 'US' AND transaction_date >= '2022-02-01' AND transaction_date < '2022-02-02';",
    "reference_sql": "SELECT t.transaction_id, c.customer_name, c.country, t.transaction_date FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.country = 'US' AND t.transaction_date BETWEEN '2022-02-01' AND '2022-02-28';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The date range only covers February 1, 2022 instead of the entire month"
    }
  },
  {
    "example_id": 451,
    "prompt": "Which customers have made a transaction over 500 in the \"risk_management\" category?",
    "generated_sql": "SELECT customer_id FROM customers WHERE transaction_type = 'transaction_over_500' AND risk_management = true;",
    "reference_sql": "SELECT c.name FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE c.category = 'risk_management' AND t.amount > 500;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters on non-existent columns in customers and does not join transactions or filter amount > 500 and category correctly."
    }
  },
  {
    "example_id": 452,
    "prompt": "Update the max_capacity of a vessel",
    "generated_sql": "UPDATE Vessels SET Max_Capacity = 12000 WHERE Name = 'VesselA';",
    "reference_sql": "UPDATE fleet SET max_capacity = 13000 WHERE vessel_id = 3002;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Hardcoded values for vessel name and capacity not specified by the user"
    }
  },
  {
    "example_id": 453,
    "prompt": "What is the average salary for workers in the renewable energy sector in the US and Canada?",
    "generated_sql": "SELECT AVG(salary) FROM workers WHERE industry ='renewable energy' AND country IN ('US', 'Canada');",
    "reference_sql": "SELECT AVG(salary) FROM worker_salaries WHERE country IN ('USA', 'Canada') AND sector = 'Renewable Energy';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 454,
    "prompt": "Which excavation sites have more than 10 artifacts?",
    "generated_sql": "SELECT * FROM ExcavationSites WHERE num_artifacts > 10;",
    "reference_sql": "SELECT e.SiteName FROM ExcavationSite e JOIN Artifact a ON e.SiteID = a.SiteID GROUP BY e.SiteName HAVING COUNT(a.ArtifactID) > 10;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 455,
    "prompt": "What is the total revenue of rural hospitals that have a trauma center?",
    "generated_sql": "SELECT SUM(revenue) FROM hospitals WHERE region = 'Rural' AND center ='Trauma Center';",
    "reference_sql": "SELECT SUM(revenue) FROM hospitals WHERE location = 'rural' AND trauma_center = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 456,
    "prompt": "List the intelligence operations and their corresponding threat levels, and rank them based on their threat level and budget.",
    "generated_sql": "SELECT operation, threat_level, budget, rank FROM intelligence_operations;",
    "reference_sql": "SELECT operation, threat, budget, ROW_NUMBER() OVER (PARTITION BY threat ORDER BY budget DESC) as rank FROM intel_ops_threat;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not rank results or order by threat_level and budget"
    }
  },
  {
    "example_id": 457,
    "prompt": "What is the diversity ratio (percentage of non-male employees) in each department?",
    "generated_sql": "SELECT Department, AVG(DiversityPercentage) as DiversityRatio FROM Employees GROUP BY Department;",
    "reference_sql": "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly averages a non-existent DiversityPercentage column instead of calculating the percentage of non-male employees using counts."
    }
  },
  {
    "example_id": 458,
    "prompt": "Find the number of energy efficiency policies in countries with more than 20 GW of solar capacity",
    "generated_sql": "SELECT COUNT(*) FROM energy_efficiency_policies WHERE country IN ('USA', 'Canada', 'Mexico', 'Japan', 'China', 'South Korea', 'Brazil', 'India');",
    "reference_sql": "SELECT COUNT(*) FROM energy_efficiency WHERE country IN (SELECT country FROM renewable_sources WHERE name = 'Solar' AND capacity > 20);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not join or filter by solar capacity table; uses a hard-coded country list instead of selecting those with capacity >20 GW"
    }
  },
  {
    "example_id": 459,
    "prompt": "What is the total installed capacity of hydroelectric power plants in Brazil and Canada?",
    "generated_sql": "SELECT SUM(capacity) FROM hydro_plants WHERE country IN ('Brazil', 'Canada');",
    "reference_sql": "(SELECT capacity FROM hydroelectric_power WHERE country = 'Brazil') UNION (SELECT capacity FROM hydroelectric_power WHERE country = 'Canada');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 460,
    "prompt": "What is the total number of points scored by each team in the NBA this season?",
    "generated_sql": "SELECT team, SUM(points) as total_points FROM NBA_Season GROUP BY team;",
    "reference_sql": "SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 461,
    "prompt": "What is the average amount of donations given by donors from the United States, per transaction, for the year 2020?",
    "generated_sql": "SELECT AVG(donations.amount) AS avg_donations_per_transaction FROM donations JOIN donors ON donations.donor_id = donors.id WHERE donations.donor_country = 'USA' AND donations.donation_date >= '2020-01-01' AND donations.donation_date < '2021-01-01' AND donations.donation_date IS NULL;",
    "reference_sql": "SELECT AVG(donation_amount) FROM donors WHERE donor_country = 'USA' AND YEAR(donation_date) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause includes donations.donation_date IS NULL which conflicts with the date range filter, resulting in no matching rows."
    }
  },
  {
    "example_id": 462,
    "prompt": "Which organizations focus on ethical AI in each continent?",
    "generated_sql": "SELECT organization_name, continent, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM organization WHERE organization_focus = 'Ethical AI')) / (SELECT COUNT(*) FROM organization WHERE organization_focus = 'Ethical AI') AS percentage FROM organizations WHERE organization_focus = 'Ethical AI';",
    "reference_sql": "SELECT continent, name FROM ethics_by_continent WHERE focus = 'Ethical AI';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly computes a percentage without grouping by continent and includes an irrelevant calculation; it should simply select organizations by continent"
    }
  },
  {
    "example_id": 463,
    "prompt": "Find the daily ridership for a specific train line",
    "generated_sql": "SELECT line, ridership FROM daily_ridership WHERE line = 'East';",
    "reference_sql": "SELECT trip_date, SUM(num_passengers) AS daily_ridership FROM train_trip WHERE line_name = 'Red Line' GROUP BY trip_date;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 464,
    "prompt": "What is the average distance and frequency for routes with a distance greater than 7 km and a frequency of at least 120?",
    "generated_sql": "SELECT AVG(distance) as avg_distance, AVG(frequency) as avg_frequency, COUNT(*) as num_routes FROM routes WHERE distance > 7 AND frequency > 120 GROUP BY avg_distance, avg_frequency;",
    "reference_sql": "SELECT route_id, AVG(distance) as avg_distance, AVG(frequency) as avg_frequency FROM route WHERE distance > 7 AND frequency >= 120 GROUP BY route_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses frequency > 120 instead of >= 120 and incorrectly includes GROUP BY on aggregate results"
    }
  },
  {
    "example_id": 465,
    "prompt": "Update the 'GOTS' status of all manufacturers in the 'Africa' region to 'Yes'.",
    "generated_sql": "UPDATE manufacturers SET status = 'Yes' WHERE region = 'Africa';",
    "reference_sql": "UPDATE Manufacturers SET GOTS = 'Yes' WHERE Region = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query updates the 'status' column instead of the 'GOTS' column."
    }
  },
  {
    "example_id": 466,
    "prompt": "What is the total quantity of materials used by each producer in the 'ethical_materials' table?",
    "generated_sql": "SELECT producer_id, SUM(quantity) FROM ethical_materials GROUP BY producer_id;",
    "reference_sql": "SELECT producer, SUM(quantity) AS total_quantity FROM ethical_materials GROUP BY producer;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 467,
    "prompt": "What is the minimum sustainability score for each textile material?",
    "generated_sql": "SELECT t.material_name AS material_name, MIN(s.score) AS min_score FROM textiles t LEFT JOIN sustainability s ON t.material_id = s.material_id WHERE s.score <> 0 GROUP BY t.material_name;",
    "reference_sql": "SELECT Material, MIN(SustainabilityScore) AS MinSustainabilityScore FROM TextileSources GROUP BY Material;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE s.score <> 0 filter excludes zero scores and turns the LEFT JOIN into an INNER JOIN, potentially omitting valid minimum scores of zero or materials without scores."
    }
  },
  {
    "example_id": 468,
    "prompt": "How many clients have taken out socially responsible loans in each country?",
    "generated_sql": "SELECT country, COUNT(*) FROM Clients GROUP BY country;",
    "reference_sql": "SELECT country, COUNT(DISTINCT client_id) as num_clients FROM socially_responsible_loans GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "No filter to include only clients with socially responsible loans"
    }
  },
  {
    "example_id": 469,
    "prompt": "What is the total amount of Shariah-compliant loans issued by each financial institution in Oceania?",
    "generated_sql": "SELECT f.name, SUM(p.amount) FROM financial_institutions f INNER JOIN loans p ON f.institution_id = p.institution_id WHERE f.country IN ('Oceania');",
    "reference_sql": "SELECT institution_id, SUM(amount) FROM loans WHERE loan_type = 'Shariah-compliant' AND institution_id IN (SELECT institution_id FROM financial_institutions WHERE institution_name LIKE '%Oceania%') GROUP BY institution_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query lacks filter for Shariah-compliant loans, missing GROUP BY, and incorrectly filters country='Oceania' instead of region"
    }
  },
  {
    "example_id": 470,
    "prompt": "What is the total income of clients in Canada who are socially responsible investors?",
    "generated_sql": "SELECT SUM(income) FROM SocialResponsibility INNER JOIN Client INNER JOIN Income ON SocialResponsibility.client_id = Income.client_id WHERE SocialResponsibility.country = 'Canada' AND Income.sourcing = true;",
    "reference_sql": "SELECT SUM(income) FROM clients WHERE country = 'Canada' AND is_socially_responsible_investor = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing join condition for Client, country filter on wrong table, and incorrect condition for socially responsible investors"
    }
  },
  {
    "example_id": 471,
    "prompt": "Find the number of donations made by first-time donors in the last quarter.",
    "generated_sql": "SELECT COUNT(*) FROM donations WHERE donation_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE;",
    "reference_sql": "SELECT COUNT(*) FROM (SELECT DonationID FROM Donations WHERE DonationType = 'Individual' AND DonationDate >= DATEADD(quarter, -1, CURRENT_DATE) EXCEPT SELECT DonationID FROM PreviousDonations) AS FirstTimeDonors;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing condition to identify first-time donors; counts all donations in the period"
    }
  },
  {
    "example_id": 472,
    "prompt": "How many volunteers helped in the education programs in 2021?",
    "generated_sql": "SELECT COUNT(DISTINCT volunteer_id) FROM education_programs WHERE YEAR(start_date) = 2021;",
    "reference_sql": "SELECT COUNT(*) FROM volunteers WHERE program = 'Education' AND volunteer_date BETWEEN '2021-01-01' AND '2021-12-31';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 473,
    "prompt": "What is the total donation amount by each program in Q1 2022?",
    "generated_sql": "SELECT program_type, SUM(donation_amount) as total_donation FROM Donations WHERE donation_date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY program_type;",
    "reference_sql": "SELECT p.pname, SUM(d.amount) as total_donation FROM donation d JOIN program p ON d.pid = p.pid WHERE d.donation_date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY p.pname;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 474,
    "prompt": "Which programs have the highest and lowest average donation amounts?",
    "generated_sql": "SELECT program_name, AVG(donation_amount) AS avg_donation FROM donations GROUP BY program_name ORDER BY avg_donation DESC LIMIT 1;",
    "reference_sql": "SELECT ProgramName, AVG(DonationAmount) AS AvgDonation FROM Programs GROUP BY ProgramName ORDER BY AvgDonation DESC, ProgramName ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query only returns the program with the highest average donation, not the lowest."
    }
  },
  {
    "example_id": 475,
    "prompt": "Delete all records with a best-before date earlier than tomorrow from the FoodSafetyRecords.PerishableGoods table.",
    "generated_sql": "DELETE FROM FoodSafetyRecords.PerishableGoods WHERE date_before >= DATEADD(day, -1, GETDATE());",
    "reference_sql": "DELETE FROM FoodSafetyRecords.PerishableGoods WHERE bestBeforeDate < DATEADD(day, 1, CURDATE());",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause logic is reversed and uses the wrong date comparison; it should delete records with best-before < DATEADD(day, 1, GETDATE()) not >= DATEADD(day, -1, GETDATE())."
    }
  },
  {
    "example_id": 476,
    "prompt": "Insert new food safety records for locations \"A123\", \"B456\", and \"C789\"",
    "generated_sql": "INSERT INTO food_safety (location) VALUES ('A123', 'Dairy'); INSERT INTO food_safety (location) VALUES ('B456', 'Ground beef'); INSERT INTO food_safety (location) VALUES ('C789', 'Dalmatians');",
    "reference_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count) VALUES ('A123', '2022-03-01', 0), ('B456', '2022-03-05', 2), ('C789', '2022-03-10', 1);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Mismatched columns and values; extra food type values inserted instead of just locations"
    }
  },
  {
    "example_id": 477,
    "prompt": "What is the percentage of meals that meet the daily recommended nutrient intake for customers in Indonesia?",
    "generated_sql": "SELECT p.daily_recommended_nutrient FROM meals m INNER JOIN customers c ON m.customer_id = c.customer_id WHERE c.country = 'Indonesia' AND m.daily_recommended_nutrient IN ('Fiber', 'Vitamin A', 'Vitamin C', 'Vitamin B12') GROUP BY p.daily_recommended_nutrient ORDER BY p.daily_recommended_nutrient DESC;",
    "reference_sql": "SELECT (COUNT(*) FILTER (WHERE meals.calories >= (meals.daily_recommended_intake * 0.8))) * 100.0 / COUNT(*) AS percentage FROM meals JOIN customers ON meals.customer_id = customers.id WHERE customers.country = 'Indonesia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not calculate percentages and uses undefined alias p, only selects nutrient names instead of computing percentage of meals meeting recommended intake."
    }
  },
  {
    "example_id": 478,
    "prompt": "How many shipments were handled by each warehouse in the first quarter of 2021?",
    "generated_sql": "SELECT warehouse_id, COUNT(DISTINCT shipment_id) FROM shipments WHERE shipment_date BETWEEN '2021-01-01' AND '2021-03-31' GROUP BY warehouse_id;",
    "reference_sql": "SELECT w.country, w.city, COUNT(s.id) AS shipment_count FROM Warehouse w JOIN Shipments s ON w.id = s.warehouse_id WHERE s.shipped_date >= '2021-01-01' AND s.shipped_date < '2021-04-01' GROUP BY w.id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 479,
    "prompt": "What is the average delivery time for ground freight from 'Toronto' to 'Montreal'?",
    "generated_sql": "SELECT AVG(delivery_time) FROM GroundFrappe WHERE destination = 'Toronto' AND freight_mode = 'Ground';",
    "reference_sql": "SELECT AVG(transit_time) FROM ground_freight_routes WHERE origin = 'Toronto' AND destination = 'Montreal';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters are incorrect: it uses destination = 'Toronto' instead of source and omits destination = 'Montreal' filter"
    }
  },
  {
    "example_id": 480,
    "prompt": "How many biosensors have been developed in each country?",
    "generated_sql": "SELECT country, COUNT(*) FROM biosensors GROUP BY country;",
    "reference_sql": "SELECT country, COUNT(*) AS biosensors_per_country FROM biosensors GROUP BY country ORDER BY biosensors_per_country DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 481,
    "prompt": "Insert a new record in the 'Research_Grants' table with the following details: Grant_ID = 30, Grant_Title = 'Artificial Intelligence for Healthcare', Start_Date = '2023-01-01', End_Date = '2025-12-31', Grant_Amount = 1200000, Grant_Status = 'Active",
    "generated_sql": "INSERT INTO Research_Grants (Grant_ID, Grant_Title, Start_Date, End_Date, Grant_Amount, Grant_Status) VALUES (30, 'Artificial Intelligence for Healthcare', '2023-01-01', '2025-12-31', 1200000, 'Active');",
    "reference_sql": "INSERT INTO Research_Grants (Grant_ID, Grant_Title, Start_Date, End_Date, Grant_Amount, Grant_Status) VALUES (30, 'Artificial Intelligence for Healthcare', '2023-01-01', '2025-12-31', 1200000, 'Active');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 482,
    "prompt": "What is the number of smart city initiatives implemented in each country?",
    "generated_sql": "SELECT country, COUNT(*) FROM smart_cities GROUP BY country;",
    "reference_sql": "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 483,
    "prompt": "What is the average rating of historical sites in Egypt?",
    "generated_sql": "SELECT AVG(rating) FROM historical_sites WHERE country = 'Egypt';",
    "reference_sql": "SELECT AVG(rating) FROM site_info si INNER JOIN site_ratings sr ON si.site_id = sr.site_id WHERE si.country = 'Egypt' AND sr.rating IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 484,
    "prompt": "What is the engagement rate of virtual tours in European hotels?",
    "generated_sql": "SELECT Engagement_Rate FROM Virtual_Tours WHERE Location = 'Europe';",
    "reference_sql": "SELECT country, AVG(views / (SELECT SUM(views) FROM virtual_tours WHERE hotel_id = hotels.hotel_id) * 100) as engagement_rate FROM hotels INNER JOIN virtual_tours ON hotels.hotel_id = virtual_tours.hotel_id GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing aggregation: returns individual rates instead of the overall engagement rate (e.g., AVG) for European hotels."
    }
  },
  {
    "example_id": 485,
    "prompt": "Count the number of French Impressionist paintings in the collection.",
    "generated_sql": "SELECT COUNT(*) FROM French_Impressionist_Painting WHERE title LIKE '%Impressionist%';",
    "reference_sql": "SELECT COUNT(*) as impressionist_count FROM art_collection WHERE artist_name = 'French' AND style = 'Impressionism';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters by title instead of movement and nationality; wrong table usage"
    }
  },
  {
    "example_id": 486,
    "prompt": "What is the average price of paintings from African artists in our collection?",
    "generated_sql": "SELECT AVG(price) FROM Paintings INNER JOIN Artists ON Paintings.artist_id = Artists.artist_id WHERE Artists.race = 'African' AND Paintings.collection_id = 1;",
    "reference_sql": "SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Collections ON Artworks.artist_nationality = Collections.continent WHERE Artworks.medium = 'Painting' AND Collections.continent = 'Africa';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 487,
    "prompt": "What is the total value of surrealist art pieces?",
    "generated_sql": "SELECT SUM(value) FROM SurrealistArt;",
    "reference_sql": "SELECT SUM(value) FROM ArtPieces WHERE style = 'Surrealism';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing WHERE clause to filter for surrealist art pieces"
    }
  },
  {
    "example_id": 488,
    "prompt": "Calculate the average number of bridges constructed per year in the Pacific Northwest, and the total bridge construction cost for each year since 2000.",
    "generated_sql": "SELECT DATE_FORMAT(year, '%Y-%m') AS year, AVG(bridge_count) AS avg_bridge_count, SUM(bridge_cost) AS total_bridge_cost FROM BridgeConstruction WHERE region = 'Pacific Northwest' GROUP BY year;",
    "reference_sql": "SELECT construction_year, AVG(length) AS avg_bridges_per_year, SUM(cost) AS total_cost FROM bridge_projects WHERE location = 'Pacific Northwest' AND construction_year >= 2000 GROUP BY construction_year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for records since the year 2000"
    }
  },
  {
    "example_id": 489,
    "prompt": "What are the names and types of bridges in California?",
    "generated_sql": "SELECT name, type FROM Bridges WHERE state = 'California';",
    "reference_sql": "SELECT Name, Type FROM Bridges WHERE State = 'California';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 490,
    "prompt": "What is the average budget for all projects in the infrastructure development database?",
    "generated_sql": "SELECT AVG(budget) FROM infrastructure_development.projects;",
    "reference_sql": "SELECT AVG(budget) FROM Projects;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 491,
    "prompt": "How many sustainable tourism initiatives are there in total and how many are there in each continent?",
    "generated_sql": "SELECT d.continent, SUM(t.success) as total_success, SUM(t.success) as total_incidents FROM tourism_initiatives t JOIN destinations d ON t.destination_id = d.id GROUP BY d.continent;",
    "reference_sql": "SELECT continent, COUNT(*) as num_initiatives FROM Sustainable_Initiatives_Global GROUP BY continent; SELECT COUNT(*) as total_initiatives FROM Sustainable_Initiatives_Global;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(t.success) instead of COUNT initiatives and does not provide total overall count"
    }
  },
  {
    "example_id": 492,
    "prompt": "What is the percentage change in the number of tourists visiting Japan from India between March and April?",
    "generated_sql": "SELECT (SUM(visitors) / (SELECT SUM(visitors) FROM tourists WHERE country = 'India' AND visitingyear < '2019' AND country = 'Japan')) * 100 AS percentage_change FROM tourists WHERE country = 'India' AND visitingyear < '2019' AND visitingyear = '2019';",
    "reference_sql": "SELECT (SUM(number_of_tourists) - LAG(SUM(number_of_tourists)) OVER (PARTITION BY visitor_country ORDER BY date)) / LAG(SUM(number_of_tourists)) OVER (PARTITION BY visitor_country ORDER BY date) * 100.0 as percentage_change FROM tourism WHERE host_country = 'Japan' AND visitor_country = 'India';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by March and April and misuses year and country conditions"
    }
  },
  {
    "example_id": 493,
    "prompt": "Identify legal technology initiatives and their respective countries, excluding those launched before 2010.",
    "generated_sql": "SELECT country, initiative_name, country FROM legal_tech_initiatives WHERE launch_year < 2010 GROUP BY country;",
    "reference_sql": "SELECT initiative, country FROM historical_legal_tech WHERE launch_date >= '2010-01-01' ORDER BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filter uses launch_year < 2010 instead of excluding those before 2010 (should be >= 2010) and grouping is incorrect"
    }
  },
  {
    "example_id": 494,
    "prompt": "What is the total number of marine life research stations and pollution control initiatives in the Southern Ocean?",
    "generated_sql": "SELECT SUM(num_stations) FROM marine_life_research_stations WHERE location = 'Southern Ocean';",
    "reference_sql": "SELECT SUM(cnt) FROM (SELECT COUNT(*) cnt FROM marine_life_research_stations WHERE region = 'Southern Ocean' UNION ALL SELECT COUNT(*) FROM pollution_control_initiatives WHERE region = 'Southern Ocean') x;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only sums research stations and omits pollution control initiatives."
    }
  },
  {
    "example_id": 495,
    "prompt": "What is the total quantity of locally sourced ingredients used in dishes?",
    "generated_sql": "SELECT SUM(quantity) FROM ingredients WHERE is_local = true;",
    "reference_sql": "SELECT SUM(quantity) AS total_local_ingredients FROM dish_ingredients DI INNER JOIN ingredients I ON DI.ingredient = I.ingredient WHERE I.is_local = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not join dish usage; sums all local ingredient inventory rather than quantities used in dishes"
    }
  },
  {
    "example_id": 496,
    "prompt": "What is the geopolitical risk level for 'Country Y' in 2021?",
    "generated_sql": "SELECT geopolitical_risk_level FROM country_geographical_risk WHERE country_name = 'Country Y' AND year = 2021;",
    "reference_sql": "SELECT risk_level FROM geopolitical_risks_2 WHERE country = 'Country Y' AND year = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 497,
    "prompt": "How many mobile customers in the telecom company's database live in each city?",
    "generated_sql": "SELECT city, COUNT(CASE WHEN customer_location = 'City' THEN 1 END) as num_mobile_cities FROM telecom_company GROUP BY city;",
    "reference_sql": "SELECT city, COUNT(*) FROM mobile_customers GROUP BY city;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters on customer_location = 'City' instead of mobile customers and misuses CASE WHEN; it doesn\u2019t filter by mobile and counts wrong"
    }
  },
  {
    "example_id": 498,
    "prompt": "How many unique sources are there in the 'investigative_journalism' category?",
    "generated_sql": "SELECT COUNT(DISTINCT source) FROM investigative_journalism;",
    "reference_sql": "SELECT COUNT(DISTINCT source) FROM articles WHERE category = 'investigative_journalism';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 499,
    "prompt": "What is the difference in ocean acidity levels between the Atlantic and Pacific Oceans?",
    "generated_sql": "SELECT location, ocean_type, ocean_acidification_level FROM ocean_acidification_rates ORDER BY ocean_acidification_level DESC LIMIT 1;",
    "reference_sql": "SELECT MAX(ph) - MIN(ph) FROM ocean_ph WHERE location IN ('Atlantic Ocean', 'Pacific Ocean');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query returns the single highest acidity level instead of calculating the difference between Atlantic and Pacific"
    }
  },
  {
    "example_id": 500,
    "prompt": "What is the total amount donated by each donor in each country?",
    "generated_sql": "SELECT d.country, SUM(d.amount) FROM donors d JOIN donations d1 ON d.id = d1.donor_id JOIN donations d2 ON d.id = d2.donor_id GROUP BY d.country;",
    "reference_sql": "SELECT DonorName, Country, SUM(Amount) AS TotalDonated FROM Donations GROUP BY DonorName, Country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums the wrong column, misses donor grouping, and uses incorrect joins"
    }
  },
  {
    "example_id": 501,
    "prompt": "What is the name of the game genre with the most players?",
    "generated_sql": "SELECT genre, COUNT(*) as total_players FROM game_genres GROUP BY genre ORDER BY total_players DESC LIMIT 1;",
    "reference_sql": "SELECT game_genre FROM player GROUP BY game_genre ORDER BY COUNT(*) DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts number of entries in game_genres instead of actual players by genre; needs to join players or game_sessions to count players per genre."
    }
  },
  {
    "example_id": 502,
    "prompt": "Delete records in the 'sensor_data' table where the 'sensor_type' is 'temperature' and the reading is greater than 30",
    "generated_sql": "DELETE FROM sensor_data WHERE sensor_type = 'temperature' AND reading > 30;",
    "reference_sql": "DELETE FROM sensor_data WHERE sensor_type = 'temperature' AND reading > 30;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 503,
    "prompt": "Update the 'location' column for the 'field' table where 'field_id' is 501 to 'Brazil'",
    "generated_sql": "UPDATE field SET location = 'Brazil' WHERE field_id = 501;",
    "reference_sql": "UPDATE field SET location = 'Brazil' WHERE field_id = 501;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 504,
    "prompt": "Identify cities with the highest citizen feedback ratings and the corresponding number of public services provided in each city.",
    "generated_sql": "SELECT city, COUNT(*) AS num_public_services FROM city_feedback GROUP BY city, num_public_services ORDER BY num_public_services DESC;",
    "reference_sql": "SELECT c.city_name, MAX(ps.rating) as max_rating, COUNT(ps.service_id) as num_services FROM cities c JOIN public_services ps ON c.city_id = ps.city_id GROUP BY c.city_name HAVING MAX(ps.rating) >= ALL (SELECT MAX(ps2.rating) FROM public_services ps2 GROUP BY ps2.city_id);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query doesn\u2019t calculate feedback ratings nor correctly count public services by city"
    }
  },
  {
    "example_id": 505,
    "prompt": "What is the policy impact on air quality in industrial regions?",
    "generated_sql": "SELECT PolicyImpact FROM (SELECT PolicyImpact, Region, RANK() OVER (ORDER BY COUNT(*) DESC) as Rank FROM PolicyImpact WHERE Region = 'Industrial') AS subquery WHERE Rank IN (SELECT Rank FROM PolicyImpact);",
    "reference_sql": "SELECT aq.region, AVG(aq.pollution_level) AS avg_pollution, p.policy_type FROM air_quality aq INNER JOIN policies p ON aq.region = p.region WHERE p.policy_type = 'Industrial' OR p.policy_type = 'Green' GROUP BY aq.region, p.policy_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Misuses window functions without grouping and incorrectly filters results; does not retrieve the policy impact on air quality in industrial regions"
    }
  },
  {
    "example_id": 506,
    "prompt": "What is the total budget allocated for education and healthcare services in 2020, for regions with a population over 1 million?",
    "generated_sql": "SELECT SUM(amount) FROM budget WHERE year = 2020 AND region = 'Education' AND population > 10000000;",
    "reference_sql": "SELECT SUM(b.amount) FROM budget b INNER JOIN regions r ON b.region_id = r.id WHERE b.service IN ('Education', 'Healthcare') AND b.year = 2020 AND r.population > 1000000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only Education, ignores Healthcare, uses region instead of service, and uses >10M instead of >1M"
    }
  },
  {
    "example_id": 507,
    "prompt": "What was the maximum budget allocated for transportation in each region?",
    "generated_sql": "SELECT region, MAX(budget) FROM transportation_budget GROUP BY region;",
    "reference_sql": "SELECT region, MAX(amount) FROM Budget WHERE category = 'Transportation' GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 508,
    "prompt": "List all Dysprosium transactions with prices over 50 dollars in European countries.",
    "generated_sql": "SELECT * FROM transactions WHERE element = 'Dysprosium' AND country IN ('United Kingdom', 'France', 'Germany', 'Italy', 'Spain') AND price > 50 AND type = 'Dysprosium';",
    "reference_sql": "SELECT * FROM dysprosium_transactions WHERE country IN ('France', 'Germany') AND element = 'Dysprosium' AND price > 50;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary 'type' filter and incomplete list of European countries"
    }
  },
  {
    "example_id": 509,
    "prompt": "What is the minimum size, in square feet, of properties with inclusive housing policies in the city of Washington D.C.?",
    "generated_sql": "SELECT MIN(size) FROM inclusive_housing WHERE city = 'Washington D.C.';",
    "reference_sql": "SELECT MIN(size) FROM property WHERE city = 'Washington D.C.' AND inclusive_housing_policy = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 510,
    "prompt": "What is the average CO2 emission (in metric tons) for the top 5 most populous countries in Africa?",
    "generated_sql": "SELECT AVG(CO2_emission) FROM country_emissions WHERE region = 'Africa' AND country IN ('Egypt', 'Morocco', 'Senegal', 'Algeria', 'Egypt', 'Morocco', 'Algeria', 'Senegal', 'Algeria');",
    "reference_sql": "SELECT AVG(co2_emissions) FROM (SELECT co2_emissions FROM co2_emissions WHERE country IN ('Nigeria', 'Egypt', 'South Africa', 'Ethiopia', 'Kenya') ORDER BY population DESC LIMIT 5) subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query hardcodes an incorrect and duplicated list of countries instead of selecting the top 5 most populous African countries by population."
    }
  },
  {
    "example_id": 511,
    "prompt": "Determine the percentage of sales for each product category in each state",
    "generated_sql": "SELECT product_category, SUM(sale_price) AS total_sales, 100.0 * SUM(sale_price) / COUNT(*) AS percentage_sales FROM sales_data WHERE state = 'California' GROUP BY product_category;",
    "reference_sql": "SELECT s1.product_category, s1.state, SUM(s1.sales) / (SELECT SUM(s2.sales) FROM sales s2 WHERE s2.state = s1.state) FROM sales s1 GROUP BY s1.product_category, s1.state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Only calculates for California and uses COUNT(*) instead of total sales per state for percentage calculation"
    }
  },
  {
    "example_id": 512,
    "prompt": "Which spacecraft have been used in the most missions?",
    "generated_sql": "SELECT spacecraft_name, SUM(missions_count) as total_missions FROM spacecraft GROUP BY spacecraft_name ORDER BY total_missions DESC LIMIT 1;",
    "reference_sql": "SELECT craft_name, total_flights FROM spacecraft ORDER BY total_flights DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Summing a missions_count column is incorrect; should count mission records, and LIMIT 1 misses ties"
    }
  },
  {
    "example_id": 513,
    "prompt": "Delete all records from the 'fan_demographics' table where the location is 'Texas'",
    "generated_sql": "DELETE FROM fan_demographics WHERE location = 'Texas';",
    "reference_sql": "DELETE FROM fan_demographics WHERE location = 'Texas';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 514,
    "prompt": "What is the total revenue for VR headset ticket sales by team, per month?",
    "generated_sql": "SELECT team, COUNT(*) as total_revenue FROM VR_ticket_sales WHERE team IN ('Bronze', 'Silver', 'Gold') AND team IN ('Team A', 'Team B') GROUP BY team;",
    "reference_sql": "SELECT t.team_name, DATE_TRUNC('month', make_date(sale_year, sale_quarter*3, 1)) as sale_month, SUM(quantity * CASE WHEN is_vr THEN 200 ELSE 100 END) as total_revenue FROM ticket_sales ts JOIN teams t ON ts.team_id = t.team_id GROUP BY t.team_name, sale_month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) instead of summing revenue, lacks month grouping, and incorrect team filters"
    }
  },
  {
    "example_id": 515,
    "prompt": "Find the total number of unique IP addresses involved in ransomware and phishing attacks in the last six months, excluding any repeat offenders.",
    "generated_sql": "SELECT COUNT(DISTINCT ip_address) FROM (SELECT ip_address FROM cyber_incidents WHERE incident_date >= DATE(NOW()) - INTERVAL 6 MONTH) AS subquery WHERE incident_date >= DATE(NOW()) - INTERVAL 6 MONTH;",
    "reference_sql": "SELECT ip_address FROM attack_ips WHERE attack_type IN ('Ransomware', 'Phishing') AND last_updated >= DATEADD(month, -6, GETDATE()) GROUP BY ip_address HAVING COUNT(*) = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filtering for attack types and logic to exclude repeat IPs"
    }
  },
  {
    "example_id": 516,
    "prompt": "What is the average CO2 emission of public buses in Los Angeles and London?",
    "generated_sql": "SELECT AVG(co2_emission) FROM public_buses WHERE city IN ('Los Angeles', 'London');",
    "reference_sql": "SELECT AVG(co2_emission) FROM public_buses WHERE city IN ('Los Angeles', 'London');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY city to return separate averages for Los Angeles and London"
    }
  },
  {
    "example_id": 517,
    "prompt": "What is the total quantity of 'Tencel Lyocell' and 'Bamboo Viscose' fabrics in stock?",
    "generated_sql": "SELECT SUM(quantity) FROM fabric_stock WHERE fabric_type = 'Tencel Lyocell' AND fabric_type = 'Bamboo Viscose';",
    "reference_sql": "SELECT SUM(quantity) as total_quantity FROM inventory WHERE fabric_name IN ('Tencel Lyocell', 'Bamboo Viscose');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using AND instead of OR to filter fabric types"
    }
  },
  {
    "example_id": 518,
    "prompt": "What is the average number of union members per workplace in the healthcare sector?",
    "generated_sql": "SELECT AVG(num_members) FROM workplace_members WHERE sector = 'Healthcare';",
    "reference_sql": "SELECT AVG(union_members / total_employees) FROM workplaces WHERE sector = 'healthcare';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 519,
    "prompt": "What is the total number of auto shows attended by each manufacturer?",
    "generated_sql": "SELECT manufacturers.manufacturer_name, SUM(auto_shows.num_attended) FROM manufacturers INNER JOIN auto_shows ON manufacturers.manufacturer_id = auto_shows.manufacturer_id GROUP BY manufacturers.manufacturer_name;",
    "reference_sql": "SELECT Manufacturers.name, COUNT(DISTINCT Auto_Shows.show_name) FROM Auto_Shows JOIN Manufacturers ON Auto_Shows.manufacturer = Manufacturers.name GROUP BY Manufacturers.name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 520,
    "prompt": "What is the total number of electric vehicles sold in 'California' in the 'sales' schema?",
    "generated_sql": "SELECT COUNT(vehicle_id) FROM sales WHERE state = 'California';",
    "reference_sql": "SELECT SUM(sales.vehicle_count) FROM sales INNER JOIN sales_regions ON sales.region_id = sales_regions.id INNER JOIN vehicles ON sales.id = vehicles.id WHERE vehicles.type = 'electric' AND sales_regions.name = 'California';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for electric vehicles; query counts all vehicles sold in California"
    }
  },
  {
    "example_id": 521,
    "prompt": "How many vessels have not had an inspection in the past year?",
    "generated_sql": "SELECT COUNT(*) FROM vessel_inspection WHERE inspection_date IS NOT NULL AND inspection_date < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
    "reference_sql": "SELECT COUNT(*) FROM vessels WHERE name NOT IN (SELECT vessel_name FROM safety_records WHERE inspection_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW());",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts inspection records older than a year instead of counting vessels with no inspections in the past year and ignores vessels with no inspections"
    }
  },
  {
    "example_id": 522,
    "prompt": "Which states have a landfill tipping fee greater than $60?",
    "generated_sql": "SELECT State, TippingFee FROM LandfillTipping WHERE State IN ('Florida', 'Texas', 'New York') GROUP BY State;",
    "reference_sql": "SELECT state, AVG(tipping_fee) as avg_tipping_fee FROM landfill GROUP BY state HAVING avg_tipping_fee > 60;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by specific states instead of using TippingFee > 60 and omits the correct condition"
    }
  },
  {
    "example_id": 523,
    "prompt": "Calculate the average daily water consumption in 'DailyWaterUsage' table for the month of January",
    "generated_sql": "SELECT AVG(day_of_week * 72) AS daily_consumption, AVG(water_quantity * COUNT(*)) AS daily_quantity FROM DailyWaterUsage WHERE month = 1;",
    "reference_sql": "SELECT AVG(usage) FROM DailyWaterUsage WHERE month = '2022-01-01'::DATE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses arbitrary expressions (day_of_week*72, water_quantity*COUNT(*)) instead of averaging the water_quantity per day for January."
    }
  },
  {
    "example_id": 524,
    "prompt": "Update records in the 'creative_applications' table where the 'application_name' is 'AI Poet' and the 'user_rating' is less than 4",
    "generated_sql": "UPDATE creative_applications SET application_name = 'AI Poet', user_rating = 4 WHERE application_name = 'AI Poet' AND user_rating < 4;",
    "reference_sql": "UPDATE creative_applications SET user_rating = user_rating + 2 WHERE application_name = 'AI Poet' AND user_rating < 4;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "No update values were specified in the request, and resetting application_name is unnecessary"
    }
  },
  {
    "example_id": 525,
    "prompt": "What is the number of agricultural innovation patents filed by each organization?",
    "generated_sql": "SELECT org_name, COUNT(*) FROM patents WHERE filed = TRUE GROUP BY org_name;",
    "reference_sql": "SELECT org, patent_count FROM innovation_patents;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for agricultural innovation patents"
    }
  },
  {
    "example_id": 526,
    "prompt": "What is the percentage of accidents for each aircraft model?",
    "generated_sql": "SELECT model, (COALESCE(100.0 * AVG(h_acc_per_acc)) / COUNT(*)) as percentage_acc_per_model FROM accidents GROUP BY model;",
    "reference_sql": "SELECT model, (SUM(accidents) OVER (PARTITION BY model) * 100.0 / (SELECT SUM(accidents) FROM aerospace.aircraft)) as accident_percentage FROM aerospace.aircraft;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses AVG(h_acc_per_acc) and COUNT with an undefined column instead of computing count per model divided by total accidents"
    }
  },
  {
    "example_id": 527,
    "prompt": "Delete the 'Forest Friends' program record in the 'education_programs' table",
    "generated_sql": "DELETE FROM education_programs WHERE name = 'Forest Friends';",
    "reference_sql": "DELETE FROM education_programs WHERE name = 'Forest Friends';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 528,
    "prompt": "Determine the total population of each animal",
    "generated_sql": "SELECT animal_id, SUM(population) FROM animal_population GROUP BY animal_id;",
    "reference_sql": "SELECT animal, SUM(population) FROM animal_population GROUP BY animal;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 529,
    "prompt": "Find the total population of each animal species in the reserve, ordered by total population in descending order.",
    "generated_sql": "SELECT a.name, SUM(a.population) as total_population FROM animal_species_arrivals a GROUP BY a.name ORDER BY total_population DESC;",
    "reference_sql": "SELECT species, SUM(population) AS total_population FROM animal_population GROUP BY species ORDER BY total_population DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 530,
    "prompt": "What is the maximum feeding rate by feed type and farm size?",
    "generated_sql": "SELECT type, farm_size, MAX(feeding_rate) FROM feeding_rates;",
    "reference_sql": "SELECT Feed.type, Farm.size, MAX(FeedingRate.rate) FROM Feed INNER JOIN FeedingRate ON Feed.id = FeedingRate.feed_id INNER JOIN Farm ON FeedingRate.farm_id = Farm.id GROUP BY Feed.type, Farm.size;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY clause for type and farm_size"
    }
  },
  {
    "example_id": 531,
    "prompt": "What is the total biomass of fish in each farming region?",
    "generated_sql": "SELECT f.region, SUM(fb.biomass) FROM farms f JOIN fish_farms fb ON f.farm_id = fb.farm_id GROUP BY f.region;",
    "reference_sql": "SELECT RegionName, SUM(Biomass) FROM FarmingRegions GROUP BY RegionName;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 532,
    "prompt": "Determine the percentage of funding for each program",
    "generated_sql": "SELECT program, 100.0 * SUM(amount) as percentage FROM funding GROUP BY program;",
    "reference_sql": "SELECT p.name, (SUM(f.amount)/(SELECT SUM(amount) FROM program_funding))*100 AS percentage FROM program_funding f JOIN programs p ON f.program_id = p.id GROUP BY p.id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing division by total funding to calculate percentage"
    }
  },
  {
    "example_id": 533,
    "prompt": "How many dance performances had more than 50 attendees?",
    "generated_sql": "SELECT COUNT(*) FROM dance_performances WHERE total_attendees > 50;",
    "reference_sql": "SELECT COUNT(*) FROM dance WHERE num_attendees > 50;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 534,
    "prompt": "What is the total funding received by dance programs in urban areas?",
    "generated_sql": "SELECT SUM(funding) FROM DancePrograms WHERE location LIKE '%urban%';",
    "reference_sql": "SELECT SUM(funding.amount) FROM arts_culture.funding JOIN arts_culture.programs ON funding.program_id = programs.program_id WHERE programs.location = 'urban' AND programs.category = 'dance';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 535,
    "prompt": "Insert a new TV show into the database?",
    "generated_sql": "INSERT INTO TV_Shows (ID, Title, Genre, YearCreated) VALUES (1, 'Dumb and Dumber', 'Movies', 2018);",
    "reference_sql": "INSERT INTO tv_shows (id, title, genre, viewership) VALUES (4, 'Show7', 'Crime', 5000000);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserts a movie record ('Dumb and Dumber') into a TV_Show table instead of a TV show"
    }
  },
  {
    "example_id": 536,
    "prompt": "Delete records from the 'communication_campaigns' table where the 'start_date' is before 2010-01-01",
    "generated_sql": "DELETE FROM communication_campaigns WHERE start_date < '2010-01-01';",
    "reference_sql": "DELETE FROM communication_campaigns WHERE start_date < '2010-01-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 537,
    "prompt": "How many climate communication projects were initiated before 2018 in the European region?",
    "generated_sql": "SELECT COUNT(*) FROM climate_communication WHERE region = 'European' AND year < 2018;",
    "reference_sql": "SELECT COUNT(*) FROM climate_communication_projects WHERE start_year < 2018 AND region = 'Europe';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 538,
    "prompt": "Update the 'infection_rates' table with new data",
    "generated_sql": "UPDATE infection_rates SET infection_rate = 0.75 WHERE diagnosis = 'Lymphoma';",
    "reference_sql": "UPDATE infection_rates SET infection_rate = 5.7 WHERE state = 'Texas';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The update specifics are not provided; it only updates one diagnosis without context"
    }
  },
  {
    "example_id": 539,
    "prompt": "What is the obesity prevalence in Australia?",
    "generated_sql": "SELECT obesity_pct FROM obesity_prevalence WHERE country = 'Australia';",
    "reference_sql": "SELECT metric_value FROM health_metrics WHERE metric_type = 'Obesity Prevalence' AND country_id = (SELECT id FROM countries WHERE name = 'Australia');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 540,
    "prompt": "What is the average diversity metric for companies founded in the same year as the company with the highest funding amount?",
    "generated_sql": "SELECT AVG(diversity_metric) FROM company WHERE founding_year = (SELECT founding_year FROM company WHERE company_name = 'GreenTech') AND company_id IN (SELECT company_id FROM company WHERE company_name = 'GreenTech');",
    "reference_sql": "SELECT AVG(diversity_metric) FROM companies WHERE YEAR(founding_date) = (SELECT YEAR(founding_date) FROM companies WHERE funding_amount = (SELECT MAX(funding_amount) FROM funding_records JOIN companies ON funding_records.company_id = companies.id));",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters by a specific company_name and company_id instead of selecting the company with the highest funding_amount"
    }
  },
  {
    "example_id": 541,
    "prompt": "What is the total area of farmland for each crop type?",
    "generated_sql": "SELECT crop_type, SUM(area) as total_area FROM crop_areas GROUP BY crop_type;",
    "reference_sql": "SELECT name, SUM(area_in_hectares) FROM crop GROUP BY name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 542,
    "prompt": "Which farmers are located in Asia?",
    "generated_sql": "SELECT name FROM Farmers WHERE location = 'Asia';",
    "reference_sql": "SELECT * FROM Farmers WHERE location = 'Asia';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 543,
    "prompt": "What is the average disability accommodation cost per program by state, ordered from highest to lowest?",
    "generated_sql": "SELECT state, AVG(cost) FROM Programs GROUP BY state ORDER BY AVG(cost) DESC;",
    "reference_sql": "SELECT AVG(Cost) as Avg_Cost, State FROM Disability_Accommodations GROUP BY State ORDER BY Avg_Cost DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 544,
    "prompt": "What is the regulatory status of digital assets that have been involved in more than 1000 transactions?",
    "generated_sql": "SELECT regulatory_status FROM Digital_Assets WHERE transactions > 1000;",
    "reference_sql": "SELECT d.asset_name, d.status FROM digital_assets_regulatory d JOIN (SELECT asset_id, COUNT(transaction_id) as transaction_count FROM transactions GROUP BY asset_id) t ON d.asset_id = t.asset_id WHERE t.transaction_count > 1000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 545,
    "prompt": "What is the minimum age of a tree in the Trees table?",
    "generated_sql": "SELECT MIN(age) FROM Trees;",
    "reference_sql": "SELECT MIN(age) FROM Trees;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 546,
    "prompt": "What is the total revenue of organic cosmetics sold in the UK in Q3 2021?",
    "generated_sql": "SELECT SUM(revenue) FROM sales WHERE category = 'Cosmetics' AND country = 'UK' AND description LIKE '%Organic%';",
    "reference_sql": "SELECT SUM(QuantitySold * Price) FROM Cosmetics_Sales WHERE Organic = 1 AND SaleDate >= '2021-07-01' AND SaleDate <= '2021-09-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for Q3 2021 date range"
    }
  },
  {
    "example_id": 547,
    "prompt": "What is the total sales revenue of organic skincare products?",
    "generated_sql": "SELECT SUM(revenue) FROM sales WHERE product_type ='skincare' AND is_organic = TRUE;",
    "reference_sql": "SELECT SUM(revenue) FROM SkincareSales WHERE is_organic = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 548,
    "prompt": "What is the total number of emergency incidents by type in 2022 in Portland?\"",
    "generated_sql": "SELECT type, SUM(incidents) AS total_incidents FROM emergency_incidents WHERE city = 'Petersburg' AND YEAR(incident_date) = 2022 GROUP BY type;",
    "reference_sql": "SELECT type, COUNT(*) as total FROM emergency_incidents WHERE city = 'Portland' AND incident_date >= '2022-01-01' AND incident_date < '2023-01-01' GROUP BY type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters for city 'Petersburg' instead of 'Portland'"
    }
  },
  {
    "example_id": 549,
    "prompt": "How many clients have a compliance status of 'Non-compliant'?",
    "generated_sql": "SELECT COUNT(*) FROM clients C JOIN compliance_status CSP ON C.client_id = CSP.client_id WHERE C.compliance_status = 'Non-compliant';",
    "reference_sql": "SELECT COUNT(*) as number_of_non_compliant_clients FROM regulatory_compliance WHERE compliance_status = 'Non-compliant';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary join and potential duplicate counts; should count directly from clients where compliance_status='Non-compliant'."
    }
  },
  {
    "example_id": 550,
    "prompt": "What are the names and locations of factories with unethical labor practices?",
    "generated_sql": "SELECT factory_name, location FROM factory_labor_practices WHERE practice = 'Ethical';",
    "reference_sql": "SELECT name, location FROM factories WHERE practices = 'unethical';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters for practice = 'Ethical' instead of 'Unethical' factories."
    }
  },
  {
    "example_id": 551,
    "prompt": "What is the average age of all female individuals from the 'ancient_burials' table?",
    "generated_sql": "SELECT AVG(age) FROM ancient_burials WHERE gender = 'Female';",
    "reference_sql": "SELECT AVG(age) FROM ancient_burials WHERE gender = 'Female';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 552,
    "prompt": "How many social impact investments were made in India in 2020?",
    "generated_sql": "SELECT SUM(investment_value) FROM social_impact_investments WHERE country = 'India' AND year = 2020;",
    "reference_sql": "SELECT COUNT(*) FROM investments WHERE investment_year = 2020 AND country = 'India' AND investment_type = 'social impact';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums investment_value instead of counting the number of investments"
    }
  },
  {
    "example_id": 553,
    "prompt": "How many military personnel are in each department in the 'MilitaryPersonnel' table?",
    "generated_sql": "SELECT Department, COUNT(*) FROM MilitaryPersonnel GROUP BY Department;",
    "reference_sql": "SELECT department, COUNT(*) FROM MilitaryPersonnel GROUP BY department;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 554,
    "prompt": "List all the unique song-genre combinations, based on the 'genre' and 'song' tables, with no duplicates.",
    "generated_sql": "SELECT DISTINCT genre, song FROM genre_and_song WHERE genre NOT IN ('Genre 1', 'Genre 2', 'Genre 3') GROUP BY genre, song;",
    "reference_sql": "SELECT DISTINCT s.song_id, g.genre_id FROM genre g INNER JOIN song s ON g.genre_id = s.genre_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary WHERE filter excludes genres not specified in the request"
    }
  },
  {
    "example_id": 555,
    "prompt": "What is the average revenue per stream for the \"Rock\" genre?",
    "generated_sql": "SELECT AVG(revenue) FROM streams WHERE genre = 'Rock'",
    "reference_sql": "SELECT total_revenue / total_streams AS avg_revenue_per_stream FROM genre_revenue WHERE genre = 'Rock';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 556,
    "prompt": "What is the percentage of plays for each track on a given playlist, ordered from highest to lowest?",
    "generated_sql": "SELECT track, SUM(playoffs) OVER (PARTITION BY playlist_id ORDER BY playtime_date) * 100.0 / SUM(playoffs) AS percentage FROM play_records GROUP BY track;",
    "reference_sql": "SELECT * FROM percentage_of_plays;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses a running window sum instead of total per playlist and lacks filtering and ordering, miscalculating percentages."
    }
  },
  {
    "example_id": 557,
    "prompt": "How many volunteers signed up for each program in the last week?",
    "generated_sql": "SELECT program_id, COUNT(*) as num_volunteers FROM volunteers_data WHERE signed_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY program_id;",
    "reference_sql": "SELECT COUNT(VolunteerID) AS NumVolunteers, Programs.ProgramName FROM Volunteers INNER JOIN Programs ON Volunteers.ProgramID = Programs.ProgramID WHERE VolunteerDate >= DATEADD(week, -1, GETDATE()) GROUP BY Programs.ProgramName",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 558,
    "prompt": "How many professional development courses were completed by teachers in the English department?",
    "generated_sql": "SELECT COUNT(*) FROM professional_development WHERE department = 'English' AND completion_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT d.department_name, COUNT(c.course_id) FROM course_enrollment ce INNER JOIN teachers t ON ce.teacher_id = t.teacher_id INNER JOIN departments d ON t.department_id = d.department_id WHERE d.department_name = 'English';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query includes an arbitrary date filter not specified in the question"
    }
  },
  {
    "example_id": 559,
    "prompt": "What is the average mental health score for male teachers?",
    "generated_sql": "SELECT AVG(mental_health_score) FROM teachers WHERE gender = 'Male';",
    "reference_sql": "SELECT AVG(m.mental_health_score) as average_score FROM teachers t JOIN teacher_mental_health m ON t.id = m.teacher_id WHERE t.gender = 'Male';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 560,
    "prompt": "What is the average mental health score of female students?",
    "generated_sql": "SELECT AVG(mental_health_score) FROM students WHERE gender = 'female';",
    "reference_sql": "SELECT AVG(s.mental_health_score) as avg_mental_health_score FROM students s WHERE s.gender = 'Female';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 561,
    "prompt": "What is the distribution of mental health scores for students in each grade?",
    "generated_sql": "SELECT grade, SUM(score) as total_score FROM mental_health GROUP BY grade;",
    "reference_sql": "SELECT grade, AVG(mental_health_score) AS avg_score, STDDEV(mental_health_score) AS stddev_score FROM student_grades GROUP BY grade;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It sums scores per grade instead of showing the distribution (e.g., count of each score by grade)"
    }
  },
  {
    "example_id": 562,
    "prompt": "What is the minimum salary for each job title in the IT department?",
    "generated_sql": "SELECT job_title, MIN(salary) FROM job_titles JOIN job_salaries ON job_titles.id = job_salaries.job_title WHERE job_salaries.department = 'IT' GROUP BY job_title;",
    "reference_sql": "SELECT JobTitle, MIN(EmployeeSalary) FROM JobSalaries WHERE Department = 'IT' GROUP BY JobTitle;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 563,
    "prompt": "Delete records in the \"power_plants\" table where the \"fuel_type\" is 'coal' and the \"capacity_mw\" is less than 100",
    "generated_sql": "DELETE FROM power_plants WHERE fuel_type = 'coal' AND capacity_mw < 100;",
    "reference_sql": "DELETE FROM power_plants WHERE fuel_type = 'coal' AND capacity_mw < 100;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 564,
    "prompt": "What is the total energy storage capacity (GWh) added in Australia and Canada since 2018?",
    "generated_sql": "SELECT SUM(capacity) FROM energy_storage WHERE country IN ('Australia', 'Canada') AND year = 2018;",
    "reference_sql": "SELECT SUM(capacity) FROM energy_storage WHERE country IN ('Australia', 'Canada') AND year >= 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters year = 2018 instead of including all years since 2018 (>= 2018)"
    }
  },
  {
    "example_id": 565,
    "prompt": "What is the total number of hours volunteered for 'Women Empowerment' programs in '2019'?",
    "generated_sql": "SELECT SUM(VolunteerAttendance) FROM Volunteers WHERE Program = 'Women Empowerment' AND Year = 2019;",
    "reference_sql": "SELECT SUM(Volunteer_Hours.hours_donated) FROM Volunteer_Hours INNER JOIN Volunteers ON Volunteer_Hours.volunteer_id = Volunteers.volunteer_id WHERE Volunteer_Hours.program_area = 'Women Empowerment' AND YEAR(Volunteer_Hours.volunteer_date) = 2019;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 566,
    "prompt": "How many labor violations have been reported in the supply chain for vegan leather products?",
    "generated_sql": "SELECT COUNT(*) as num_violations FROM labor_violations WHERE product_type = 'leather' AND vegan = true AND cruelty_free = true;",
    "reference_sql": "SELECT COUNT(*) FROM VeganLeatherSupplyChain WHERE labor_violation = 'yes';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "The query unnecessarily filters on cruelty_free, which is not requested"
    }
  },
  {
    "example_id": 567,
    "prompt": "What is the total revenue generated from the sales of products made from recycled materials in the North American market?",
    "generated_sql": "SELECT SUM(revenue) FROM sales WHERE product_type = 'Recycled Material' AND country = 'North America';",
    "reference_sql": "SELECT SUM(sales.quantity * products.price) FROM sales JOIN products ON sales.product_id = products.product_id WHERE products.market = 'North America' AND products.material LIKE '%recycled%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters country = 'North America' instead of using a region column or including all North American countries"
    }
  },
  {
    "example_id": 568,
    "prompt": "What is the total number of likes received by posts containing the hashtag \"#climateaction\" in India, in the past month, and how many of these posts were sponsored?",
    "generated_sql": "SELECT COUNT(DISTINCT post_id) as total_likes, COUNT(*) as number_of_likes FROM posts WHERE hashtags IN ('#climateaction', '#climateaction', '#climateaction', '#climateaction', '#climateaction', '#climateaction') AND sponsored = TRUE AND date BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT SUM(likes) as total_likes, SUM(sponsored) as sponsored_posts FROM posts WHERE hashtags LIKE '%#climateaction%' AND country = 'India' AND created_at > NOW() - INTERVAL '1 month';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by India, uses COUNT instead of summing likes, and only retrieves sponsored posts without the total likes or sponsored post count correctly."
    }
  },
  {
    "example_id": 569,
    "prompt": "What is the total number of posts made by users from the top 3 countries with the most followers?",
    "generated_sql": "SELECT COUNT(*) FROM users WHERE country IN ('USA', 'Canada', 'Mexico') AND followers >= 3;",
    "reference_sql": "SELECT COUNT(*) as total_posts FROM posts INNER JOIN (SELECT country, MAX(followers) as max_followers FROM users GROUP BY country LIMIT 3) as top_countries ON posts.user_id = top_countries.country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts users instead of posts and uses hard\u2010coded countries and follower filter instead of computing top 3 countries by followers"
    }
  },
  {
    "example_id": 570,
    "prompt": "What was the average number of comments per post in Oceania in the last month?",
    "generated_sql": "SELECT AVG(posts.count) FROM posts INNER JOIN comments ON posts.id = comments.post_id WHERE posts.location = 'Oceania' AND posts.comment_count = (SELECT AVG(posts.count) FROM posts WHERE posts.location = 'Oceania')",
    "reference_sql": "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by last month, uses non-existent posts.count and mistakenly filters posts by average comment_count instead of computing the average comments per post"
    }
  },
  {
    "example_id": 571,
    "prompt": "What is the maximum number of items of clothing produced per week by factories in Bangladesh and Vietnam, and how many factories can produce that many items?",
    "generated_sql": "SELECT MAX(CASE WHEN Month = '6' THEN 1 ELSE 0 END) AS week, COUNT(*) FROM Bangladesh_Clothing WHERE Country = 'Bangladesh' OR Country = 'Vietnam' GROUP BY week;",
    "reference_sql": "SELECT MAX(items_per_week) as max_items, COUNT(*) as num_factories FROM factory_production WHERE country IN ('Bangladesh', 'Vietnam') HAVING items_per_week = MAX(items_per_week);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query does not calculate maximum weekly production or count factories at that maximum"
    }
  },
  {
    "example_id": 572,
    "prompt": "What is the total amount of socially responsible loans issued by financial institutions in the European region for the year 2021?",
    "generated_sql": "SELECT SUM(Amount) as Total_Amount FROM SocialResponsibleLoan WHERE Region = 'Europe' AND YEAR(IssuanceDate) = 2021;",
    "reference_sql": "SELECT SUM(loan_amount) FROM loans JOIN financial_institutions ON loans.institution_id = financial_institutions.institution_id WHERE region = 'Europe' AND EXTRACT(YEAR FROM issue_date) = 2021 AND loans.loan_amount IN (SELECT loan_amount FROM loans WHERE loan_amount >= 0);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 573,
    "prompt": "What was the total amount donated by individuals in the US in Q2 2022?",
    "generated_sql": "SELECT SUM(amount) FROM donations WHERE donor_country = 'USA' AND donation_date BETWEEN '2022-04-01' AND '2022-06-30';",
    "reference_sql": "SELECT SUM(donation_amount) FROM donors WHERE country = 'USA' AND donation_date BETWEEN '2022-04-01' AND '2022-06-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for individual donors (donor_type = 'individual')"
    }
  },
  {
    "example_id": 574,
    "prompt": "Which warehouse has the lowest quantity of item 'ORG-01'?",
    "generated_sql": "SELECT warehouse_id, MIN(quantity) as min_quantity FROM warehouses WHERE item = 'ORG-01' GROUP BY warehouse_id;",
    "reference_sql": "SELECT warehouse_id, MIN(quantity) FROM inventory WHERE item_code = 'ORG-01' GROUP BY warehouse_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query returns the minimum for each warehouse instead of selecting the single warehouse with the overall lowest quantity of 'ORG-01'."
    }
  },
  {
    "example_id": 575,
    "prompt": "Find the total number of virtual tour bookings by users from Asia?",
    "generated_sql": "SELECT COUNT(*) FROM virtual_tours WHERE user_country IN ('USA', 'China', 'India', 'Japan', 'Pakistan', 'Argentina', 'South Korea', 'Japan') AND booking_date >= '2022-01-01';",
    "reference_sql": "SELECT COUNT(*) FROM user_bookings JOIN user_profiles ON user_bookings.user_id = user_profiles.user_id WHERE user_profiles.region = 'Asia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters include non-Asian countries and unnecessary date constraint not in request"
    }
  },
  {
    "example_id": 576,
    "prompt": "What is the maximum revenue generated by eco-tours in a single month in 2022?",
    "generated_sql": "SELECT MAX(revenue) FROM eco_tours WHERE year = 2022 AND eco_tour_type = 'Eco-Tour';",
    "reference_sql": "SELECT MAX(monthly_revenue) FROM (SELECT EXTRACT(MONTH FROM tour_date) AS month, SUM(revenue) AS monthly_revenue FROM eco_tours WHERE YEAR(tour_date) = 2022 GROUP BY EXTRACT(MONTH FROM tour_date)) AS subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not compute monthly totals and incorrectly filters by eco_tour_type instead of summing revenue per month"
    }
  },
  {
    "example_id": 577,
    "prompt": "Show the distribution of hotel tech adoption timelines in South America.",
    "generated_sql": "SELECT country, AVG(tech_adoption_date) as avg_tech_adoption_date, DATE_TRUNC('day', tech_adoption_date) as tech_adoption_date_day as tech_adoption_date_day FROM tech_adoption WHERE country = 'South America' GROUP BY country;",
    "reference_sql": "SELECT YEAR(adoption_date) as adoption_year, COUNT(hotel_id) as num_hotels FROM tech_adoption WHERE location = 'South America' GROUP BY adoption_year",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering for country = 'South America' is incorrect and using AVG on dates does not produce a distribution"
    }
  },
  {
    "example_id": 578,
    "prompt": "How many works were exhibited in the year 1950?",
    "generated_sql": "SELECT COUNT(*) FROM works JOIN exhibits ON works.id = exhibits.work_id WHERE exhibition_year = 1950 AND exhibition_type = 'Art';",
    "reference_sql": "SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query adds an unnecessary filter on exhibition_type and counts all rows rather than distinct works, potentially miscounting duplicates."
    }
  },
  {
    "example_id": 579,
    "prompt": "What is the average founding year of all art galleries in the database?",
    "generated_sql": "SELECT AVG(founding_year) FROM galleries WHERE city = 'Los Angeles';",
    "reference_sql": "SELECT AVG(founding_year) FROM art_galleries;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters galleries by Los Angeles, but the question asks for all art galleries without any city restriction."
    }
  },
  {
    "example_id": 580,
    "prompt": "What is the total value of all 'Expressionist' artworks?",
    "generated_sql": "SELECT SUM(value) FROM ExpressionistArtworks;",
    "reference_sql": "SELECT SUM(price) FROM Artworks WHERE style = 'Expressionist';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses a nonstandard table instead of filtering Artworks by style='Expressionist'"
    }
  },
  {
    "example_id": 581,
    "prompt": "Add a record for a depression screening campaign",
    "generated_sql": "INSERT INTO depression_screening_campaigns (campaign_id, campaign_name, campaign_type, date) VALUES (1, 'Depression Screening', 'Depression Screening', '2022-01-01');",
    "reference_sql": "INSERT INTO public_awareness_campaigns (id, name, description, start_date, end_date) VALUES (1, 'Depression Screening Campaign', 'A nationwide campaign aimed at increasing depression awareness and screening.', '2022-05-01', '2022-05-31');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 582,
    "prompt": "Find the average age of patients who received group therapy in India?",
    "generated_sql": "SELECT AVG(age) FROM patients WHERE group_therapy = TRUE;",
    "reference_sql": "SELECT AVG(age) FROM patient_demographics WHERE treatment = 'Group' AND country = 'India';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for patients in India"
    }
  },
  {
    "example_id": 583,
    "prompt": "Which projects were completed before 2022 in the Transportation_Infrastructure table?",
    "generated_sql": "SELECT name FROM Transportation_Infrastructure WHERE completion_date < '2022-01-01';",
    "reference_sql": "SELECT project_name FROM Transportation_Infrastructure WHERE completion_date < '2022-01-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 584,
    "prompt": "Which destinations had more than 50 international tourists in 2020 and 2021?",
    "generated_sql": "SELECT destination_name FROM international_tourists WHERE year IN (2020, 2021) AND year > 2020 ORDER BY number_of_tourists DESC;",
    "reference_sql": "SELECT country FROM tourism_stats WHERE visitors > 50 AND year IN (2020, 2021) GROUP BY country HAVING COUNT(DISTINCT year) = 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only 2021 and omits the >50 threshold and checking both years"
    }
  },
  {
    "example_id": 585,
    "prompt": "Update the name of the research vessel 'RV Ocean Explorer' to 'RV Ocean Guardian'.",
    "generated_sql": "UPDATE research_vessels SET name = 'RV Ocean Guardian' WHERE name = 'RV Ocean Guardian';",
    "reference_sql": "UPDATE research_vessels SET name = 'RV Ocean Guardian' WHERE name = 'RV Ocean Explorer';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "WHERE clause filters on the new name instead of the old name"
    }
  },
  {
    "example_id": 586,
    "prompt": "Which countries have no military equipment sales from any defense contractors?",
    "generated_sql": "SELECT country FROM equipment_sales WHERE country = 'Canada' OR country = 'Australia' OR country = 'Brazil' OR country = 'India' OR country = 'Japan' OR country = 'India';",
    "reference_sql": "SELECT country FROM military_equipment_sales GROUP BY country HAVING COUNT(*) = 0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query hardcodes specific countries instead of selecting those with no sales from data"
    }
  },
  {
    "example_id": 587,
    "prompt": "What is the total revenue for concerts in Canada for artists who identify as non-binary and are from Asia in 2023?",
    "generated_sql": "SELECT SUM(Revenue) FROM Concerts WHERE Country IN ('Canada', 'Canada', 'Canada', 'Canada') AND ArtistID IN (SELECT ArtistID FROM Artists WHERE Gender = 'Non-binary') AND ConcertDate BETWEEN '2023-01-01' AND '2023-12-31';",
    "reference_sql": "SELECT SUM(revenue) FROM concert_events ce JOIN artist_demographics ad ON ce.artist_id = ad.artist_id WHERE ce.country = 'Canada' AND ad.gender = 'non-binary' AND ad.ethnicity = 'Asian' AND ce.event_date BETWEEN '2023-01-01' AND '2023-12-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for artists from Asia and incorrect filtering of concerts in Canada (no join to venues); redundant country list."
    }
  },
  {
    "example_id": 588,
    "prompt": "What is the total revenue from concert ticket sales for artists who identify as transgender, in the last year?",
    "generated_sql": "SELECT SUM(revenue) FROM concert_sales WHERE artist = 'T' AND year BETWEEN (SELECT MAX(year) - 1 FROM concert_sales) AND (SELECT MAX(year) - 1 FROM concert_sales) AND gender = 'Transgender';",
    "reference_sql": "SELECT SUM(revenue) FROM concerts INNER JOIN artists ON concerts.artist_id = artists.id WHERE artists.gender LIKE '%transgender%' AND concert_date >= NOW() - INTERVAL 1 YEAR;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters on artist='T' and uses redundant year BETWEEN logic instead of filtering the last year; it should only filter gender='Transgender' for last year"
    }
  },
  {
    "example_id": 589,
    "prompt": "Find the top 5 donors by summed donation amounts for each country?",
    "generated_sql": "SELECT donor_name, SUM(donation_amount) as total_donation FROM donors GROUP BY donor_name ORDER BY SUM(donation_amount) DESC LIMIT 5;",
    "reference_sql": "SELECT d.Country, d.DonorID, SUM(donations.Amount) AS TotalDonated FROM Donors d JOIN Donations ON d.DonorID = Donations.DonorID GROUP BY d.Country, d.DonorID ORDER BY TotalDonated DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not group by country or select top 5 per country"
    }
  },
  {
    "example_id": 590,
    "prompt": "Insert new records into the game_sessions table with the following data: (1, 1, 'Deathmatch', 1), (2, 2, 'Team Deathmatch', 2), (3, 3, 'Free for All', 3)",
    "generated_sql": "INSERT INTO game_sessions (session_id, game_name, game_start_date, game_end_date) VALUES (1, 'Deathmatch', '2022-01-01', '2022-01-01');",
    "reference_sql": "INSERT INTO game_sessions (session_id, player_id, game_mode, map_id) VALUES (1, 1, 'Deathmatch', 1), (2, 2, 'Team Deathmatch', 2), (3, 3, 'Free for All', 3);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only one record inserted and columns do not match the requested data"
    }
  },
  {
    "example_id": 591,
    "prompt": "Count the number of images taken for each crop variety in the month of June",
    "generated_sql": "SELECT cvs.variety_name, COUNT(*) FROM crop_variety_count cvs JOIN (SELECT crop_name FROM crop_variety WHERE MONTH(crop_date) = 1) as month_crop_count ON cvs.variety_name = month_crop_count.variety_name WHERE month_crop_count.month = 6 GROUP BY cvs.variety_name;",
    "reference_sql": "SELECT crop_variety, COUNT(*) as total_images FROM images WHERE MONTH(timestamp) = 6 GROUP BY crop_variety;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The subquery filters MONTH(crop_date)=1 instead of 6 and references non-existent columns (month and variety_name) leading to incorrect joins"
    }
  },
  {
    "example_id": 592,
    "prompt": "How many public healthcare facilities and public parks are there in total, in the 'StateData' schema's 'StateHealthcare' and 'StateParks' tables?",
    "generated_sql": "SELECT COUNT(*) FROM StateHealthcare WHERE state = 'Oregon'; SELECT COUNT(*) FROM StateParks WHERE state = 'Oregon';",
    "reference_sql": "SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Applies a state filter and returns separate counts instead of summing all records across both tables"
    }
  },
  {
    "example_id": 593,
    "prompt": "What was the average citizen feedback score for District C and D in 2022?",
    "generated_sql": "SELECT AVG(CASE WHEN District = 'C' THEN Feedback_Score ELSE 0 THEN 1 END) + AVG(CASE WHEN District = 'D' THEN Feedback_Score ELSE 0 END) AS Average_Feedback_Score FROM Districts WHERE Year = 2022;",
    "reference_sql": "SELECT AVG(Score) FROM CitizenFeedback WHERE District IN ('District C', 'District D') AND Year = 2022;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Invalid CASE syntax and sums two averages including zeros instead of computing the average feedback correctly for districts C and D"
    }
  },
  {
    "example_id": 594,
    "prompt": "Increase the price of Promethium in Canada by 15% for 2022 and later.",
    "generated_sql": "UPDATE price SET price = price * 1.15 WHERE name = 'Promethium' AND country = 'Canada' AND year = 2022;",
    "reference_sql": "UPDATE prices SET price = price * 1.15 WHERE element = 'Promethium' AND country = 'Canada' AND year >= 2022;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The WHERE clause uses year = 2022 instead of year >= 2022, so it does not update years after 2022."
    }
  },
  {
    "example_id": 595,
    "prompt": "Insert new records for the rare earth elements gadolinium and terbium into the production table",
    "generated_sql": "INSERT INTO production ( element, production_date, production_volume) VALUES ('gadolinium', '2022-08-01', 100000000000000000000), ('terbium', '2022-08-01', 10000000000000000000000000000000);",
    "reference_sql": "INSERT INTO production (element, quantity, production_date) VALUES ('gadolinium', 150, '2015-03-17'), ('terbium', 200, '2016-06-23');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Arbitrary and unrealistic production_volume values are used without specification"
    }
  },
  {
    "example_id": 596,
    "prompt": "What is the minimum energy production cost of wind farms in Spain?",
    "generated_sql": "SELECT MIN(cost) FROM energy_production WHERE country = 'Spain';",
    "reference_sql": "SELECT MIN(energy_production_cost) FROM wind_farm_costs WHERE country = 'Spain';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for wind farms"
    }
  },
  {
    "example_id": 597,
    "prompt": "Show the number of workers in factories that have passed the ethical labor audit.",
    "generated_sql": "SELECT COUNT(*) as workers_passed FROM factories WHERE ethical_audit = true;",
    "reference_sql": "SELECT COUNT(DISTINCT workers.worker_id) FROM workers INNER JOIN factories ON workers.factory_id = factories.id WHERE factories.audit_passed = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "COUNT(*) returns number of factories, not sum of workers in those factories"
    }
  },
  {
    "example_id": 598,
    "prompt": "What is the total quantity of product A sold in all stores?",
    "generated_sql": "SELECT SUM(quantity) FROM sales WHERE category = 'Product A';",
    "reference_sql": "SELECT SUM(quantity) FROM WAREHOUSE WHERE product = 'Product A';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on category instead of the product field"
    }
  },
  {
    "example_id": 599,
    "prompt": "What is the average severity of vulnerabilities found in the last quarter for each product?",
    "generated_sql": "SELECT p.product_name, AVG(v.severity) as avg_severity FROM vulnerabilities v JOIN products p ON v.product_id = p.product_id WHERE v.severity_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY p.product_name;",
    "reference_sql": "SELECT product, AVG(case when vulnerability_severity = 'High' then 3 when vulnerability_severity = 'Medium' then 2 when vulnerability_severity = 'Low' then 1 else 0 end) as avg_severity FROM vulnerabilities WHERE timestamp >= NOW() - INTERVAL 3 MONTH GROUP BY product;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause filters from the start of the current quarter rather than the previous quarter period"
    }
  },
  {
    "example_id": 600,
    "prompt": "What is the total number of vulnerabilities found in the 'Finance' department?",
    "generated_sql": "SELECT COUNT(*) FROM vulnerabilities WHERE department = 'Finance';",
    "reference_sql": "SELECT COUNT(*) FROM vulnerabilities WHERE department_id = (SELECT id FROM department WHERE name = 'Finance');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 601,
    "prompt": "What is the average number of trips per day on public transportation in Tokyo and Seoul?",
    "generated_sql": "SELECT AVG(trips) FROM (SELECT city, EXTRACT(DAY FROM trip_date) as day, COUNT(DISTINCT trip_id) as trips FROM public_transportation WHERE city = 'Tokyo' GROUP BY city, EXTRACT(DAY FROM trip_date) ORDER BY day) AS subquery;",
    "reference_sql": "SELECT city, AVG(trips) FROM daily_trips GROUP BY city, day ORDER BY day;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only includes Tokyo, missing Seoul"
    }
  },
  {
    "example_id": 602,
    "prompt": "What is the total number of electric vehicle sales for each city?",
    "generated_sql": "SELECT city, SUM(sales) FROM electric_vehicles GROUP BY city;",
    "reference_sql": "SELECT city_id, SUM(sales) FROM electric_vehicles GROUP BY city_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 603,
    "prompt": "How many men's garments were sold in Mexico in Q4 2020?",
    "generated_sql": "SELECT sales.sold_count FROM sales JOIN garment_sales_q4_2020 WHERE sale_date BETWEEN '2020-04-01' AND '2020-04-30' AND garment_sales_q4_2020.sales.is_male = true AND garment_sales_q4_2020.sales.is_sold_count = 1;",
    "reference_sql": "SELECT SUM(sales_quantity) FROM mexico_mens_garments WHERE quarter = 4 AND year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect date range, missing Mexico filter, no aggregation, and invalid join syntax"
    }
  },
  {
    "example_id": 604,
    "prompt": "What is the total number of workers employed by unions in the 'manufacturing' sector?",
    "generated_sql": "SELECT COUNT(*) FROM unions WHERE sector ='manufacturing';",
    "reference_sql": "SELECT COUNT(*) FROM unions WHERE sector = 'manufacturing';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Used COUNT(*) instead of SUM of the worker count to calculate total number of workers"
    }
  },
  {
    "example_id": 605,
    "prompt": "What is the total number of vehicles sold in 'California' and 'Texas' in the 'sales' table?",
    "generated_sql": "SELECT SUM(num_sold) FROM sales WHERE city IN ('California', 'Texas');",
    "reference_sql": "SELECT SUM(vehicle_count) FROM sales WHERE region IN ('California', 'Texas');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using city instead of state for filtering California and Texas"
    }
  },
  {
    "example_id": 606,
    "prompt": "What is the maximum number of daily visitors for digital exhibitions in Mexico in 2022?",
    "generated_sql": "SELECT MAX(daily_visitors) FROM exhibitions WHERE country = 'Mexico' AND year = 2022;",
    "reference_sql": "SELECT MAX(visitors_per_day) FROM Digital_Exhibitions_Mexico WHERE year = 2022;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for digital exhibitions"
    }
  },
  {
    "example_id": 607,
    "prompt": "What was the recycling rate for 'Organic' and 'Electronic' waste types in 'UrbanArea' in 2020?",
    "generated_sql": "SELECT RecyclingRate FROM UrbanArea WHERE WasteType IN ('Organic', 'Electronic') AND RecyclingRate = 0;",
    "reference_sql": "SELECT waste_type, rate FROM recycling_rates WHERE location = 'UrbanArea' AND year = 2020 AND waste_type IN ('Organic', 'Electronic');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on RecyclingRate=0 instead of filtering by year=2020 and region='UrbanArea', and misses the year and region conditions"
    }
  },
  {
    "example_id": 608,
    "prompt": "What is the total number of algorithms in the 'AI_Safety' schema that have a complexity score lower than 5 and an accuracy score over 0.9?",
    "generated_sql": "SELECT COUNT(*) FROM ai_safety.algorithms WHERE complexity_score < 5 AND accuracy_score > 0.9;",
    "reference_sql": "SELECT COUNT(*) FROM AI_Safety.Algorithms WHERE complexity_score < 5 AND accuracy_score > 0.9;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 609,
    "prompt": "What is the average community development initiative budget per country, ordered by the largest budget?",
    "generated_sql": "SELECT country, AVG(budget) as avg_budget FROM CommunityDevelopmentBudget GROUP BY country ORDER BY avg_budget DESC;",
    "reference_sql": "SELECT CountryName, AVG(Budget) AS AvgBudget FROM Country JOIN CommunityDevelopment ON Country.CountryID = CommunityDevelopment.CountryID GROUP BY CountryName ORDER BY AvgBudget DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 610,
    "prompt": "What is the percentage of community development projects completed in 'Caribbean' in 2020?",
    "generated_sql": "SELECT (SUM(Projects.completed) / COUNT(*)) * 100 FROM Projects JOIN Countries ON Projects.country = Countries.country WHERE Countries.region = 'Caribbean' AND Projects.year = 2020 AND Projects.completed = 1;",
    "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM community_projects WHERE location = 'Caribbean')) FROM community_projects WHERE completion_year = 2020 AND location = 'Caribbean';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters completed=1 in WHERE instead of counting all projects and only summing completed ones; also missing filter for community development projects"
    }
  },
  {
    "example_id": 611,
    "prompt": "What is the success rate of agricultural innovation projects in rural areas of Indonesia?",
    "generated_sql": "SELECT success_rate FROM agricultural_innovation WHERE country = 'Indonesia' AND region = 'Rural';",
    "reference_sql": "SELECT 100.0 * SUM(success) / COUNT(*) FROM indonesia_projects WHERE location = 'rural';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not aggregate success_rate; needs to compute overall success rate (e.g., AVG) for rural Indonesia"
    }
  },
  {
    "example_id": 612,
    "prompt": "Which community development initiatives in Bangladesh received the most funding in 2020?",
    "generated_sql": "SELECT Initiative, Funding, COUNT(*) as FundingCount FROM Funding WHERE Funding = '2020' AND Region = 'Bangladesh' GROUP BY Initiative, Funding ORDER BY FundingCount DESC LIMIT 1;",
    "reference_sql": "SELECT initiative_name, MAX(funding) FROM initiatives WHERE country = 'Bangladesh' AND year = 2020 GROUP BY initiative_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on the funding column instead of year and uses COUNT(*) instead of summing funding amounts"
    }
  },
  {
    "example_id": 613,
    "prompt": "What is the total number of animals in protected habitats for each region?",
    "generated_sql": "SELECT region, COUNT(*) FROM animal_preservation.habitat_count GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(animal_id) FROM ProtectedHabitats GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "COUNT(*) counts rows rather than summing the number of animals; should use SUM on the animal count column"
    }
  },
  {
    "example_id": 614,
    "prompt": "Which community education programs are associated with habitats that need urgent preservation efforts?",
    "generated_sql": "SELECT program_name FROM community_education WHERE habitat = 'Habitat 1' AND urgency = 1;",
    "reference_sql": "SELECT e.coordinator_name FROM education_programs e INNER JOIN habitats h ON e.habitat_id = h.id WHERE h.preservation_status = 'Urgent';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only a single habitat ('Habitat 1') instead of all habitats needing urgent preservation"
    }
  },
  {
    "example_id": 615,
    "prompt": "How many arts education programs were funded by 'Montreal Arts Council' in 'Montreal' in 2021, and what was the total funding amount?",
    "generated_sql": "SELECT COUNT(*) as num_programs, COUNT(*) as num_funds FROM art_education WHERE funding_source = 'Montreal Arts Council' AND funding_year = 2021 AND program_category = 'Art' AND city = 'Montreal';",
    "reference_sql": "SELECT COUNT(*), SUM(total_funding) FROM Education WHERE city = 'Montreal' AND funding_source = 'Montreal Arts Council' AND year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Both fields use COUNT(*) and it does not compute the total funding amount via SUM(funding_amount)."
    }
  },
  {
    "example_id": 616,
    "prompt": "Insert new records for a community outreach program.",
    "generated_sql": "INSERT INTO community_outreach (id, outreach_program_id, location) VALUES (3, 3, 'New York');",
    "reference_sql": "INSERT INTO Programs (program_id, program_name, location, num_participants, impact_assessment) VALUES (5, 'Community Outreach', 'Chicago, IL', 35, 8.2);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only a single record is inserted rather than multiple new records as requested"
    }
  },
  {
    "example_id": 617,
    "prompt": "What is the median hourly wage for construction laborers in Louisiana?",
    "generated_sql": "SELECT MIN(wage) FROM hourly_wage WHERE state = 'Louisiana' AND wage NOT LIKE '%construction%';",
    "reference_sql": "SELECT AVG(hourly_wage) FROM la_wages WHERE job = 'Construction laborer';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses MIN instead of computing median and filters on wage text rather than occupation"
    }
  },
  {
    "example_id": 618,
    "prompt": "How many cases were won by attorney Patel in the last 2 years, categorized by practice area?",
    "generated_sql": "SELECT practice_area, COUNT(*) FROM cases WHERE case_id = (SELECT case_id FROM cases WHERE attorney_id = (SELECT attorney_id FROM attorneys WHERE practice_area = 'Practice Area A') OR attorney_id = (SELECT attorney_id FROM attorneys WHERE practice_area = 'Practice Area B')) GROUP BY practice_area;",
    "reference_sql": "SELECT practice_area, COUNT(*) FROM cases WHERE attorney_name = 'Patel' AND win_status = true AND case_date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR) GROUP BY practice_area;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by attorney Patel, won cases, or last 2 years, and uses incorrect subqueries for practice_area."
    }
  },
  {
    "example_id": 619,
    "prompt": "Update the billing rate for an attorney",
    "generated_sql": "UPDATE attorneys SET billing_rate = 80 WHERE name = 'John Doe';",
    "reference_sql": "UPDATE attorneys SET billable_rate = 225.00 WHERE name = 'John Lee';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query uses hardcoded name and rate without specifying the attorney or new rate as in the request"
    }
  },
  {
    "example_id": 620,
    "prompt": "Calculate the moving average of chemical waste production for each facility, for the last 6 months.",
    "generated_sql": "SELECT facility, AVG(waste_quantity) as moving_avg FROM waste_production WHERE production_date >= DATE_SUB( CURRENT_DATE, INTERVAL 6 MONTH ) GROUP BY facility;",
    "reference_sql": "SELECT facility_id, AVG(waste_amount) OVER (PARTITION BY facility_id ORDER BY date ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) as moving_average FROM facility_waste;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Returns only overall 6-month average per facility rather than moving averages over time"
    }
  },
  {
    "example_id": 621,
    "prompt": "Delete all records from the 'equipment' table where the 'equipment_type' is 'tank'",
    "generated_sql": "DELETE FROM equipment WHERE equipment_type = 'tank';",
    "reference_sql": "DELETE FROM equipment WHERE equipment_type = 'tank';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 622,
    "prompt": "How much have countries invested in climate communication in Asia?",
    "generated_sql": "SELECT SUM(investment) FROM climate_communication WHERE country LIKE '%Asia%' AND investment = (SELECT SUM(investment) FROM climate_communication WHERE country LIKE '%Asia%'));",
    "reference_sql": "SELECT SUM(Investment_Amount) FROM CommInvestment WHERE Country IN ('China', 'Japan', 'India') AND Investment_Amount IS NOT NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filter uses country LIKE '%Asia%' and adds investment = total sum, which is incorrect for summing investments in Asia"
    }
  },
  {
    "example_id": 623,
    "prompt": "List the names and funding amounts of the top 3 largest climate finance projects in 2019",
    "generated_sql": "SELECT project_name, funding_amount FROM climate_finance WHERE category = 'Climate' AND year = 2019 GROUP BY project_name, funding_amount ORDER BY funding_amount DESC LIMIT 3;",
    "reference_sql": "SELECT project_name, funding_amount FROM climate_finance WHERE year = 2019 ORDER BY funding_amount DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 624,
    "prompt": "What is the average budget for climate change mitigation projects in Europe, and which countries have the most mitigation projects?",
    "generated_sql": "SELECT country, AVG(budget) FROM climate_change.projects WHERE country IN ('Germany', 'France', 'Italy') GROUP BY country;",
    "reference_sql": "SELECT country, AVG(budget) FROM climate_projects_eu WHERE project_type = 'Mitigation' AND country IN ('Europe') GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only calculates average budget for three countries without filtering mitigation projects for all European countries and omits counting which countries have the most projects."
    }
  },
  {
    "example_id": 625,
    "prompt": "What is the combined attendance of the Climate Summit and the Adaptation Conference?",
    "generated_sql": "SELECT AVG(Attendance) FROM (SELECT AVG(Attendance) AS Avg_Attendance FROM Climate_Summit) AS Subquery, (SELECT AVG(Attendance) AS Avg_Attendance FROM Adaptation_Conference) AS Subquery FROM Climate_Summit + Adaptation_Conference;",
    "reference_sql": "SELECT SUM(attendance) FROM conferences WHERE name IN ('Climate Summit', 'Adaptation Conference');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query calculates averages instead of summing attendances and has incorrect FROM clause syntax."
    }
  },
  {
    "example_id": 626,
    "prompt": "What is the average R&D expenditure per clinical trial, ranked by average expenditure?",
    "generated_sql": "SELECT trial_name, AVG(expenditure) as avg_expenditure FROM clinical_trials GROUP BY trial_name ORDER BY avg_expenditure DESC;",
    "reference_sql": "SELECT Department, AVG(Expenditure), ROW_NUMBER() OVER (ORDER BY AVG(Expenditure) DESC) as ExpenseRank FROM RDExpenses GROUP BY Department;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 627,
    "prompt": "What was the average R&D expenditure for drugs approved in 2019?",
    "generated_sql": "SELECT AVG(expenditure) FROM rd_expenditure WHERE approval_year = 2019;",
    "reference_sql": "SELECT AVG(expenditure) FROM rd_expenditure WHERE year = 2019 AND status = 'approved';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 628,
    "prompt": "Find the number of medical research grants, by institution and year.",
    "generated_sql": "SELECT institution, year, COUNT(*) as num_grants FROM medical_research_grants GROUP BY institution, year;",
    "reference_sql": "SELECT g.institution, g.year, COUNT(g.id) AS num_grants FROM grants g GROUP BY g.institution, g.year;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 629,
    "prompt": "What is the total number of patients who have had a flu shot in the last 6 months in California?",
    "generated_sql": "SELECT COUNT(*) FROM patients WHERE disease = 'flu' AND state = 'California' AND shot_date >= DATEADD(year, -6, GETDATE());",
    "reference_sql": "SELECT COUNT(*) FROM Patients WHERE FluShot >= DATEADD(month, -6, GETDATE()) AND State = 'California';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Used DATEADD(year, -6) for 6 years instead of DATEADD(month, -6) for 6 months"
    }
  },
  {
    "example_id": 630,
    "prompt": "How many startups in each country have a female founder?",
    "generated_sql": "SELECT country, COUNT(DISTINCT founder_name) FROM startups WHERE founder_gender = 'Female' GROUP BY country;",
    "reference_sql": "SELECT s.country, COUNT(*) FROM startup s WHERE s.founder_gender = 'Female' GROUP BY s.country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counting DISTINCT founder_name counts founders rather than the number of startups; should count rows or startup IDs"
    }
  },
  {
    "example_id": 631,
    "prompt": "Identify organic farming research institutions not located in the Midwest.",
    "generated_sql": "SELECT * FROM research_institutions WHERE location!= 'Midwest';",
    "reference_sql": "SELECT name FROM research_institutes WHERE focus = 'Organic farming research' AND location != 'Midwest';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to select only organic farming research institutions"
    }
  },
  {
    "example_id": 632,
    "prompt": "What are the names and locations of disability services facilities with a rating of 4 or higher?",
    "generated_sql": "SELECT FacilityName, Location FROM Facilities WHERE Rating > 4 ORDER BY Location ASC;",
    "reference_sql": "SELECT facility_name, facility_location FROM facilities WHERE facility_rating >= 4;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters Rating > 4 instead of including Rating = 4; should use Rating >= 4"
    }
  },
  {
    "example_id": 633,
    "prompt": "What is the number of students who received accommodations by month and accommodation type?",
    "generated_sql": "SELECT student_id, accommodation_type, COUNT(*) as num_students FROM accommodation GROUP BY student_id, accommodation_type;",
    "reference_sql": "SELECT MONTH(AccommodationDate) as Month, AccommodationType, COUNT(*) as Total FROM Accommodations JOIN Students ON Accommodations.StudentID = Students.StudentID GROUP BY Month, AccommodationType;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by student_id instead of month and accommodation type, missing month grouping and counting students per month per type."
    }
  },
  {
    "example_id": 634,
    "prompt": "Insert a new record into the species table for a fish species found in the Indian Ocean",
    "generated_sql": "INSERT INTO species (name, location, species_id) VALUES ('Fish', 'Indian Ocean', 5);",
    "reference_sql": "INSERT INTO species (id, name, type, population, habitat) VALUES (18, 'Parrotfish', 'Fish', 25000, 'Indian Ocean');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Inserts a generic 'Fish' with a hardcoded ID; lacks specific species details and may not match schema requirements"
    }
  },
  {
    "example_id": 635,
    "prompt": "What is the average timber volume for each country in tropical rainforests over the last 3 years?",
    "generated_sql": "SELECT country, AVG(volume) as avg_volume FROM (SELECT country, volume, ROW_NUMBER() OVER (ORDER BY volume DESC) as rn FROM timber_volume WHERE year >= 2019 GROUP BY country, volume) AS subquery GROUP BY country;",
    "reference_sql": "SELECT country, region, AVG(volume) as avg_volume FROM country_timber WHERE region = 'Tropical' AND year BETWEEN 2019 AND 2021 GROUP BY country, region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for tropical rainforests and incorrect use of ROW_NUMBER and GROUP BY volume"
    }
  },
  {
    "example_id": 636,
    "prompt": "Insert new data into the 'cosmetic_ingredients' table for a vegan eyeshadow product by brand 'Ara' with ingredients 'Mica', 'Iron Oxide', 'Titanium Dioxide' and 'Zinc Oxide'.",
    "generated_sql": "INSERT INTO cosmetic_ingredients (brand, ingredient, extraction_method, yield) VALUES ('Ara', 'Iron Oxide', 'Extract', 50.00), ('Ara', 'Iron Oxide', 'Extract', 60.00), ('Ara', 'Iron Oxide', 'Extract', 90.00), ('Ara', 'Iron Oxide', 'Product', 100.00);",
    "reference_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) VALUES (NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient'); INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type, ingredient_name) SELECT ingredient_id, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Mica' FROM cosmetic_ingredients WHERE ingredient_name = 'Mica' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Iron Oxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Titanium Dioxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Zinc Oxide';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query inserts only Iron Oxide multiple times and ignores Mica, Titanium Dioxide, and Zinc Oxide, and uses irrelevant extraction_method and yield columns without specification"
    }
  },
  {
    "example_id": 637,
    "prompt": "Delete all records from the crime_statistics table where the 'crime_type' column is 'Trespassing' and the 'date' column is '2022-05-15'?",
    "generated_sql": "DELETE FROM crime_statistics WHERE crime_type = 'Trespassing' AND date = '2022-05-15';",
    "reference_sql": "DELETE FROM crime_statistics WHERE crime_type = 'Trespassing' AND date = '2022-05-15';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 638,
    "prompt": "What is the total number of crime incidents reported in each sector, sorted by the number of incidents in descending order?",
    "generated_sql": "SELECT sector, COUNT(*) as incident_count FROM crimes GROUP BY sector ORDER BY incident_count DESC;",
    "reference_sql": "SELECT sector.name, COUNT(incidents.id) AS incident_count FROM sector LEFT JOIN incidents ON sector.id = incidents.sector_id GROUP BY sector.name ORDER BY incident_count DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 639,
    "prompt": "What is the 'value' of 'inventory' for item 'DEF456'?",
    "generated_sql": "SELECT inventory_value FROM inventory_data WHERE item_name = 'DEF456' AND quantity = 100;",
    "reference_sql": "SELECT value FROM inventory WHERE item = 'DEF456';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary filter on quantity=100 and incorrect column selection; should select the inventory value for 'DEF456' without extra conditions"
    }
  },
  {
    "example_id": 640,
    "prompt": "What is the average investment in sustainable agriculture per country?",
    "generated_sql": "SELECT country, AVG(investment) AS avg_investment FROM investments WHERE industry = 'agriculture' GROUP BY country;",
    "reference_sql": "SELECT country, AVG(amount) as avg_investment FROM investments WHERE sector = 'Sustainable Agriculture' GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters for all agriculture investments but does not restrict to sustainable agriculture"
    }
  },
  {
    "example_id": 641,
    "prompt": "What are the names and ranks of all military personnel in country W who were demoted in the year 2019?",
    "generated_sql": "SELECT personnel.name, RANK(personnel.rank) FROM personnel INNER JOIN country_demoted ON personnel.country_id = country_demoted.country_id WHERE country_demoted.year = 2019 AND personnel.rank = 'D';",
    "reference_sql": "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect use of RANK(), no filter for country W, joins wrong table, and improperly filters rank instead of demotion events"
    }
  },
  {
    "example_id": 642,
    "prompt": "What is the number of intelligence personnel in each department in the UK government?",
    "generated_sql": "SELECT department, COUNT(*) FROM intelligence_intelligence GROUP BY department;",
    "reference_sql": "SELECT i.department, COUNT(i.id) as total_personnel FROM intelligence_personnel_uk i WHERE i.country = 'UK' GROUP BY i.department;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to restrict to UK government departments"
    }
  },
  {
    "example_id": 643,
    "prompt": "What is the total number of military personnel in the USA and the average salary for each country?",
    "generated_sql": "SELECT country, SUM(num_personnel) as total_num_personnel, AVG(salary) as avg_salary FROM military_personnel WHERE country = 'USA' GROUP BY country;",
    "reference_sql": "SELECT mc.country, AVG(mc.salary) as avg_salary, COUNT(mc.id) as total_personnel FROM military_personnel mc GROUP BY mc.country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only computes results for USA, missing average salary for other countries"
    }
  },
  {
    "example_id": 644,
    "prompt": "How many programs were held in each month of 2022?",
    "generated_sql": "SELECT MONTH(program_date) AS month, COUNT(*) AS num_program_held FROM programs WHERE YEAR(program_date) = 2022 GROUP BY month;",
    "reference_sql": "SELECT EXTRACT(MONTH FROM program_date) AS month, COUNT(*) AS num_programs FROM programs WHERE YEAR(program_date) = 2022 GROUP BY month;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 645,
    "prompt": "Show the top 5 employees who have been in training the longest, ordered by total training hours in descending order.",
    "generated_sql": "SELECT employee_name, total_training_hours FROM employees WHERE training_hours >= (SELECT MAX(training_hours) FROM employees WHERE employee_id = employees.employee_id) ORDER BY total_training_hours DESC;",
    "reference_sql": "SELECT emp_id, SUM(training_hours) as total_training_hours FROM trainings GROUP BY emp_id ORDER BY total_training_hours DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not limit to top 5 employees and uses an incorrect WHERE clause instead of simply ordering by total_training_hours DESC with LIMIT 5."
    }
  },
  {
    "example_id": 646,
    "prompt": "What is the racial and ethnic diversity of the company?",
    "generated_sql": "SELECT company_name, racial_ethnicity, COUNT(company_name) AS diversity_count FROM company_diversity GROUP BY company_name, racial_ethnicity;",
    "reference_sql": "SELECT race, COUNT(*) as num_employees, CONCAT(ROUND(COUNT(*) / (SELECT COUNT(*) FROM employees) * 100, 2), '%') as percent_of_employees FROM employees GROUP BY race;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 647,
    "prompt": "How many renewable energy projects were completed in Colombia and Peru in 2020 and 2021?",
    "generated_sql": "SELECT COUNT(*) FROM renewable_projects WHERE region IN ('Colombia', 'Peru') AND year IN (2020, 2021);",
    "reference_sql": "SELECT SUM(num_projects) FROM latam_renewable_projects WHERE country IN ('Colombia', 'Peru') AND year BETWEEN 2020 AND 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to include only completed projects"
    }
  },
  {
    "example_id": 648,
    "prompt": "What is the total energy efficiency savings in USD for the state of Texas in 2020?",
    "generated_sql": "SELECT SUM(energy_savings) FROM energy_savings WHERE state = 'Texas' AND year = 2020;",
    "reference_sql": "SELECT SUM(savings) FROM energy_efficiency WHERE state = 'Texas' AND year = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 649,
    "prompt": "Identify the total number of offshore drilling platforms in the North Sea and Gulf of Mexico from the 'InfrastructureData' table.",
    "generated_sql": "SELECT COUNT(*) FROM InfrastructureData WHERE location LIKE 'North Sea%' OR location LIKE 'Gulf of Mexico%';",
    "reference_sql": "SELECT SUM(quantity) FROM InfrastructureData WHERE (region = 'North Sea' AND platform_type = 'offshore_drilling') OR (region = 'Gulf of Mexico' AND platform_type = 'offshore_drilling');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for offshore drilling platforms, only by location"
    }
  },
  {
    "example_id": 650,
    "prompt": "Add a new bus route from 'Chinatown' to 'Airport'",
    "generated_sql": "INSERT INTO Routes (route_id, route_type, route_name, route_length, start_time, end_time) VALUES (1, 'Bus', 'Airport', '6:00 PM', '2022-07-01', '2023-07-01');",
    "reference_sql": "INSERT INTO bus_routes (route_id, start_location, end_location) VALUES (2, 'Chinatown', 'Airport');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing origin Chinatown and columns are misused with incorrect values for route_length, start_time, end_time"
    }
  },
  {
    "example_id": 651,
    "prompt": "How many labor disputes were there in each factory, by year?",
    "generated_sql": "SELECT year, COUNT(*) as num_unresolvable_disputes FROM labor_disputes WHERE dispute_date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY year;",
    "reference_sql": "SELECT factory, DATE_TRUNC('year', dispute_date) AS dispute_year, COUNT(*) AS num_disputes FROM labor_disputes GROUP BY factory, dispute_year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query fails to group by factory and incorrectly filters to a specific year"
    }
  },
  {
    "example_id": 652,
    "prompt": "What is the average number of posts per user in each region?",
    "generated_sql": "SELECT region, AVG(posts_per_user) as avg_posts_per_user FROM regions GROUP BY region;",
    "reference_sql": "SELECT users.region, AVG(posts.user_id) FROM posts JOIN users ON posts.user_id = users.id GROUP BY users.region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a posts_per_user column in regions table and does not calculate posts per user by joining users and posts tables"
    }
  },
  {
    "example_id": 653,
    "prompt": "List the fashion trends of 2021 with sales greater than 1500?",
    "generated_sql": "SELECT * FROM fashion_trends WHERE sales > 1500 AND year = 2021;",
    "reference_sql": "SELECT product FROM trends_2021 WHERE sales > 1500;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 654,
    "prompt": "What is the percentage of sales by designer?",
    "generated_sql": "SELECT DesignerID, COUNT(DISTINCT SalesID) * 100.0 / (SELECT COUNT(*) FROM Sales) AS Percentage FROM Sales WHERE DesignerID = (SELECT DesignerID FROM Designers)",
    "reference_sql": "SELECT Designer, 100.0 * SUM(Quantity) / (SELECT SUM(Quantity) FROM ClothingSales) as PercentageOfSales FROM ClothingSales GROUP BY Designer;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect WHERE clause and missing GROUP BY; subquery returns multiple DesignerID values"
    }
  },
  {
    "example_id": 655,
    "prompt": "Delete records of donors who haven't donated in the last 12 months from the 'donations' table.",
    "generated_sql": "DELETE FROM donations WHERE donation_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH);",
    "reference_sql": "DELETE FROM donations WHERE donation_date < NOW() - INTERVAL 12 MONTH;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It deletes all donations older than 12 months for every donor, not only donors with no donations in the last 12 months"
    }
  },
  {
    "example_id": 656,
    "prompt": "What is the total number of volunteers who have completed more than 25 hours of service in the \"Food Security\" program?",
    "generated_sql": "SELECT COUNT(*) FROM Volunteers WHERE volunteer_hours > 25 AND program_name = 'Food Security';",
    "reference_sql": "SELECT SUM(Hours) FROM Volunteers WHERE Program = 'Food Security' AND Hours > 25;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 657,
    "prompt": "How many suppliers provide non-GMO ingredients for Italian dishes?",
    "generated_sql": "SELECT COUNT(*) FROM Suppliers WHERE FoodType = 'Italian' AND NonGMOIngredients = 1;",
    "reference_sql": "SELECT COUNT(*) FROM Suppliers WHERE provides_non_gmo = true AND serves_cuisine = 'Italian';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 658,
    "prompt": "Show annual energy consumption for our sustainable seafood processing plants, in kWh.",
    "generated_sql": "SELECT plant_name, kWh_per_day FROM sustainable_plant_energy_consumption WHERE plant_name IN ('Rice', 'Salmon');",
    "reference_sql": "SELECT name, annual_energy_consumption FROM plants WHERE type = 'Sustainable';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects daily consumption for two specific plants instead of computing annual kWh for all sustainable seafood processing plants."
    }
  },
  {
    "example_id": 659,
    "prompt": "List all biotech startup funding events greater than $20M in the USA and their respective dates.",
    "generated_sql": "SELECT event_name, start_date FROM biotech_startups WHERE location = 'USA' AND funding_amount > 2000000.0;",
    "reference_sql": "SELECT name, funding_date FROM startups_funding WHERE location = 'USA' AND funding > 20000000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses funding_amount > 2,000,000 instead of > 20,000,000"
    }
  },
  {
    "example_id": 660,
    "prompt": "Show the total cost of bioprocess engineering projects in Germany and France.",
    "generated_sql": "SELECT SUM(project_cost) FROM bioscience WHERE country IN ('Germany', 'France');",
    "reference_sql": "SELECT SUM(cost) FROM bioprocess_engineering WHERE location IN ('Germany', 'France');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for bioprocess engineering projects"
    }
  },
  {
    "example_id": 661,
    "prompt": "What is the average age of female bioprocess engineers in Germany?",
    "generated_sql": "SELECT AVG(age) FROM bioprocess_engineer_gender WHERE gender = 'female' AND country = 'Germany';",
    "reference_sql": "SELECT AVG(age) FROM bioprocess_engineers WHERE gender = 'Female' AND country = 'Germany';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 662,
    "prompt": "Find the number of graduate students in each department, excluding those enrolled in the 'Physics' department.",
    "generated_sql": "SELECT department, COUNT(*) AS num_students FROM graduate_students WHERE department = 'Physics' GROUP BY department;",
    "reference_sql": "SELECT department, COUNT(*) as num_students FROM graduate_students WHERE department NOT IN ('Physics') GROUP BY department;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause filters for Physics instead of excluding it; should use department <> 'Physics'"
    }
  },
  {
    "example_id": 663,
    "prompt": "What is the average number of research grants awarded per department in the 'research_grants' table, excluding departments with less than 3 grants?",
    "generated_sql": "SELECT Department, AVG(GrantAmount) FROM research_grants GROUP BY Department;",
    "reference_sql": "SELECT AVG(grant_count) FROM (SELECT department, COUNT(*) AS grant_count FROM research_grants GROUP BY department HAVING COUNT(*) >= 3) AS subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Calculates average grant amount instead of average count and does not exclude departments with fewer than 3 grants."
    }
  },
  {
    "example_id": 664,
    "prompt": "What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?",
    "generated_sql": "SELECT MAX(grant_amount) FROM faculty WHERE department = 'Arts and Humanities';",
    "reference_sql": "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 665,
    "prompt": "How many green buildings are there in each zip code?",
    "generated_sql": "SELECT zip, COUNT(*) FROM green_buildings WHERE is_green = true GROUP BY zip;",
    "reference_sql": "SELECT Zip.zip_name, COUNT(*) as num_buildings FROM Zip JOIN Building ON Zip.zip_code = Building.zip_code WHERE Building.building_type = 'green' GROUP BY Zip.zip_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 666,
    "prompt": "What is the total CO2 emission of buildings constructed before 2000, grouped by city?",
    "generated_sql": "SELECT city, SUM(co2_emission) as total_co2_emission FROM Buildings WHERE construction_year < 2000 GROUP BY city;",
    "reference_sql": "SELECT city, SUM(co2_emission) FROM Buildings WHERE construction_year < 2000 GROUP BY city;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 667,
    "prompt": "How has the number of sustainable tourism activities in Indonesia changed over the past year?",
    "generated_sql": "SELECT activity_name, COUNT(*) as sustainable_activities_change FROM activities WHERE country = 'Indonesia' AND year >= 2021 GROUP BY activity_name;",
    "reference_sql": "SELECT month, num_activities FROM indonesia_sustainable_tourism;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts activities since 2021 but does not compute year-over-year change"
    }
  },
  {
    "example_id": 668,
    "prompt": "What is the average energy savings per hotel in Egypt?",
    "generated_sql": "SELECT AVG(energy_savings / number_of_hotels) FROM hotels WHERE country = 'Egypt';",
    "reference_sql": "SELECT AVG(EnergySavings) FROM HotelEnergy WHERE Country = 'Egypt';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It divides energy_savings by number_of_hotels per row instead of computing the average energy_savings per hotel directly."
    }
  },
  {
    "example_id": 669,
    "prompt": "Add new records to \"traditional_music\" table",
    "generated_sql": "INSERT INTO traditional_music (id, genre, name, country) VALUES (1, 'Hip Hop', 'Rock', 'United States');",
    "reference_sql": "INSERT INTO traditional_music (id, name, origin) VALUES (2, 'Didgeridoo', 'Australia'), (3, 'Kora', 'West Africa');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserts only one record with incorrect genre and name values for traditional music."
    }
  },
  {
    "example_id": 670,
    "prompt": "List the traditional arts that have been represented in the most heritage sites, ordered by the number of heritage sites in descending order.",
    "generated_sql": "SELECT a.name, COUNT(DISTINCT s.site_id) AS num_sites FROM traditional_arts a JOIN heritage_sites s ON a.site_id = s.site_id GROUP BY a.name ORDER BY num_sites DESC;",
    "reference_sql": "SELECT ArtType, COUNT(SiteID) AS Number_Of_Sites FROM SiteArts JOIN Arts ON SiteArts.ArtID = Arts.ArtID GROUP BY ArtType ORDER BY Number_Of_Sites DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 671,
    "prompt": "What is the total number of tourists visiting historical sites in Europe?",
    "generated_sql": "SELECT SUM(tourists_count) FROM HistoricalSites WHERE country = 'Europe';",
    "reference_sql": "SELECT SUM(number_of_tourists) FROM tourism WHERE category = 'Historical';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on country = 'Europe' is incorrect since Europe is a continent, not a country."
    }
  },
  {
    "example_id": 672,
    "prompt": "Insert a new record into the 'offenders' table",
    "generated_sql": "INSERT INTO offenders (id, name, age, gender, country, ethnicity, race) VALUES (4, 'John', 35, 'Male', 'United States', 'Hispanic', 'Asian');",
    "reference_sql": "INSERT INTO offenders (id, name, age, state) VALUES (1, 'Jamal Johnson', 34, 'IL');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 673,
    "prompt": "What is the average time taken to resolve cases for each mediator?",
    "generated_sql": "SELECT mediator_id, AVG(case_time_in_days) as avg_case_time FROM mediation_timelines GROUP BY mediator_id;",
    "reference_sql": "SELECT mediators.name, AVG(DATEDIFF('day', cases.date, cases.resolved_date)) as average_time_to_resolve FROM mediators INNER JOIN cases ON mediators.mediator_id = cases.mediator_id GROUP BY mediators.name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 674,
    "prompt": "Count the number of underwater volcanoes in the Pacific Ocean.",
    "generated_sql": "SELECT COUNT(*) FROM underwater_volcanoes WHERE location = 'Pacific Ocean';",
    "reference_sql": "SELECT COUNT(*) FROM OceanFloorFeatures JOIN Oceans ON OceanFloorFeatures.ocean_id = Oceans.id WHERE Oceans.name = 'Pacific' AND OceanFloorFeatures.feature = 'Volcano';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 675,
    "prompt": "How many whale shark sightings were reported in the Indian Ocean in 2020?",
    "generated_sql": "SELECT COUNT(*) FROM whale_shark_sightings INNER JOIN Indian_ocean ON whale_shark_sightings.location = Indian_ocean.location WHERE sighting_year = 2020;",
    "reference_sql": "SELECT sightings FROM whale_shark_sightings WHERE year = 2020 AND location = 'Indian Ocean';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary join on non-existent Indian_ocean table and incorrect filtering; should directly filter by ocean = 'Indian'"
    }
  },
  {
    "example_id": 676,
    "prompt": "Add a new TV show to the 'shows' table with the title 'New TV Show', release year 2022, and id 5",
    "generated_sql": "INSERT INTO shows (title, release_year, id) VALUES ('New TV Show', 2022, 5);",
    "reference_sql": "INSERT INTO shows (id, title, release_year) VALUES (5, 'New TV Show', 2022);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 677,
    "prompt": "What are the names of the actors who have acted in the same movie as the director?",
    "generated_sql": "SELECT director, director_name FROM movie_actors WHERE director = director_id AND director_name = director_id;",
    "reference_sql": "SELECT DISTINCT actor FROM movies WHERE director IN (SELECT actor FROM movies);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query conditions and selected columns do not retrieve actors who share a movie with the director"
    }
  },
  {
    "example_id": 678,
    "prompt": "What is the average labor productivity by mine type in the past 12 months?",
    "generated_sql": "SELECT mine_type, AVG(productivity) FROM mining_productivity WHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY mine_type;",
    "reference_sql": "SELECT mine_type, AVG(productivity) as avg_productivity FROM (SELECT mine_type, productivity, measurement_date, ROW_NUMBER() OVER (PARTITION BY mine_type ORDER BY measurement_date DESC) as rn FROM mine_labor_productivity WHERE measurement_date >= DATEADD(month, -12, CURRENT_DATE)) t WHERE rn = 1 GROUP BY mine_type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 679,
    "prompt": "What is the total number of employees working in the mining industry in each country in the Middle East?",
    "generated_sql": "SELECT country, SUM(num_employees) FROM MiddleEastEmployees GROUP BY country;",
    "reference_sql": "SELECT mc.country, SUM(e.num_employees) as total_employees FROM mining_companies mc INNER JOIN employees e ON mc.id = e.company_id WHERE e.employee_country = mc.country AND mc.continent = 'Asia' GROUP BY mc.country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for mining industry (e.g., WHERE industry = 'Mining')"
    }
  },
  {
    "example_id": 680,
    "prompt": "Delete the record of the reader with the ID of 6 if it exists.",
    "generated_sql": "DELETE FROM readers WHERE id = 6;",
    "reference_sql": "DELETE FROM readers WHERE id = 6;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 681,
    "prompt": "How many news articles were published in the 'international' section in the last month?",
    "generated_sql": "SELECT COUNT(*) FROM news_articles WHERE section = 'international' AND publication_date >= DATEADD(month, -1, CURRENT_DATE);",
    "reference_sql": "SELECT COUNT(*) FROM news_articles WHERE section = 'international' AND publication_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 682,
    "prompt": "What is the total number of articles written by each author in each region?",
    "generated_sql": "SELECT AuthorID, Region, COUNT(*) AS TotalArticles FROM Articles WHERE Region IN ('North America', 'South America') GROUP BY AuthorID, Region;",
    "reference_sql": "SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query unnecessarily restricts regions to North and South America instead of including all regions"
    }
  },
  {
    "example_id": 683,
    "prompt": "What is the total donation amount per region in the 'Donations' table?",
    "generated_sql": "SELECT region, SUM(donation_amount) FROM Donations GROUP BY region;",
    "reference_sql": "SELECT r.RegionName, SUM(d.Amount) as TotalDonationPerRegion FROM Donations d JOIN Regions r ON d.RegionID = r.RegionID GROUP BY r.RegionName;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 684,
    "prompt": "What is the maximum number of marine species ever observed in a single day in the Baltic Sea?",
    "generated_sql": "SELECT MAX(num_species) FROM marine_species_observations WHERE location = 'Baltic Sea' AND day = (SELECT MAX(day) FROM marine_species_observations WHERE location = 'Baltic Sea' AND day = (SELECT MAX(day) FROM marine_species_observations WHERE location = 'Baltic Sea'));",
    "reference_sql": "SELECT MAX(number_of_observations) FROM marine_species_observations WHERE ocean = 'Baltic Sea' AND observation_date BETWEEN '2000-01-01' AND '2022-12-31' GROUP BY ocean, DATE_TRUNC('day', observation_date);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query restricts to the latest day instead of finding the day with the maximum num_species"
    }
  },
  {
    "example_id": 685,
    "prompt": "What is the number of players who have played more than 100 minutes?",
    "generated_sql": "SELECT COUNT(*) FROM players WHERE duration >= 100;",
    "reference_sql": "SELECT COUNT(*) FROM player_sessions WHERE playtime > 100;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "uses >= instead of >"
    }
  },
  {
    "example_id": 686,
    "prompt": "How many esports events were held in Europe in 2022?",
    "generated_sql": "SELECT COUNT(*) FROM esports_events WHERE location = 'Europe' AND year = 2022;",
    "reference_sql": "SELECT COUNT(*) FROM esports_events WHERE year = 2022 AND location LIKE 'Europe%';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 687,
    "prompt": "Show the total prize pool for each game",
    "generated_sql": "SELECT game_id, SUM(prize_amount) FROM prize_pools GROUP BY game_id;",
    "reference_sql": "SELECT game, SUM(prize_pool) as total_prize_pool FROM esports_events GROUP BY game;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 688,
    "prompt": "What is the average age of players who use virtual reality devices in 2021?",
    "generated_sql": "SELECT AVG(e.age) FROM players p INNER JOIN avr_devices ad ON p.id = ad.player_id WHERE p.device_type = 'VR' AND ad.year = 2021;",
    "reference_sql": "SELECT AVG(Age) FROM PlayerDevices WHERE Year = 2021 AND Device IS NOT NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses undefined alias e, filters p.device_type instead of ad, and references incorrect table avr_devices"
    }
  },
  {
    "example_id": 689,
    "prompt": "How many public pools in the Recreation department have a budget over $200,000?",
    "generated_sql": "SELECT COUNT(*) FROM Recreation.PublicPool WHERE budget > 200000;",
    "reference_sql": "SELECT COUNT(*) FROM Recreation_Dept WHERE Facility = 'Public Pool' AND Budget > 200000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 690,
    "prompt": "What is the total budget allocated for services in the Social Services department that start with the letter 'C'?",
    "generated_sql": "SELECT SUM(amount) FROM budget WHERE department = 'Social Services' AND start_date >= '2021-01-01' AND start_date <= '2023-01-01';",
    "reference_sql": "SELECT SUM(Budget) FROM Social_Services_Dept WHERE Service LIKE 'C%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for services starting with 'C' and instead uses irrelevant date constraints."
    }
  },
  {
    "example_id": 691,
    "prompt": "What is the highest energy rating for properties in the 'green_buildings' table?",
    "generated_sql": "SELECT MAX(energy_rating) FROM green_buildings;",
    "reference_sql": "SELECT MAX(energy_rating) FROM green_buildings;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 692,
    "prompt": "What is the average energy efficiency rating for residential buildings in the \"CleanEnergy\" schema?",
    "generated_sql": "SELECT AVG(rating) FROM clean_energy.buildings WHERE rating IN (SELECT rating FROM clean_energy.buildings WHERE type = 'Residential');",
    "reference_sql": "SELECT AVG(rating) FROM CleanEnergy.ResidentialEfficiency;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering by rating matches rather than by type='Residential', includes non-residential rows"
    }
  },
  {
    "example_id": 693,
    "prompt": "Show the minimum quantity of products in the 'gifts' category",
    "generated_sql": "SELECT MIN(quantity) FROM products WHERE category = 'gifts';",
    "reference_sql": "SELECT MIN(quantity) FROM products WHERE category = 'gifts';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 694,
    "prompt": "What is the average number of satellites owned by countries with space programs?",
    "generated_sql": "SELECT AVG(satellites) FROM countries WHERE has_space_programs = TRUE;",
    "reference_sql": "SELECT AVG(num_satellites) FROM countries INNER JOIN space_programs ON countries.name = space_programs.country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 695,
    "prompt": "What is the maximum number of space missions by astronauts from Japan?",
    "generated_sql": "SELECT MAX(num_missions) FROM astronauts WHERE country = 'Japan';",
    "reference_sql": "SELECT Nationality, MAX(SpaceMissions) FROM Astronauts WHERE Nationality = 'Japan';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 696,
    "prompt": "What is the total mass of space debris larger than 10 cm in Low Earth Orbit (LEO)?",
    "generated_sql": "SELECT SUM(mass) FROM space_debris WHERE mass_in_LEO < 10.00000000;",
    "reference_sql": "SELECT SUM(mass) FROM space_debris WHERE orbit = 'LEO' AND mass > 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on mass_in_LEO < 10 instead of selecting debris size > 10 cm in LEO"
    }
  },
  {
    "example_id": 697,
    "prompt": "Which spacecraft have astronauts with Texas residency flown?",
    "generated_sql": "SELECT spacecraft_name, astronauts_with_Texas_residency FROM astronauts WHERE astronaut_residency = true;",
    "reference_sql": "SELECT DISTINCT s.Name FROM Spacecraft s JOIN Astronaut a ON s.Id = a.SpacecraftId WHERE a.Residence = 'Texas';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not join astronauts and spacecraft tables or filter correctly, and uses incorrect columns"
    }
  },
  {
    "example_id": 698,
    "prompt": "Calculate the average ticket price for each sports team",
    "generated_sql": "SELECT sport, AVG(price) as avg_price FROM tickets WHERE team = 'Basketball' GROUP BY sport;",
    "reference_sql": "SELECT s.team_name, AVG(t.price) FROM sports_teams s INNER JOIN ticket_sales t ON s.team_id = t.team_id GROUP BY s.team_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only the 'Basketball' team and groups by sport instead of calculating the average price for each team."
    }
  },
  {
    "example_id": 699,
    "prompt": "What are the total ticket sales for the warriors in the ticket_sales table?",
    "generated_sql": "SELECT SUM(ticket_sales) FROM ticket_sales WHERE warrior_id = 1;",
    "reference_sql": "SELECT SUM(quantity_sold) FROM ticket_sales WHERE team_name = 'warriors';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters for warrior_id = 1, but question asks for total ticket sales for all warriors without filtering by a specific ID"
    }
  },
  {
    "example_id": 700,
    "prompt": "Which electric vehicles have the highest and lowest adoption rates in 'london'?",
    "generated_sql": "SELECT country, AVG(adoption_rate) AS avg_adoption_rate FROM vehicle_importers WHERE country = 'London' GROUP BY country;",
    "reference_sql": "SELECT vehicle_type, MAX(adoption_rate) as highest_rate, MIN(adoption_rate) as lowest_rate FROM adoption_rates WHERE city = 'london' GROUP BY vehicle_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "The query calculates average adoption rate by country instead of listing electric vehicles and their highest/lowest adoption rates in London."
    }
  },
  {
    "example_id": 701,
    "prompt": "What is the total revenue for eco-friendly footwear in Germany in Q2 2021?",
    "generated_sql": "SELECT SUM(revenue) FROM eco_sustainable_footwear WHERE country = 'Germany' AND product = 'eco-friendly footwear' AND quarter = 2 AND year = 2021;",
    "reference_sql": "SELECT SUM(revenue) as total_revenue FROM sales WHERE category LIKE '%footwear%' AND country = 'Germany' AND is_eco_friendly = TRUE AND sale_date BETWEEN '2021-04-01' AND '2021-06-30';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 702,
    "prompt": "What is the average policy duration for policyholders in the West region with a risk score between 600 and 800?",
    "generated_sql": "SELECT AVG(policy_duration) FROM Policyholders WHERE region = 'West' AND risk_score BETWEEN 600 AND 800;",
    "reference_sql": "SELECT AVG(p.PolicyDuration) as AvgPolicyDuration FROM Policyholders p WHERE p.Region = 'West' AND p.RiskScore BETWEEN 600 AND 800;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 703,
    "prompt": "What is the total number of members in 'manufacturing_unions'?",
    "generated_sql": "SELECT COUNT(*) FROM manufacturing_unions;",
    "reference_sql": "SELECT COUNT(*) FROM manufacturing_unions.members WHERE union_member = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 704,
    "prompt": "What is the total number of workers in each industry?",
    "generated_sql": "SELECT industry, COUNT(*) FROM workers WHERE industry = 'Electricity' GROUP BY industry;",
    "reference_sql": "SELECT industry_name, SUM(total_workers) FROM industry GROUP BY industry_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query restricts to only 'Electricity' instead of counting workers for each industry."
    }
  },
  {
    "example_id": 705,
    "prompt": "What is the number of gasoline vehicles sold in 'Florida' in the 'sales' table?",
    "generated_sql": "SELECT COUNT(*) FROM sales WHERE state = 'Florida';",
    "reference_sql": "SELECT SUM(vehicle_count) FROM sales WHERE region = 'Florida' AND vehicle_type = 'gasoline';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for gasoline vehicles; need to include condition for fuel type = 'Gasoline'"
    }
  },
  {
    "example_id": 706,
    "prompt": "List all unique types of cargo loaded onto vessels in the Atlantic region.",
    "generated_sql": "SELECT vessel, type FROM cargo_loading WHERE region = 'Atlantic';",
    "reference_sql": "SELECT DISTINCT cargo_type FROM cargo c JOIN vessels v ON c.vessel_id = v.id WHERE v.region = 'Atlantic';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not select distinct cargo types and incorrectly includes vessel column"
    }
  },
  {
    "example_id": 707,
    "prompt": "What is the average cargo quantity per vessel for each vessel type?",
    "generated_sql": "SELECT v.vessel_type, SUM(c.quantity) as avg_quantity FROM vessels v JOIN cargo c ON v.vessel_id = c.vessel_id JOIN cargo_categories c ON v.vessel_id = c.vessel_id GROUP BY v.vessel_type;",
    "reference_sql": "SELECT Vessels.Type, AVG(Cargo.Quantity) as AverageCargoQuantity FROM Cargo JOIN Vessels ON Cargo.VesselId = Vessels.Id GROUP BY Vessels.Type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM instead of AVG and includes an incorrect join on cargo_categories"
    }
  },
  {
    "example_id": 708,
    "prompt": "What was the average speed for vessels in the Arctic Circle in July 2020?",
    "generated_sql": "SELECT AVG(speed) FROM vessel_data WHERE location = 'Arctic Circle' AND date >= '2020-07-01' AND date < '2020-08-01'",
    "reference_sql": "SELECT AVG(speed) FROM speeds JOIN vessels ON speeds.vessel_id = vessels.id WHERE region = 'Arctic Circle' AND speed_date BETWEEN '2020-07-01' AND '2020-07-31';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 709,
    "prompt": "How many recycling plants in Canada process exactly 5 types of waste?",
    "generated_sql": "SELECT COUNT(*) FROM recycling_plants WHERE waste_type IN ('coffee', 'paper', 'glass') AND location = 'Canada';",
    "reference_sql": "SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It filters for specific waste types and does not count plants processing exactly five types"
    }
  },
  {
    "example_id": 710,
    "prompt": "What is the quarterly recycling rate for 'Plastic' in 'Australia' from Q1 2020 to Q2 2020?",
    "generated_sql": "SELECT recycling_rate FROM recycling_rates INNER JOIN recycling_rates_q1_2020 ON recycling_rates_q1_2020.recycling_date = recycling_rates_q1_2020.recycling_date WHERE recycling_type = 'Plastic' AND recycling_date BETWEEN '2020-01-01' AND '2020-06-30';",
    "reference_sql": "SELECT quarter, recycling_rate FROM australia_recycling_rates WHERE material = 'Plastic' AND (year = 2020 AND quarter IN ('Q1', 'Q2'));",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for country, incorrect JOIN, and no grouping or selection by quarter"
    }
  },
  {
    "example_id": 711,
    "prompt": "Add a new record for a member with id 27, name 'Fatima Ahmed' and email 'fatimaahmed@example.com' into the members table if no such member already exists",
    "generated_sql": "INSERT INTO members (id, name, email) VALUES (27, 'Fatima Ahmed', 'example.com'); SELECT * FROM members WHERE id = 27;",
    "reference_sql": "INSERT INTO members (id, name, email) SELECT 27, 'Fatima Ahmed', 'fatimaahmed@example.com' FROM dual WHERE NOT EXISTS (SELECT * FROM members WHERE id = 27);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing existence check and incorrect email value inserted ('example.com' instead of 'fatimaahmed@example.com')"
    }
  },
  {
    "example_id": 712,
    "prompt": "Calculate the total number of steps taken by users in January 2021.",
    "generated_sql": "SELECT SUM(steps) FROM users WHERE date BETWEEN '2021-01-01' AND '2021-01-31';",
    "reference_sql": "SELECT SUM(steps) FROM DailySteps WHERE activity_date BETWEEN '2021-01-01' AND '2021-01-31';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 713,
    "prompt": "How many creative AI applications were developed in the 'americas' region in 2022?",
    "generated_sql": "SELECT COUNT(*) FROM creative_ai_apps WHERE region = 'Americas' AND YEAR(created_date) = 2022;",
    "reference_sql": "SELECT SUM(applications) FROM creative_ai WHERE region = 'americas' AND year = 2022;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 714,
    "prompt": "How many agricultural innovation projects were completed in India between 2015 and 2019?'",
    "generated_sql": "SELECT COUNT(*) FROM AgriculturalInnovation WHERE country IN ('India', 'Pakistan', 'China') AND completion_date BETWEEN '2015-01-01' AND '2019-12-31';",
    "reference_sql": "SELECT COUNT(*) FROM agricultural_innovation_projects WHERE country = 'India' AND start_year <= 2019 AND end_year >= 2015 AND completed = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters for India, Pakistan, and China instead of only India."
    }
  },
  {
    "example_id": 715,
    "prompt": "What is the minimum investment per project in the 'infrastructure_projects' table?",
    "generated_sql": "SELECT MIN(investment_amount) FROM infrastructure_projects;",
    "reference_sql": "SELECT MIN(investment) FROM infrastructure_projects;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 716,
    "prompt": "How many tickets were sold for cultural events in Q1 2022?",
    "generated_sql": "SELECT COUNT(*) FROM Ticket_Sales WHERE event_date BETWEEN '2022-01-01' AND '2022-03-31' AND event_type = 'Cultural';",
    "reference_sql": "SELECT SUM(Quantity) FROM Events INNER JOIN Tickets ON Events.EventID = Tickets.EventID WHERE Events.EventType = 'Cultural Festival' AND QUARTER(StartDate) = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts rows instead of summing the number of tickets sold"
    }
  },
  {
    "example_id": 717,
    "prompt": "What is the maximum marketing cost for TV shows in the 'Drama' genre?",
    "generated_sql": "SELECT MAX(MarketingCost) FROM TVShows WHERE Genre = 'Drama';",
    "reference_sql": "SELECT MAX(marketing_cost) FROM TVShowMarketing WHERE genre = 'Drama';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 718,
    "prompt": "Delete the permit with number 2021-020",
    "generated_sql": "DELETE FROM permits WHERE permit_id = 2021-020;",
    "reference_sql": "WITH cte AS (DELETE FROM building_permits WHERE permit_number = '2021-020') SELECT * FROM cte;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses unquoted numeric expression 2021-020 and wrong column name instead of matching the permit number string"
    }
  },
  {
    "example_id": 719,
    "prompt": "How many construction projects were completed in each month of 2021?",
    "generated_sql": "SELECT * FROM projects WHERE year = 2021 WHERE month = 1;",
    "reference_sql": "SELECT MONTH(start_date) AS month, COUNT(*) AS projects FROM project_timeline WHERE YEAR(start_date) = 2021 AND end_date IS NOT NULL GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only filters for year=2021 and month=1, does not count projects or group by month, and has invalid syntax"
    }
  },
  {
    "example_id": 720,
    "prompt": "What is the total revenue for the top 5 dispensaries in Colorado in Q1 of 2023?",
    "generated_sql": "SELECT SUM(revenue) FROM revenue_data WHERE region = 'Colorado' AND quarter = 1 AND year = 2023 AND year >= 2023.YEAR AND department = 'Dispensary';",
    "reference_sql": "SELECT SUM(revenue) FROM dispensary_sales WHERE state = 'Colorado' AND sale_date BETWEEN '2023-01-01' AND '2023-03-31' AND dispensary_name IN (SELECT dispensary_name FROM dispensary_sales WHERE state = 'Colorado' AND sale_date BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY dispensary_name ORDER BY SUM(revenue) DESC LIMIT 5);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not select the top 5 dispensaries by revenue and contains invalid year filter"
    }
  },
  {
    "example_id": 721,
    "prompt": "Which strain was the best seller in Colorado in 2021?",
    "generated_sql": "SELECT strain, SUM(quantity) as total_sales FROM (SELECT strain, SUM(quantity) AS total_sales, SELECT COUNT(*) FROM sales WHERE year = 2021 GROUP BY strain) AS subquery WHERE strain = 'C' AND year = 2021 GROUP BY strain;",
    "reference_sql": "SELECT strain, SUM(quantity) as total_quantity FROM sales WHERE state = 'Colorado' AND year = 2021 GROUP BY strain ORDER BY total_quantity DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query syntax is invalid and does not filter by state or correctly aggregate by strain for Colorado in 2021"
    }
  },
  {
    "example_id": 722,
    "prompt": "What is the success rate of cases handled by attorneys who have passed the bar exam in the state where they practice?",
    "generated_sql": "SELECT SUM(cases_num) FROM attorney_practices WHERE state = 'California' AND has_passed_bar_exam = TRUE;",
    "reference_sql": "SELECT AVG(CASE WHEN Outcome = 'won' THEN 1.0 ELSE 0.0 END) as SuccessRate FROM Cases C INNER JOIN Attorneys A ON C.AttorneyID = A.AttorneyID WHERE A.BarPassed = 'yes';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums total cases for California attorneys only and does not calculate a success rate."
    }
  },
  {
    "example_id": 723,
    "prompt": "What is the total number of clients for each attorney?",
    "generated_sql": "SELECT attorney_name, COUNT(DISTINCT client_id) as total_clients FROM clients GROUP BY attorney_name;",
    "reference_sql": "SELECT attorney_id, COUNT(client_id) FROM clients GROUP BY attorney_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 724,
    "prompt": "Update the climate communication ROI for projects in Oceania with the latest regional average.",
    "generated_sql": "UPDATE climate_communication_r&_rg_date SET environmental_impact = '30%' WHERE region = 'Oceania' AND date >= DATEADD(year, -1, GETDATE());",
    "reference_sql": "UPDATE climate_communication SET roi = (SELECT roi FROM regional_roi WHERE region = 'Oceania' AND climate_communication.date = regional_roi.date) WHERE country IN ('Australia', 'New Zealand');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Updates the wrong column with a static value and doesn\u2019t compute the latest regional average ROI"
    }
  },
  {
    "example_id": 725,
    "prompt": "What is the average annual rainfall in Asia for the last 5 years?",
    "generated_sql": "SELECT AVG(rainfall) FROM rainfall WHERE region LIKE '%Asia%' AND year >= 2019;",
    "reference_sql": "SELECT AVG(rainfall) FROM rainfall_asia WHERE country = 'AS' AND year BETWEEN 2015 AND 2019;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses a static cutoff year and includes all years >= 2019 instead of exactly the last 5 years dynamically"
    }
  },
  {
    "example_id": 726,
    "prompt": "What is the number of 'climate communication' campaigns launched in 'Asia' in '2023' from the 'communication' table?",
    "generated_sql": "SELECT COUNT(*) FROM communication WHERE region = 'Asia' AND launch_date >= '2023-01-01' AND launch_date < '2023-06-01';",
    "reference_sql": "SELECT COUNT(*) FROM communication WHERE region = 'Asia' AND year = 2023;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for 'climate communication' campaign type and date range only covers up to June 2023 instead of entire year"
    }
  },
  {
    "example_id": 727,
    "prompt": "What is the maximum age of patients with HIV in Australia?",
    "generated_sql": "SELECT MAX(age) FROM patients WHERE disease = 'HIV' AND country = 'Australia';",
    "reference_sql": "SELECT MAX(Age) FROM Patients WHERE Disease = 'HIV' AND Country = 'Australia';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 728,
    "prompt": "What is the sum of funding amounts for companies founded in the last 5 years that have a female CEO?",
    "generated_sql": "SELECT SUM(funding_amount) FROM companies WHERE founder_gender = 'Female' AND year_founded > 5;",
    "reference_sql": "SELECT SUM(funding_amount) FROM funding_records JOIN companies ON funding_records.company_id = companies.id WHERE companies.founding_date >= DATEADD(year, -5, CURRENT_DATE) AND companies.CEO_gender = 'Female';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on founder_gender instead of CEO gender and incorrectly compares year_founded to 5 rather than calculating companies founded within the last five years."
    }
  },
  {
    "example_id": 729,
    "prompt": "List all startups that have not raised any funding",
    "generated_sql": "SELECT f.name FROM startup f JOIN funding f_funding ON f.id = f_funding.startup_id WHERE f.name!= 'No fund';",
    "reference_sql": "SELECT startups.name FROM startups LEFT JOIN investments ON startups.id = investments.startup_id WHERE investments.funding_amount IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses INNER JOIN and name filter instead of selecting startups with no funding via LEFT JOIN and NULL check"
    }
  },
  {
    "example_id": 730,
    "prompt": "Get the total number of inclusion efforts in the InclusionEfforts table for a specific location.",
    "generated_sql": "SELECT location, SUM(total_efforts) FROM InclusionEfforts WHERE location = 'New York' GROUP BY location;",
    "reference_sql": "SELECT location, COUNT(*) FROM InclusionEfforts WHERE effortStatus = 'Completed' GROUP BY location;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 731,
    "prompt": "List all instructors and number of students they support with accommodations.",
    "generated_sql": "SELECT instructors.name, COUNT(student_id.id) as num_students FROM instructors INNER JOIN student_accommodations ON instructors.id = student_accommodations.instructor_id WHERE student_accommodations.accommodation_type = 'Accommodation' GROUP BY instructors.name;",
    "reference_sql": "SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses INNER JOIN (omits instructors with zero students) and incorrectly filters on accommodation_type='Accommodation'"
    }
  },
  {
    "example_id": 732,
    "prompt": "What is the total number of museum visitors from historically underrepresented communities in the last 2 years?",
    "generated_sql": "SELECT COUNT(*) FROM museum_visitors WHERE community = 'Historically underrepresented' AND visit_date >= DATEADD(year, -2, GETDATE());",
    "reference_sql": "SELECT SUM(num_visitors) FROM MuseumVisitors WHERE community_type IN ('African American', 'Latinx', 'Native American', 'Asian Pacific Islander') AND visit_date >= DATEADD(YEAR, -2, GETDATE());",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts all visit records instead of unique visitors"
    }
  },
  {
    "example_id": 733,
    "prompt": "Generate a table 'threat_analysis' to store detailed analysis of threat intelligence metrics",
    "generated_sql": "CREATE TABLE threat_analysis (id INT PRIMARY KEY, threat_name VARCHAR(50), impact_score INT);",
    "reference_sql": "CREATE TABLE threat_analysis (id INT PRIMARY KEY, analysis_date DATE, threat_level VARCHAR(10), analysis TEXT);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Table lacks detailed threat intelligence metrics fields"
    }
  },
  {
    "example_id": 734,
    "prompt": "What is the total defense spending by the United States for each year from 2015 to 2020?",
    "generated_sql": "SELECT year, SUM(spending) as total_spending FROM defense_spending WHERE country = 'United States' AND year IN (2015, 2016, 2017, 2018) GROUP BY year;",
    "reference_sql": "SELECT year, SUM(amount) FROM defense_spending WHERE year BETWEEN 2015 AND 2020 GROUP BY year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only covers years 2015\u20132018 but omits 2019 and 2020."
    }
  },
  {
    "example_id": 735,
    "prompt": "Show the total assets under management (AUM) for each investment strategy.",
    "generated_sql": "SELECT strategy_name, SUM(assets) as total_assets FROM investments GROUP BY strategy_name;",
    "reference_sql": "SELECT cs.strategy, SUM(value) AS total_aum FROM client_strategy cs JOIN clients c ON cs.client_id = c.client_id JOIN assets a ON c.client_id = a.client_id GROUP BY cs.strategy;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 736,
    "prompt": "Compare the prevalence of diabetes among Indigenous populations in rural and urban areas.",
    "generated_sql": "SELECT location, prevalence FROM diabetes_rural_rural WHERE location LIKE 'rural%' OR location LIKE 'urban%';",
    "reference_sql": "SELECT (SELECT COUNT(*) FROM patients WHERE diagnosis = 'diabetes' AND ethnicity = 'Indigenous' AND residence = 'rural') / (SELECT COUNT(*) FROM patients WHERE ethnicity = 'Indigenous' AND residence = 'rural') AS rural_diabetes_prevalence, (SELECT COUNT(*) FROM patients WHERE diagnosis = 'diabetes' AND ethnicity = 'Indigenous' AND residence = 'urban') / (SELECT COUNT(*) FROM patients WHERE ethnicity = 'Indigenous' AND residence = 'urban') AS urban_diabetes_prevalence;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for Indigenous populations and uses an incorrect table, missing necessary grouping or comparison"
    }
  },
  {
    "example_id": 737,
    "prompt": "What is the average number of military personnel per base in 'Africa' and 'South America'?",
    "generated_sql": "SELECT AVG(COUNT(*)) FROM military_personnel WHERE base_region IN ('Africa', 'South America') AND base_country IN ('USA', 'Canada', 'Brazil', 'Russia', 'Mexico') GROUP BY base_region, base_country;",
    "reference_sql": "SELECT AVG(Personnel) FROM MilitaryBases WHERE Country IN ('Africa', 'South America');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query incorrectly filters by countries and aggregates by region and country instead of computing the average personnel per base in the specified regions"
    }
  },
  {
    "example_id": 738,
    "prompt": "What is the total revenue for each genre of music in the United States for the year 2020?",
    "generated_sql": "SELECT genre, SUM(revenue) as total_revenue FROM music_revenue WHERE country = 'USA' AND year = 2020 GROUP BY genre;",
    "reference_sql": "SELECT genre, SUM(revenue) as total_revenue FROM music_genres WHERE country = 'USA' AND YEAR(event_date) = 2020 GROUP BY genre;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 739,
    "prompt": "How many programs were successfully completed in the 'Programs' table?",
    "generated_sql": "SELECT COUNT(*) FROM Programs;",
    "reference_sql": "SELECT COUNT(*) FROM Programs WHERE Status = 'Completed';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing WHERE clause to filter only successfully completed programs"
    }
  },
  {
    "example_id": 740,
    "prompt": "What is the total budget allocated for each program in the year 2021?",
    "generated_sql": "SELECT program, SUM(budget) FROM Programs WHERE year = 2021 GROUP BY program;",
    "reference_sql": "SELECT ProgramName, SUM(Budget) OVER (PARTITION BY ProgramName) as TotalBudget FROM Programs WHERE YEAR(ProgramStartDate) = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 741,
    "prompt": "What is the total number of volunteer signups in each region in 2028, including any duplicates?",
    "generated_sql": "SELECT region, SUM(volunteer_signups) AS total_volunteer_signups FROM volunteer_signups WHERE YEAR(signup_date) = 2028 GROUP BY region;",
    "reference_sql": "SELECT V.Region, COUNT(V.VolunteerID) as TotalSignups  FROM Volunteers V JOIN VolunteerSignups S ON V.VolunteerID = S.VolunteerID WHERE YEAR(SignupDate) = 2028 GROUP BY V.Region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Should count each signup (COUNT(*)) instead of summing a non-existent volunteer_signups column"
    }
  },
  {
    "example_id": 742,
    "prompt": "What is the percentage of teachers who have completed more than 20 hours of professional development?",
    "generated_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM teachers)) as percentage FROM teachers WHERE number_of_hours_completed > 20;",
    "reference_sql": "SELECT 100.0 * AVG(CASE WHEN hours > 20 THEN 1 ELSE 0 END) as percentage FROM teachers;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 743,
    "prompt": "What is the minimum salary for employees who joined the company in the summer?",
    "generated_sql": "SELECT MIN(salary) FROM employees WHERE company = 'Amazon';",
    "reference_sql": "SELECT MIN(Salary) FROM Employees WHERE MONTH(HireDate) IN (6, 7, 8);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters by company instead of join date; does not restrict to summer joiners"
    }
  },
  {
    "example_id": 744,
    "prompt": "What is the average age of cricket players in the 'cricket_players' table?",
    "generated_sql": "SELECT AVG(age) FROM cricket_players;",
    "reference_sql": "SELECT AVG(age) FROM cricket_players;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 745,
    "prompt": "Who are the top 3 goal scorers in the FIFA World Cup?",
    "generated_sql": "SELECT name, score FROM goals WHERE country = 'USA' ORDER BY score DESC LIMIT 3;",
    "reference_sql": "SELECT player_name, goals FROM world_cup_goals ORDER BY goals DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only USA goals instead of all players"
    }
  },
  {
    "example_id": 746,
    "prompt": "Who has the highest number of wins as a coach for each team in a season?",
    "generated_sql": "SELECT team, COUNT(*) as wins FROM team_championships JOIN teams ON team_championships.team_id = teams.team_id GROUP BY team ORDER BY wins DESC LIMIT 1;",
    "reference_sql": "SELECT c.TeamID, c.CoachName, COUNT(CASE WHEN h.HomeTeamResult = 'Win' THEN 1 END) + COUNT(CASE WHEN a.HomeTeamResult = 'Win' THEN 1 END) AS Wins FROM Coach c LEFT JOIN Match h ON c.TeamID = h.HomeTeamID AND h.HomeTeamResult = 'Win' LEFT JOIN Match a ON c.TeamID = a.AwayTeamID AND a.HomeTeamResult = 'Win' GROUP BY c.TeamID, c.CoachName ORDER BY Wins DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts team championships rather than coach wins per season and returns only one result instead of per team and season."
    }
  },
  {
    "example_id": 747,
    "prompt": "What is the average donation amount for each age group?",
    "generated_sql": "SELECT Age, AVG(Amount) as Avg_Donation_Amount FROM Donations GROUP BY Age;",
    "reference_sql": "SELECT AgeGroup, AVG(DonationAmount) FROM DonorAges GROUP BY AgeGroup;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by exact age rather than predefined age ranges (\u2018age groups\u2019)"
    }
  },
  {
    "example_id": 748,
    "prompt": "List all social good technology programs launched in the first half of the year 2022.",
    "generated_sql": "SELECT name FROM social_good_programs WHERE launch_date BETWEEN '2022-01-01' AND '2022-06-30';",
    "reference_sql": "SELECT DISTINCT Program FROM Social_Good_Tech WHERE Month BETWEEN 1 AND 6;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 749,
    "prompt": "What is the average fare collected per trip for buses in the city of Seattle?",
    "generated_sql": "SELECT AVG(fare) FROM trip_data WHERE city = 'Seattle';",
    "reference_sql": "SELECT AVG(f.fare) FROM fares f JOIN buses b ON f.bus_id = b.id WHERE b.city = 'Seattle';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to include only bus trips (e.g., WHERE mode = 'Bus')"
    }
  },
  {
    "example_id": 750,
    "prompt": "What are the top 5 most active cities in terms of user posts on the social media platform, MyTweet?",
    "generated_sql": "SELECT city, user_post_count FROM (SELECT city, user_post_count, ROW_NUMBER() OVER (ORDER BY user_post_count DESC) as rn FROM user_posts GROUP BY city, user_post_count ORDER BY rn DESC LIMIT 5) AS subquery WHERE rn <= 5;",
    "reference_sql": "SELECT c.city_name, COUNT(up.city_id) as post_count FROM cities c INNER JOIN user_posts up ON c.city_id = up.city_id GROUP BY c.city_name ORDER BY post_count DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Misuses GROUP BY and ROW_NUMBER, leading to incorrect ranking; should aggregate posts per city then order by count and limit."
    }
  },
  {
    "example_id": 751,
    "prompt": "Who were the top 3 content creators in terms of likes received on their posts in January 2022?",
    "generated_sql": "SELECT name, likes FROM content_creators WHERE creation_date >= '2022-01-01' AND creation_date < '2022-01-31' GROUP BY name ORDER BY likes DESC LIMIT 3;",
    "reference_sql": "SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not sum likes per creator, uses wrong table/field, and date range incorrect"
    }
  },
  {
    "example_id": 752,
    "prompt": "What is the average financial wellbeing score in Q2 2022 for customers with a Shariah-compliant finance account?",
    "generated_sql": "SELECT AVG(financial_wellbeing_score) FROM customer_finance WHERE is_shariah_compliant = TRUE AND account_type = 'Shariah-compliant';",
    "reference_sql": "SELECT AVG(financial_wellbeing_score) FROM shariah_compliant_customers WHERE shariah_compliant_account = true AND wellbeing_assessment_date BETWEEN '2022-04-01' AND '2022-06-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing date filter for Q2 2022"
    }
  },
  {
    "example_id": 753,
    "prompt": "What is the maximum amount invested by a client in Shariah-compliant funds?",
    "generated_sql": "SELECT MAX(investment_amount) FROM clients WHERE investment_method = 'Shariah-compliant';",
    "reference_sql": "SELECT clients.client_name, MAX(shariah_compliant_funds_investments.amount_invested) FROM clients JOIN shariah_compliant_funds_investments ON clients.client_id = shariah_compliant_funds_investments.client_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 754,
    "prompt": "What is the total quantity of dairy products sold in each country?",
    "generated_sql": "SELECT country, SUM(quantity) FROM sales GROUP BY country;",
    "reference_sql": "SELECT c.CountryName, p.ProductName, SUM(p.QuantitySold) as TotalQuantitySold FROM Countries c JOIN Products p ON c.CountryID = 1 GROUP BY c.CountryName, p.ProductName HAVING p.Dairy = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not filter for dairy products"
    }
  },
  {
    "example_id": 755,
    "prompt": "What are the total sales and quantity of goods sold by each salesperson, grouped by city?",
    "generated_sql": "SELECT SalespersonID, City, SUM(Quantity) AS TotalSales, SUM(Quantity) AS TotalSalesByCity FROM Sales GROUP BY SalespersonID, City;",
    "reference_sql": "SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums only quantity twice instead of calculating total sales amount and quantity"
    }
  },
  {
    "example_id": 756,
    "prompt": "Delete all records in the public_parks table where the number of visitors is less than 5000000?",
    "generated_sql": "DELETE FROM public_parks WHERE visitor_count < 5000000;",
    "reference_sql": "DELETE FROM public_parks WHERE visitors < 5000000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 757,
    "prompt": "What is the total number of open data initiatives in the healthcare sector?",
    "generated_sql": "SELECT COUNT(*) FROM open_data WHERE sector = 'Healthcare';",
    "reference_sql": "SELECT COUNT(*) FROM open_data_initiatives WHERE sector = 'Healthcare';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 758,
    "prompt": "What is the average GPA of graduate students in the Computer Science department?",
    "generated_sql": "SELECT AVG(gpa) FROM grad_students WHERE department = 'Computer Science';",
    "reference_sql": "SELECT AVG(GPA) FROM students WHERE department = 'Computer Science';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 759,
    "prompt": "List the number of mental health appointments for each gender, in descending order.",
    "generated_sql": "SELECT gender, COUNT(*) as num_appointments FROM mental_health_appointments GROUP BY gender ORDER BY num_appointments DESC;",
    "reference_sql": "SELECT GenderID, COUNT(AppointmentID) as NumAppointments FROM MentalHealthAppointment GROUP BY GenderID ORDER BY NumAppointments DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 760,
    "prompt": "What is the percentage of community health workers who speak Spanish, and how does this vary by state?",
    "generated_sql": "SELECT state, AVG(percentage) AS avg_percentage FROM community_health_workers WHERE language = 'Spanish' GROUP BY state;",
    "reference_sql": "SELECT c.state, (COUNT(*) FILTER (WHERE c.speaks_spanish = TRUE)) * 100.0 / COUNT(*) as pct_spanish_speakers FROM community_health_workers_lang c GROUP BY c.state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Averages a nonexistent percentage column for Spanish-only rows instead of computing the ratio of Spanish-speaking workers to total workers per state."
    }
  },
  {
    "example_id": 761,
    "prompt": "What is the total number of community health workers in New York and California?",
    "generated_sql": "SELECT SUM(num_workers) FROM HealthCare WHERE state IN ('New York', 'California');",
    "reference_sql": "SELECT COUNT(*) FROM community_health_workers WHERE state IN ('New York', 'California');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 762,
    "prompt": "What is the name and location of the top 3 most donated heritage sites?",
    "generated_sql": "SELECT site_type, name, location, ROW_NUMBER() OVER (ORDER BY donated DESC) as rank FROM heritage_sites ORDER BY rank DESC;",
    "reference_sql": "SELECT Name, Location FROM (SELECT Name, Location, ROW_NUMBER() OVER (ORDER BY TotalDonations DESC) as rn FROM HeritageSites) t WHERE rn <= 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not limit to top 3 rows and includes extra columns"
    }
  },
  {
    "example_id": 763,
    "prompt": "Which heritage sites have the most and least visitor reviews?",
    "generated_sql": "SELECT site_name, visitor_review_count, visitor_review_count FROM heritage_site_visitor_reviews GROUP BY site_name, visitor_review_count ORDER BY visitor_review_count DESC;",
    "reference_sql": "SELECT SiteName, Reviews, ROW_NUMBER() OVER (ORDER BY Reviews DESC) AS Rank, COUNT(*) OVER () AS TotalSites FROM HeritageSites;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query lists all sites without isolating the single most and least reviewed sites and duplicates the review count column"
    }
  },
  {
    "example_id": 764,
    "prompt": "List the unique species of marine life in the 'Marine Life Species' table.",
    "generated_sql": "SELECT DISTINCT Species FROM Marine LifeSpecies;",
    "reference_sql": "SELECT DISTINCT species_name FROM marine_life_species;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Table name is incorrect; should reference 'Marine Life Species'"
    }
  },
  {
    "example_id": 765,
    "prompt": "What are the names and specializations of researchers who have published reports on cetacean species?",
    "generated_sql": "SELECT Name, Specialization FROM ResearchRecords WHERE Species = 'Cetacea';",
    "reference_sql": "SELECT Researchers.name, Researchers.specialization FROM Researchers JOIN Reports ON Researchers.id = Reports.researcher_id JOIN Species ON Reports.species_id = Species.id WHERE Species.family = 'Cetacean';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters Species = 'Cetacea' without checking actual reports or cetacean species names and lacks join to publications"
    }
  },
  {
    "example_id": 766,
    "prompt": "What are the top 5 most frequently ordered dishes by customers in NY?",
    "generated_sql": "SELECT dish, COUNT(*) as count FROM orders WHERE customer_location = 'NY' GROUP BY dish ORDER BY count DESC LIMIT 5;",
    "reference_sql": "SELECT o.dish, COUNT(*) as count FROM customer c JOIN orders o ON c.customer_id = o.customer_id WHERE c.zip = '10001' GROUP BY o.dish ORDER BY count DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 767,
    "prompt": "What is the average price of menu items in each category, excluding items with inventory_count = 0?",
    "generated_sql": "SELECT category, AVG(price) FROM menu_items WHERE inventory_count > 0 GROUP BY category;",
    "reference_sql": "SELECT category, AVG(price) as avg_price FROM menu WHERE inventory_count > 0 GROUP BY category;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 768,
    "prompt": "Calculate the average sales of each military equipment type in the Middle East.",
    "generated_sql": "SELECT equipment_type, AVG(Sales) as avg_sales FROM EquipmentSales WHERE region IN ('Middle East') GROUP BY equipment_type;",
    "reference_sql": "SELECT EquipmentTypes.product, AVG(EquipmentSales.sales) FROM EquipmentTypes INNER JOIN EquipmentSales ON EquipmentTypes.id = EquipmentSales.equipment_type_id WHERE EquipmentSales.region = 'Middle East' GROUP BY EquipmentTypes.product;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 769,
    "prompt": "Determine the average monthly data usage for customers in each region.",
    "generated_sql": "SELECT region, AVG(data_usage) as avg_data_usage FROM customers GROUP BY region;",
    "reference_sql": "SELECT region, AVG(data_usage) FROM subscribers_2 GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 770,
    "prompt": "Show the number of rock songs released in the 1990s.",
    "generated_sql": "SELECT COUNT(DISTINCT song_name) FROM rock_songs WHERE release_year BETWEEN 1990 AND 1999;",
    "reference_sql": "SELECT COUNT(song_id) FROM Songs WHERE release_year BETWEEN 1990 AND 1999 AND genre = 'rock';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 771,
    "prompt": "Identify the top 3 regions with the highest average donation per volunteer, from the 'Volunteer_Donation' table, grouped by Region.",
    "generated_sql": "SELECT Region, AVG(Donation) FROM Volunteer_Donation GROUP BY Region ORDER BY AVG(Donation) DESC LIMIT 3;",
    "reference_sql": "SELECT Region, AVG(Donation) AS Average_Donation, ROW_NUMBER() OVER (ORDER BY AVG(Donation) DESC) AS Rank FROM Volunteer_Donation GROUP BY Region HAVING COUNT(*) > 5 ORDER BY Rank;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 772,
    "prompt": "What is the total number of marine species in the Atlantic Ocean that are affected by ocean acidification?",
    "generated_sql": "SELECT COUNT(*) FROM marine_species WHERE ocean_acidification = true AND species_name LIKE '%Albatross%' AND species_description LIKE '%Albatross%' AND species_type = 'Fish';",
    "reference_sql": "SELECT COUNT(*) FROM marine_species WHERE ocean = 'Atlantic' AND affected_by_acidification = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query incorrectly filters by Albatross and Fish, missing Atlantic Ocean filter"
    }
  },
  {
    "example_id": 773,
    "prompt": "Which causes have received the most funding from donors aged 25-34 in the effective altruism movement?",
    "generated_sql": "SELECT causes.name, donations.donor_age, donations.donor_year FROM causes JOIN donations ON causes.id = donations.cause_id WHERE donations.donor_age >= 25 AND donations.donor_year = 2023;",
    "reference_sql": "SELECT cause, SUM(donation) FROM donor_demographics WHERE age BETWEEN 25 AND 34 GROUP BY cause ORDER BY SUM(donation) DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter donors aged <=34, does not aggregate funding by cause, and incorrectly restricts to a single year"
    }
  },
  {
    "example_id": 774,
    "prompt": "Display the number of players who earned an achievement on '2022-01-01' in 'player_achievements' table",
    "generated_sql": "SELECT COUNT(*) FROM player_achievements WHERE achievement = '2022-01-01';",
    "reference_sql": "SELECT COUNT(player_id) FROM player_achievements WHERE date_earned = '2022-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on wrong column and counts all rows; should filter on the date column and count distinct player IDs"
    }
  },
  {
    "example_id": 775,
    "prompt": "How many players in each country are part of the \"InternationalGamers\" community?",
    "generated_sql": "SELECT countries.country_name, COUNT(players.player_id) FROM countries JOIN players ON countries.id = players.country_id WHERE players.community = 'InternationalGamers' GROUP BY countries.country_name;",
    "reference_sql": "SELECT Country, COUNT(DISTINCT PlayerID) FROM Players WHERE GamingCommunity = 'InternationalGamers' GROUP BY Country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 776,
    "prompt": "Add new satellite imagery for farm_id 222",
    "generated_sql": "INSERT INTO satellite_imAGES (id, farm_id, name, type, location) VALUES (222, 222, 'Farm 222', 'Satellite Type A', 'Cairo');",
    "reference_sql": "INSERT INTO satellite_imagery (id, farm_id, image_url, capture_date) VALUES (7, 222, 'https://example.com/image1.jpg', '2022-05-30');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses arbitrary values for name, type, and location and incorrectly uses farm_id as the record id, not reflecting actual imagery details."
    }
  },
  {
    "example_id": 777,
    "prompt": "Insert new records into the 'livestock_health' table with values (1, 'cow', 'healthy', '2022-06-15 15:20:00')",
    "generated_sql": "INSERT INTO livestock_health (id, name, genetic_score, date) VALUES (1, 'cow', 80, '2022-06-15 15:20:00');",
    "reference_sql": "INSERT INTO livestock_health (health_id, animal_type, health_status, timestamp) VALUES (1, 'cow', 'healthy', '2022-06-15 15:20:00');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserted into wrong column and used numeric value instead of the 'healthy' status"
    }
  },
  {
    "example_id": 778,
    "prompt": "What is the maximum property price in wheelchair-accessible neighborhoods in Singapore?",
    "generated_sql": "SELECT MAX(price) FROM properties WHERE neighborhood = 'Shanghai' AND is_wheelchair_accessible = true;",
    "reference_sql": "SELECT MAX(Singapore_Properties.Property_Price) FROM Singapore_Properties INNER JOIN Singapore_Neighborhoods ON Singapore_Properties.Neighborhood_Name = Singapore_Neighborhoods.Neighborhood_Name WHERE Singapore_Neighborhoods.Wheelchair_Accessibility = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters neighborhood = 'Shanghai' and does not restrict to properties in Singapore."
    }
  },
  {
    "example_id": 779,
    "prompt": "What is the average price for vegetarian menu items in 'Gourmet G'?",
    "generated_sql": "SELECT AVG(price) FROM menu_items WHERE menu_type = 'Vegetarian' AND menu_name LIKE 'Gourmet%';",
    "reference_sql": "SELECT AVG(Price) FROM Menu WHERE Restaurant = 'Gourmet G' AND Vegan = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on menu_name LIKE 'Gourmet%' instead of exactly matching restaurant 'Gourmet G'"
    }
  },
  {
    "example_id": 780,
    "prompt": "What's the average age of athletes in 'athlete_details' table, grouped by their sport?",
    "generated_sql": "SELECT sport, AVG(age) OVER (PARTITION BY sport) as avg_age FROM athlete_details;",
    "reference_sql": "SELECT sport, AVG(age) FROM athlete_details GROUP BY sport;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses window function returning one row per athlete instead of grouping to one row per sport"
    }
  },
  {
    "example_id": 781,
    "prompt": "How many security incidents were there per month in the last year, broken down by severity level?",
    "generated_sql": "SELECT severity, MONTH(incident_date) AS incident_month, SUM(incidents) AS total_incidents FROM security_incidents WHERE incident_date >= DATEADD(year, -1, GETDATE()) GROUP BY incident_month, severity;",
    "reference_sql": "SELECT DATEPART(year, incident_date) as year, DATEPART(month, incident_date) as month, severity, COUNT(*) as count FROM security_incidents WHERE incident_date >= DATEADD(year, -1, GETDATE()) GROUP BY DATEPART(year, incident_date), DATEPART(month, incident_date), severity ORDER BY year, month, severity;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "SUM(incidents) is incorrect; should COUNT(*) and GROUP BY MONTH(incident_date) instead of alias"
    }
  },
  {
    "example_id": 782,
    "prompt": "What was the total revenue for each category of accessories in the United Kingdom in Q3 2021?",
    "generated_sql": "SELECT Category, SUM(Price) AS Total_Revenue FROM Accessories WHERE Country = 'United Kingdom' AND Quarter = 'Q3' AND YEAR(Date) = 2021 GROUP BY Category;",
    "reference_sql": "SELECT category, SUM(revenue) as total_revenue FROM sales WHERE country = 'United Kingdom' AND category LIKE '%accessories%' AND sale_date BETWEEN '2021-07-01' AND '2021-09-30' GROUP BY category;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It sums only Price and assumes a Quarter column instead of calculating revenue (Price*Quantity) and filtering the Date for Q3 2021."
    }
  },
  {
    "example_id": 783,
    "prompt": "Find the total number of policies issued by 'Department A' and 'Department B'?",
    "generated_sql": "SELECT COUNT(*) FROM policy_adoption WHERE Department IN ('Department A', 'Department B');",
    "reference_sql": "SELECT COUNT(*) FROM policies WHERE department IN ('Department A', 'Department B');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 784,
    "prompt": "List the top 2 countries with the highest water consumption in the current month.",
    "generated_sql": "SELECT country, water_consumption FROM water_consumption WHERE month = (SELECT MIN(month) FROM water_consumption WHERE year = 2022) AND water_consumption >= 0.0 AND water_consumption < 0.125;",
    "reference_sql": "SELECT country, consumption FROM (SELECT country, consumption, ROW_NUMBER() OVER (ORDER BY consumption DESC) as rank FROM water_consumption WHERE date >= '2022-05-01' GROUP BY country, consumption) subquery WHERE rank <= 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not select top 2 countries, uses incorrect month filter and lacks ORDER BY and LIMIT"
    }
  },
  {
    "example_id": 785,
    "prompt": "What is the average monthly water consumption per household in Arizona for the months of June, July, and August?",
    "generated_sql": "SELECT AVG(Water_Consumption) AS Avg_Monthly_Water_Consumption FROM Households WHERE State = 'Arizona' AND Month BETWEEN 6 AND 8 GROUP BY Month;",
    "reference_sql": "SELECT AVG(water_consumption) FROM arizona_households WHERE month IN ('June', 'July', 'August') GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query groups by Month but does not include the Month column in the SELECT list to label each average."
    }
  },
  {
    "example_id": 786,
    "prompt": "What is the maximum number of AI ethics complaints received by organizations in South Asia, and which organization received it?",
    "generated_sql": "SELECT organization, MAX(complaints) FROM ai_ethics_charts WHERE region = 'South Asia' GROUP BY organization;",
    "reference_sql": "SELECT MAX(num_complaints) as max_complaints, organization FROM south_asia_ethics_complaints WHERE region = 'South Asia' GROUP BY organization HAVING max_complaints = (SELECT MAX(num_complaints) FROM south_asia_ethics_complaints WHERE region = 'South Asia');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query returns max complaints per organization instead of the single overall maximum and organization"
    }
  },
  {
    "example_id": 787,
    "prompt": "What is the average age of male and female farmers in the 'rural_development' schema?",
    "generated_sql": "SELECT gender, AVG(age) FROM rural_development.female_farmers GROUP BY gender;",
    "reference_sql": "SELECT gender, AVG(age) as avg_age FROM farmers GROUP BY gender;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects only from female_farmers and omits male farmers"
    }
  },
  {
    "example_id": 788,
    "prompt": "Who are the top 5 countries with the highest economic diversification index for agricultural projects?",
    "generated_sql": "SELECT country, (DENSE_RANK() OVER (ORDER BY economic_ Diversification IN ('Africa', 'Asia', 'Europe') DESC) - 1) as ranking FROM AgriculturalProjects WHERE economic_ Diversification > 0.5;",
    "reference_sql": "SELECT country, economic_diversification_index FROM Projects WHERE project_type = 'Agricultural' ORDER BY economic_diversification_index DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses an incorrect IN clause on the numeric index, misuses DENSE_RANK, lacks LIMIT 5, and applies an unnecessary WHERE filter."
    }
  },
  {
    "example_id": 789,
    "prompt": "Determine the number of animals in the animal_population table, partitioned by animal_species and ordered by the animal count in descending order.",
    "generated_sql": "SELECT animal_species, COUNT(animal_id) AS animal_count FROM animal_population GROUP BY animal_species ORDER BY animal_count DESC;",
    "reference_sql": "SELECT animal_species, COUNT(*) AS animal_count, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM animal_population GROUP BY animal_species;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 790,
    "prompt": "What is the average water temperature for the Shrimp farm for the last 30 days?",
    "generated_sql": "SELECT AVG(temp) FROM water_temperatures WHERE farm = 'Shrimp Farm' AND date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) AND CURRENT_DATE;",
    "reference_sql": "SELECT AVG(temperature) avg_temp FROM FarmTemperature WHERE farm_id = 3 AND date >= (SELECT DATEADD(day, -30, GETDATE()));",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 791,
    "prompt": "What is the minimum biomass of fish in each species in the fish_stock table?",
    "generated_sql": "SELECT species, MIN(biomass) FROM fish_stock GROUP BY species;",
    "reference_sql": "SELECT species, MIN(biomass) FROM fish_stock GROUP BY species;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 792,
    "prompt": "What is the maximum labor cost per square foot for construction projects in Florida over $6,000,000?",
    "generated_sql": "SELECT MAX(labor_cost) FROM construction_projects WHERE state = 'Florida' AND labor_cost > 600000.0;",
    "reference_sql": "SELECT MAX(labor_cost_per_square_foot) FROM Labor_Cost_Per_Square_Foot WHERE state = 'Florida' AND budget > 6000000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses labor_cost instead of labor_cost_per_sq_ft and compares to 600000 instead of 6000000"
    }
  },
  {
    "example_id": 793,
    "prompt": "How many cases were opened in 2020?",
    "generated_sql": "SELECT COUNT(*) FROM cases WHERE YEAR(opening_date) = 2020;",
    "reference_sql": "SELECT COUNT(*) FROM CaseDates WHERE YEAR(OpenDate) = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 794,
    "prompt": "Which suppliers have provided raw materials for the production of chemicals with high environmental impact?",
    "generated_sql": "SELECT supplier_id FROM Suppliers WHERE raw_material = 'Recycled Polyester' AND environmental_impact = TRUE;",
    "reference_sql": "SELECT s.name FROM suppliers s INNER JOIN raw_materials rm ON s.id = rm.supplier_id INNER JOIN chemicals c ON rm.chemical_id = c.id WHERE c.environmental_impact > 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only on 'Recycled Polyester' and lacks joins to link suppliers with high-impact chemical production"
    }
  },
  {
    "example_id": 795,
    "prompt": "What is the total funding allocated for climate adaptation in 'Europe'?",
    "generated_sql": "SELECT SUM(Funding) FROM Funding WHERE Country IN ('France', 'Germany', 'Italy', 'Spain', 'UK');",
    "reference_sql": "SELECT SUM(allocation) FROM climate_funding INNER JOIN regions ON climate_funding.region_id = regions.id WHERE regions.region = 'Europe' AND climate_funding.initiative_type = 'Adaptation';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for climate adaptation projects and uses an incomplete hard-coded list of European countries"
    }
  },
  {
    "example_id": 796,
    "prompt": "What are the top 3 countries with the highest R&D expenditures in 2020?",
    "generated_sql": "SELECT country, RAND() OVER (PARTITION BY country ORDER BY RAND() DESC) as expenditure FROM rd_expenditures_2020 WHERE expenditure = (SELECT MAX(expenditure) FROM rd_expenditures_2020);",
    "reference_sql": "SELECT country, SUM(amount) as total_expenditure FROM rd_expenditures WHERE year = 2020 GROUP BY country ORDER BY total_expenditure DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses RAND() incorrectly and only selects the single maximum expenditure rather than top 3 countries."
    }
  },
  {
    "example_id": 797,
    "prompt": "What is the most common type of cancer in Australia?",
    "generated_sql": "SELECT type, COUNT(*) as total_cases FROM cancer_cases WHERE country = 'Australia' GROUP BY type ORDER BY total_cases DESC LIMIT 1;",
    "reference_sql": "SELECT type, cases FROM cancer_data WHERE country = 'Australia' ORDER BY cases DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 798,
    "prompt": "Count the number of startups founded by underrepresented minorities in the healthcare industry",
    "generated_sql": "SELECT COUNT(*) FROM founders WHERE industry = 'Healthcare' AND founder_ethnicity!= 'African American';",
    "reference_sql": "SELECT COUNT(*) FROM company WHERE industry = 'Healthcare' AND (founder_gender = 'Female' AND founder_race = 'African American') OR (founder_gender = 'Male' AND founder_race = 'Latino')",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters out African American instead of including underrepresented minorities and does not join or count startups correctly"
    }
  },
  {
    "example_id": 799,
    "prompt": "What is the total production of 'wheat' and 'rice' by small farmers in 'Asia'?",
    "generated_sql": "SELECT SUM(production_quantity) FROM production_data WHERE country = 'Asia' AND farm_type = 'Small';",
    "reference_sql": "SELECT SUM(yield) FROM crops JOIN farmers ON crops.farmer_id = farmers.id WHERE farmers.country = 'Asia' AND crops.name IN ('wheat', 'rice');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for crop types 'wheat' and 'rice'"
    }
  },
  {
    "example_id": 800,
    "prompt": "What marine species have been observed in both the Arctic and Southern Oceans?",
    "generated_sql": "SELECT name FROM marine_species WHERE habitat IN ('Arctic', 'Southern');",
    "reference_sql": "SELECT s.name FROM species s WHERE s.ocean_id IN (1, 2) GROUP BY s.name HAVING COUNT(DISTINCT s.ocean_id) = 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects species in either habitat rather than those in both; should ensure both regions"
    }
  },
  {
    "example_id": 801,
    "prompt": "Find the minimum transaction amount for 'ETH'.",
    "generated_sql": "SELECT MIN(transaction_amount) FROM transactions WHERE type = 'ETH';",
    "reference_sql": "SELECT MIN(transaction_amount) FROM transactions WHERE asset_id = 'ETH';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 802,
    "prompt": "What is the average carbon sequestration per hectare for each region?",
    "generated_sql": "SELECT r.region_name, AVG(s.carbon_sequestration) as avg_carbon_sequestration_per_hectare FROM regions r JOIN sequestration s ON r.id = s.region_id GROUP BY r.region_name;",
    "reference_sql": "SELECT region, AVG(sequestration) FROM carbon_sequestration;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 803,
    "prompt": "List all ingredients used in products from a specific brand.",
    "generated_sql": "SELECT ingredient_name FROM products WHERE brand = 'Fake Gourmet';",
    "reference_sql": "SELECT ingredient FROM ingredients INNER JOIN brands ON ingredients.brand_id = brands.brand_id WHERE brand_name = 'Lush';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects ingredients from products table without joining ingredients and does not use DISTINCT"
    }
  },
  {
    "example_id": 804,
    "prompt": "Delete all skincare products with 'Sensitive' in their name",
    "generated_sql": "DELETE FROM products WHERE sensitive = true;",
    "reference_sql": "DELETE FROM products WHERE category = 'Skincare' AND product_name LIKE '%Sensitive%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query checks a boolean column 'sensitive' instead of matching 'Sensitive' in the product name using LIKE"
    }
  },
  {
    "example_id": 805,
    "prompt": "How many new cosmetic products were launched by each brand in the last 12 months, ordered by the number of new products in descending order?",
    "generated_sql": "SELECT brand, COUNT(product_id) as new_products FROM cosmetics_launch WHERE launch_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) AND CURRENT_DATE GROUP BY brand ORDER BY new_products DESC;",
    "reference_sql": "SELECT brands.name, COUNT(*) as num_new_products FROM products JOIN brands ON products.brand_id = brands.brand_id WHERE products.launch_date >= DATEADD(year, -1, CURRENT_DATE) GROUP BY brands.name ORDER BY num_new_products DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 806,
    "prompt": "What was the average response time for fire incidents in January 2022?",
    "generated_sql": "SELECT AVG(response_time) FROM fire_incidents WHERE incident_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT AVG(response_time) FROM fire_incidents WHERE incident_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 807,
    "prompt": "What is the average attendance at events organized by cultural institutions in France?",
    "generated_sql": "SELECT AVG(attendance) FROM events WHERE institution = 'Cultural' AND country = 'France';",
    "reference_sql": "SELECT AVG(attendance) FROM cultural_events WHERE country = 'France';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It filters on institution = 'Cultural' instead of selecting events from institutions of type cultural (missing join or correct filter on institution type)"
    }
  },
  {
    "example_id": 808,
    "prompt": "Provide the number of threat intelligence reports generated per month for the past year, for the Asia-Pacific region.",
    "generated_sql": "SELECT DATE_FORMAT(report_date, '%Y-%m') as date, COUNT(*) as num_reports FROM threat_intelligence WHERE region = 'Asia-Pacific' GROUP BY date ORDER BY date;",
    "reference_sql": "SELECT DATE_FORMAT(report_date, '%Y-%m') as month, COUNT(*) as reports FROM threat_intelligence WHERE region = 'Asia-Pacific' AND report_date >= '2021-01-01' GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for past year date range"
    }
  },
  {
    "example_id": 809,
    "prompt": "What is the average transaction amount in EUR by city for the month of May 2022?",
    "generated_sql": "SELECT city, AVG(amount) FROM transactions WHERE transaction_date >= '2022-05-01' AND transaction_date < '2022-06-01' GROUP BY city;",
    "reference_sql": "SELECT customer_city, AVG(transaction_amount) as average_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_date BETWEEN '2022-05-01' AND '2022-05-31' AND transaction_currency = 'EUR' GROUP BY customer_city;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter or convert transactions to EUR currency"
    }
  },
  {
    "example_id": 810,
    "prompt": "What is the total transaction value for each month of the year 2021?",
    "generated_sql": "SELECT EXTRACT(MONTH FROM transaction_date) as month, SUM(transaction_value) as total_value FROM transactions WHERE transaction_date >= '2021-01-01' AND transaction_date < '2022-01-01' GROUP BY month;",
    "reference_sql": "SELECT YEAR(transaction_date) as year, MONTH(transaction_date) as month, SUM(transaction_value) as total_value FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY year, month;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 811,
    "prompt": "List the total number of workers in each department across all manufacturing plants",
    "generated_sql": "SELECT department, COUNT(*) FROM manufacturing_plants GROUP BY department;",
    "reference_sql": "SELECT d.department_name, COUNT(w.worker_id) as worker_count FROM departments d JOIN workers w ON d.department_id = w.department_id GROUP BY d.department_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts rows (plants), not the total number of workers; it should sum the worker count column per department"
    }
  },
  {
    "example_id": 812,
    "prompt": "What is the average salary of 'engineer' workers in each factory?",
    "generated_sql": "SELECT factory_id, employee_name, AVG(salary) as avg_salary FROM workers WHERE employee_name = 'engineer' GROUP BY factory_id;",
    "reference_sql": "SELECT f.factory_name, AVG(salary) FROM workers w INNER JOIN factories f ON w.factory_id = f.factory_id INNER JOIN roles r ON w.role_id = r.role_id WHERE r.role_name = 'engineer' GROUP BY f.factory_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "GROUP BY should only include factory_id and SELECT should not include employee_name; filter by job/title column, not employee_name"
    }
  },
  {
    "example_id": 813,
    "prompt": "How many healthcare workers are there in the \"rural_healthcenters\" table?",
    "generated_sql": "SELECT COUNT(*) FROM rural_healthcenters;",
    "reference_sql": "SELECT COUNT(*) FROM rural_healthcenters;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 814,
    "prompt": "What is the total number of medical facilities in rural Vietnam?",
    "generated_sql": "SELECT SUM(num_facilities) FROM medical_facilities WHERE location = 'Rural Vietnam';",
    "reference_sql": "SELECT COUNT(*) FROM medical_facilities WHERE location = 'Rural';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 815,
    "prompt": "Calculate the number of donations to human rights organizations in the USA.",
    "generated_sql": "SELECT COUNT(*) FROM donations WHERE country = 'USA' AND organization = 'Human Rights Organization';",
    "reference_sql": "SELECT COUNT(*) FROM (SELECT donation.donation_id FROM donation JOIN organization ON donation.org_id = organization.org_id WHERE organization.country = 'USA' AND organization.industry = 'Nonprofit' AND organization.name = 'Human Rights USA') AS donation_subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only rows where organization equals 'Human Rights Organization' instead of all human rights organizations"
    }
  },
  {
    "example_id": 816,
    "prompt": "What is the average annual budget for military technology in Europe, and how has it changed over the past 5 years?",
    "generated_sql": "SELECT AVG(budget) FROM technology WHERE country IN ('France', 'Germany', 'Spain', 'Italy', 'UK', 'Belgium', 'Portugal', 'Spain', 'United Kingdom', 'United States') AND technology_type = 'Military Technology';",
    "reference_sql": "SELECT AVG(budget) as avg_annual_budget, year FROM military_budget WHERE country IN ('France', 'Germany', 'UK') GROUP BY year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter the past 5 years, does not group by year to show changes, and includes non-European countries while omitting many European nations."
    }
  },
  {
    "example_id": 817,
    "prompt": "What is the number of intelligence personnel with experience greater than 5 years in the 'Intelligence_Personnel' table?",
    "generated_sql": "SELECT COUNT(*) FROM Intelligence_Personnel WHERE experience > 5;",
    "reference_sql": "SELECT COUNT(*) FROM Intelligence_Personnel WHERE experience > 5;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 818,
    "prompt": "What is the total number of volunteers and donors who are not from the United States or Canada?",
    "generated_sql": "SELECT COUNT(DISTINCT V.Name) as TotalVolunteers, COUNT(DISTINCT D.Name) as TotalDonors FROM Volunteers V JOIN Donors D ON V.DonorID = D.DonorID WHERE V.Country IN ('United States', 'Canada') GROUP BY V.Country;",
    "reference_sql": "SELECT COUNT(*) FROM VolunteersAndDonors WHERE country NOT IN ('USA', 'Canada');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters for US/Canada instead of excluding them and uses an incorrect join and grouping"
    }
  },
  {
    "example_id": 819,
    "prompt": "List all employees who have not completed any training programs, along with their department and position.",
    "generated_sql": "SELECT e.name, e.department, e.position FROM employees e JOIN training_programs t ON e.employee_id = t.employee_id WHERE e.completed = false;",
    "reference_sql": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Department, e.Position FROM Employees e LEFT JOIN TrainingPrograms tp ON e.EmployeeID = tp.EmployeeID LEFT JOIN EmployeeTrainings et ON tp.TrainingID = et.TrainingID AND e.EmployeeID = et.EmployeeID WHERE et.CompletionDate IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly joins employees to training_programs and filters on a non-existent e.completed field; it should identify employees with no completed training using a LEFT JOIN/NOT EXISTS on training_programs"
    }
  },
  {
    "example_id": 820,
    "prompt": "Insert a new record into the 'energy_storage' table for a flow battery with 5 MWh capacity, located in 'Quebec'",
    "generated_sql": "INSERT INTO energy_storage (id, capacity, location, year) VALUES (5, 10000000, 'Quebec', 2019);",
    "reference_sql": "INSERT INTO energy_storage (technology, capacity, location) VALUES ('flow', 5, 'Quebec');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserted capacity value is incorrect and missing flow battery type"
    }
  },
  {
    "example_id": 821,
    "prompt": "Calculate the total production from wells in the North Sea",
    "generated_sql": "SELECT SUM(production) FROM wells WHERE location = 'North Sea';",
    "reference_sql": "SELECT SUM(production) FROM wells WHERE location = 'North Sea';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 822,
    "prompt": "How many offshore wells were drilled in the Gulf of Mexico in each year since 2016?",
    "generated_sql": "SELECT year, COUNT(*) FROM offshore_wells WHERE region = 'Gulf of Mexico' AND drilling_year BETWEEN 2016 AND 2021 GROUP BY year;",
    "reference_sql": "SELECT COUNT(*) AS WellCount, EXTRACT(YEAR FROM DrillDate) AS Year  FROM OffshoreWells WHERE Location = 'Gulf of Mexico' GROUP BY Year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters drilling_year only up to 2021 and groups by undefined column 'year' instead of drilling_year and does not cover all years since 2016"
    }
  },
  {
    "example_id": 823,
    "prompt": "Which football teams have the highest number of wins in the 2021-2022 season?",
    "generated_sql": "SELECT name, MAX(won) FROM teams WHERE season = '2021-2022' GROUP BY name;",
    "reference_sql": "SELECT team_name, wins FROM football_teams ORDER BY wins DESC LIMIT 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns wins per team instead of filtering for the maximum wins across teams"
    }
  },
  {
    "example_id": 824,
    "prompt": "Delete records in the supplier_ethics table where the country is 'Bangladesh' and certification is not 'Fair Trade'",
    "generated_sql": "DELETE FROM supplier_ethics WHERE certification IS NOT 'Fair Trade';",
    "reference_sql": "DELETE FROM supplier_ethics WHERE country = 'Bangladesh' AND certification != 'Fair Trade';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing condition for country = 'Bangladesh' and incorrect use of IS NOT operator"
    }
  },
  {
    "example_id": 825,
    "prompt": "Delete posts older than 30 days",
    "generated_sql": "DELETE FROM posts WHERE content LIKE '%old%' AND timestamp < CURRENT_TIMESTAMP;",
    "reference_sql": "DELETE FROM posts WHERE created_at < NOW() - INTERVAL 30 DAY;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters on content and uses CURRENT_TIMESTAMP without subtracting 30 days interval"
    }
  },
  {
    "example_id": 826,
    "prompt": "List all programs and their total budget",
    "generated_sql": "SELECT p.name, SUM(p.budget) FROM programs p GROUP BY p.name;",
    "reference_sql": "SELECT name, SUM(budget) as total_budget FROM programs GROUP BY name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 827,
    "prompt": "What is the average price of free-range eggs per store?",
    "generated_sql": "SELECT AVG(price) FROM eggs WHERE is_free_range = true;",
    "reference_sql": "SELECT s.store_name, AVG(p.price) as avg_price FROM Inventory i JOIN Stores s ON i.store_id = s.store_id JOIN Products p ON i.product_id = p.product_id WHERE p.is_free_range = TRUE AND p.product_category = 'egg' GROUP BY s.store_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing GROUP BY store_id to compute average per store"
    }
  },
  {
    "example_id": 828,
    "prompt": "What is the average delivery time for shipments to the Southeast region, grouped by shipment type?",
    "generated_sql": "SELECT type, AVG(delivery_time) FROM shipments_southeast WHERE region = 'Southeast' GROUP BY type;",
    "reference_sql": "SELECT shipment_type, AVG(delivery_time) FROM logistics.shipments WHERE region = 'Southeast' GROUP BY shipment_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query references a nonstandard table shipments_southeast instead of filtering the main shipments table for region = 'Southeast'"
    }
  },
  {
    "example_id": 829,
    "prompt": "What is the total quantity of items shipped per warehouse to each country?",
    "generated_sql": "SELECT c.state, SUM(s.quantity) AS total_shipped FROM shipments s JOIN warehouses w ON s.warehouse_id = w.id WHERE w.country = 'USA' GROUP BY c.state;",
    "reference_sql": "SELECT WarehouseId, Destination, SUM(Quantity) AS TotalQuantity FROM Shipments GROUP BY WarehouseId, Destination;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect grouping and filtering: uses undefined alias 'c', restricts to USA, and groups by state instead of warehouse and country."
    }
  },
  {
    "example_id": 830,
    "prompt": "What is the total amount of budget allocated for each sector by the state government for the year 2021?",
    "generated_sql": "SELECT s.name, SUM(s.budget) as total_budget FROM state_budget s JOIN state_government sg ON s.state_id = sg.id WHERE s.year = 2021 GROUP BY s.name;",
    "reference_sql": "SELECT sector_id, SUM(amount) as total_budget FROM budget WHERE year = 2021 GROUP BY sector_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 831,
    "prompt": "Create a view for health equity metrics",
    "generated_sql": "CREATE VIEW health_equity_metrics AS SELECT * FROM (SELECT * FROM health_equity_metrics GROUP BY country) WHERE country IN ('China', 'India') UNION ALL SELECT * FROM health_equity_metrics WHERE country IN ('China', 'India');",
    "reference_sql": "CREATE OR REPLACE VIEW health_equity_view AS SELECT * FROM health_equity;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query references the view being created, duplicates data, and does not implement meaningful health equity metrics"
    }
  },
  {
    "example_id": 832,
    "prompt": "List the number of virtual tours in India and Argentina.",
    "generated_sql": "SELECT country, COUNT(*) as num_tours FROM virtual_tours WHERE country IN ('India', 'Argentina') GROUP BY country;",
    "reference_sql": "SELECT COUNT(*) FROM virtual_tours WHERE location IN ('India', 'Argentina');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 833,
    "prompt": "What is the total number of sustainable tour packages sold by each vendor, including virtual packages?",
    "generated_sql": "SELECT vendor, COUNT(*) as total FROM VendorSales WHERE virtual_package_type = 'Sustainable' GROUP BY vendor;",
    "reference_sql": "SELECT V.VendorName, SUM(P.Sales) as TotalSales FROM Vendors V INNER JOIN Packages P ON V.VendorID = P.VendorID GROUP BY V.VendorName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only virtual packages by virtual_package_type instead of all sustainable tour packages"
    }
  },
  {
    "example_id": 834,
    "prompt": "Maximum number of visitors for Impressionist exhibitions in London?",
    "generated_sql": "SELECT MAX(visitors) FROM Impressionist_Exhibitions WHERE city = 'London';",
    "reference_sql": "SELECT MAX(visitors) FROM Exhibitions WHERE art_period = 'Impressionist' AND location = 'London';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 835,
    "prompt": "Insert new records into the 'officers' table with officer_id 4, 5, first_name 'James', 'Karen', last_name 'Davis'",
    "generated_sql": "INSERT INTO officers (officer_id, officer_name, first_name, last_name) VALUES (4, 'James', 'Davis', 'Davis');",
    "reference_sql": "INSERT INTO officers (officer_id, first_name, last_name) VALUES (4, 'James', 'Davis'), (5, 'Karen', 'Davis');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Only inserts one record with incorrect column mapping; missing second record for officer_id 5"
    }
  },
  {
    "example_id": 836,
    "prompt": "Identify the number of whale sightings in the Arctic Ocean by year.",
    "generated_sql": "SELECT year, sightings FROM whale_sightings WHERE location = 'Arctic Ocean' ORDER BY year;",
    "reference_sql": "SELECT year, COUNT(*) FROM WhaleSightings WHERE location = 'Arctic Ocean' GROUP BY year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No aggregation by year to compute total sightings; missing GROUP BY or SUM/COUNT"
    }
  },
  {
    "example_id": 837,
    "prompt": "What is the total quantity of a specific dish sold on a given date?",
    "generated_sql": "SELECT SUM(quantity) FROM sales WHERE dish_name = 'Dinner' AND sale_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT SUM(quantity) as total_quantity_sold FROM sales WHERE dish_id = 1 AND date = '2022-01-02';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Hardcodes dish name and uses a date range instead of filtering for the given date"
    }
  },
  {
    "example_id": 838,
    "prompt": "What is the total quantity of ingredients sourced from local farmers?",
    "generated_sql": "SELECT SUM(quantity) FROM ingredients INNER JOIN farmers ON ingredients.farm_id = farmers.id WHERE farmers.location = 'local';",
    "reference_sql": "SELECT SUM(inventory.quantity) FROM inventory INNER JOIN suppliers ON inventory.supplier_id = suppliers.supplier_id WHERE suppliers.location = 'Local';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 839,
    "prompt": "What is the minimum production rate of zinc mines in India?",
    "generated_sql": "SELECT MIN(production_rate) FROM mines WHERE type = 'Zinc';",
    "reference_sql": "SELECT MIN(production_rate) FROM zinc_mines WHERE location = 'India';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for country = 'India'"
    }
  },
  {
    "example_id": 840,
    "prompt": "What is the maximum data usage for prepaid mobile customers in the Midwest region in the past month?",
    "generated_sql": "SELECT MAX(data_usage) FROM mobile_data_usage WHERE location = 'Midwest' AND data_usage > 0;",
    "reference_sql": "SELECT MAX(usage.data_usage) FROM usage JOIN customers ON usage.customer_id = customers.id WHERE customers.type = 'prepaid' AND customers.region = 'Midwest' AND usage.usage_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filters for prepaid customers and past month date range"
    }
  },
  {
    "example_id": 841,
    "prompt": "Which mobile subscribers have not made a call in the last 60 days?",
    "generated_sql": "SELECT DISTINCT subscriber_id FROM customers WHERE call_date BETWEEN DATEADD(day, -60, GETDATE()) AND GETDATE();",
    "reference_sql": "SELECT subscriber_id FROM mobile_subscribers WHERE last_call_date IS NULL OR last_call_date < DATE_SUB(CURDATE(), INTERVAL 60 DAY);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns subscribers who made calls in the last 60 days instead of those who have not"
    }
  },
  {
    "example_id": 842,
    "prompt": "What is the total revenue for each concert by city, ordered by total revenue?",
    "generated_sql": "SELECT city, SUM(revenue) as total_revenue FROM concerts GROUP BY city ORDER BY total_revenue DESC;",
    "reference_sql": "SELECT City, SUM(Revenue) as TotalRevenue FROM Concerts GROUP BY City ORDER BY TotalRevenue DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups only by city, but it needs to group by both concert and city to get total revenue per concert within each city."
    }
  },
  {
    "example_id": 843,
    "prompt": "Create a table for storing volunteer information and insert a record for a volunteer.",
    "generated_sql": "CREATE TABLE volunteer_info (id INT, name VARCHAR(50), age INT, gender INT, location VARCHAR(255));",
    "reference_sql": "INSERT INTO volunteers (id, name, hours) VALUES (1, 'Sarah Jones', 50.50);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing INSERT statement to add a volunteer record"
    }
  },
  {
    "example_id": 844,
    "prompt": "How many unique donors have contributed to Canadian non-profit organizations since January 1, 2020?",
    "generated_sql": "SELECT COUNT(DISTINCT donor_id) as unique_donors FROM Donors WHERE organization = 'Non-Profit Canada' AND start_date >= '2020-01-01' AND end_date < '2020-12-31';",
    "reference_sql": "SELECT COUNT(DISTINCT donor_name) FROM donors_canada WHERE country = 'Canada' AND donation_date >= '2020-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only a single organization name and limits end_date to before 2020-12-31 rather than including all Canadian non-profit donations since 2020-01-01."
    }
  },
  {
    "example_id": 845,
    "prompt": "Which countries have the highest ocean acidification levels in the Southern Ocean?",
    "generated_sql": "SELECT country, MAX(ocean_acidification) OVER (ORDER BY ocean_acidification DESC) as max_ocean_acidification FROM ocean_acidification_scotia_2;",
    "reference_sql": "SELECT country, acidification_level FROM country_acidification ca INNER JOIN southern_ocean s ON ca.ocean_id = s.id ORDER BY acidification_level DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using MAX() OVER (ORDER BY ...) yields a running maximum per row rather than selecting countries with the overall highest acidification"
    }
  },
  {
    "example_id": 846,
    "prompt": "List the top 3 recipient countries with the highest total donation amounts in the past year?",
    "generated_sql": "SELECT recipient_country, SUM(amount) FROM donations WHERE donation_date >= DATEADD(year, -1, CURRENT_DATE) GROUP BY recipient_country ORDER BY SUM(amount) DESC LIMIT 3;",
    "reference_sql": "SELECT RecipientCountry, SUM(DonationAmount) as TotalDonations FROM Donations WHERE DonationDate >= DATEADD(year, -1, CURRENT_TIMESTAMP) GROUP BY RecipientCountry ORDER BY TotalDonations DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 847,
    "prompt": "Display the top 10 players with the highest total playtime in 'player_stats' table",
    "generated_sql": "SELECT player_name, SUM(playtime) as total_playtime FROM player_stats GROUP BY player_name ORDER BY total_playtime DESC LIMIT 10;",
    "reference_sql": "SELECT player_name, SUM(total_playtime) AS total_playtime FROM player_stats GROUP BY player_name ORDER BY total_playtime DESC LIMIT 10;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 848,
    "prompt": "What are the budget allocations for the top 2 most expensive public facilities in the state of California?",
    "generated_sql": "SELECT facility_name, SUM(budget) as total_budget FROM Facilities WHERE state = 'California' AND budget < (SELECT MAX(budget) FROM Facilities WHERE state = 'California') GROUP BY facility_name ORDER BY total_budget DESC LIMIT 2;",
    "reference_sql": "SELECT name, budget_allocation FROM public_facilities WHERE state = 'California' ORDER BY budget_allocation DESC LIMIT 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Excludes the highest budget facility by using budget < MAX(budget) and sums budgets, retrieving 2nd and 3rd instead of top 2"
    }
  },
  {
    "example_id": 849,
    "prompt": "What is the total number of public hospitals in cities with a population greater than 1 million?",
    "generated_sql": "SELECT SUM(hospital_count) FROM public_hospitals WHERE city_population > 1000000;",
    "reference_sql": "SELECT name, SUM(num_hospitals) as 'Total Public Hospitals' FROM City WHERE population > 1000000 GROUP BY name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 850,
    "prompt": "Get the number of carbon offset programs implemented by year",
    "generated_sql": "SELECT year, COUNT(*) FROM carbon_offset_programs GROUP BY year;",
    "reference_sql": "SELECT start_year, COUNT(*) as num_programs FROM carbon_offset_programs GROUP BY start_year ORDER BY start_year;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 851,
    "prompt": "Calculate the revenue for each restaurant, considering only transactions that occurred after a specific date (e.g., '2022-01-01').",
    "generated_sql": "SELECT r.name, SUM(rd.revenue) as total_revenue FROM restaurants r INNER JOIN transactions t ON r.restaurant_id = t.restaurant_id WHERE r.transaction_date >= '2022-01-01' GROUP BY r.name;",
    "reference_sql": "SELECT R.name, SUM(T.amount) as revenue FROM Restaurants R JOIN Transactions T ON R.id = T.rest_id WHERE T.date > '2022-01-01' GROUP BY R.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses wrong alias and table for revenue and transaction_date (should use t.revenue and t.transaction_date, not rd or r.transaction_date)"
    }
  },
  {
    "example_id": 852,
    "prompt": "What is the daily revenue trend for all restaurants?",
    "generated_sql": "SELECT restaurant_id, revenue, SUM(revenue) as total_revenue, AVG(revenue) as avg_revenue FROM restaurant_revenue GROUP BY restaurant_id;",
    "reference_sql": "SELECT date, restaurant_id, revenue FROM daily_revenue;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by restaurant_id without grouping by date, so it does not show daily revenue trends"
    }
  },
  {
    "example_id": 853,
    "prompt": "What is the total revenue generated by organic menu items in Seattle?",
    "generated_sql": "SELECT SUM(revenue) FROM menu_revenue WHERE is_organic = TRUE AND location = 'Seattle';",
    "reference_sql": "SELECT SUM(price - cost) AS total_revenue FROM MenuItems WHERE location = 'Seattle' AND organic = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 854,
    "prompt": "Which menu items are served at all locations?",
    "generated_sql": "SELECT menu_item, location FROM menu_items ORDER BY location ASC;",
    "reference_sql": "SELECT menu_item FROM menu_items GROUP BY menu_item HAVING COUNT(DISTINCT location) = (SELECT COUNT(DISTINCT location) FROM menu_items);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query lists all menu items and locations but does not determine items served at every location."
    }
  },
  {
    "example_id": 855,
    "prompt": "What is the total number of security incidents that occurred in the last month and were resolved within 24 hours?",
    "generated_sql": "SELECT COUNT(*) FROM security_incidents WHERE incident_date >= DATE_SUB(CURRENT_DATE, INTERVAL 24 DAY) AND resolution_date >= DATE_SUB(CURRENT_DATE, INTERVAL 24 DAY);",
    "reference_sql": "SELECT COUNT(*) FROM incidents WHERE DATEDIFF(resolved, date) <= 1 AND date >= '2022-01-01' AND date < '2022-02-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses DATE_SUB with 24 DAY instead of 1 MONTH and does not check resolution within 24 hours of the incident date"
    }
  },
  {
    "example_id": 856,
    "prompt": "Which cybersecurity policies were added or updated in the last month and apply to cloud infrastructure in the financial sector?",
    "generated_sql": "SELECT policy_name FROM cyber_policies WHERE policy_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) OR policy_date IS NULL;",
    "reference_sql": "SELECT policy_id, policy_name FROM Policies WHERE policy_category = 'cloud infrastructure' AND policy_target_sector = 'financial' AND (policy_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE OR (policy_date < DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND EXISTS (SELECT * FROM Policies AS updated_policies WHERE updated_policies.policy_id = Policies.policy_id AND updated_policies.policy_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE)));",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filters for cloud infrastructure and financial sector"
    }
  },
  {
    "example_id": 857,
    "prompt": "Find the maximum number of electric vehicles sold in a single month",
    "generated_sql": "SELECT MAX(sale_count) FROM electric_vehicles;",
    "reference_sql": "SELECT MAX(COUNT(*)) as MaxSales FROM Sales WHERE Electric = true GROUP BY Month, Year;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 858,
    "prompt": "How many autonomous cars were sold in 2020 and 2021 in the autonomous_vehicles table?",
    "generated_sql": "SELECT SUM(sales) FROM autonomous_vehicles WHERE year IN (2020, 2021);",
    "reference_sql": "SELECT SUM(sales) FROM autonomous_vehicles WHERE year IN (2020, 2021) AND model IN ('Model A', 'Model B');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 859,
    "prompt": "What is the average safety rating achieved by electric vehicles at the Detroit Auto Show?",
    "generated_sql": "SELECT AVG(SafetyRating) FROM AutoShowSafety WHERE Vehicle = 'Charger' AND VehicleState = 'Detroit';",
    "reference_sql": "SELECT AVG(SafetyRating) FROM ElectricVehicleSafety WHERE Make LIKE '%electric%' AND ShowName = 'Detroit Auto Show';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters on a single vehicle and misuses VehicleState instead of selecting all electric vehicles at the Detroit Auto Show."
    }
  },
  {
    "example_id": 860,
    "prompt": "Calculate the total downtime (in hours) for 'VesselR' during its maintenance periods in Q2 of 2020.",
    "generated_sql": "SELECT SUM(DATEDIFF(end_time, start_time)) FROM vessel_maintenance WHERE vessel_type = 'VesselR' AND QUARTER(maintenance_date) = 2 AND YEAR(maintenance_date) = 2020;",
    "reference_sql": "SELECT SUM(DATEDIFF(hour, maintenance_start_date, maintenance_end_date)) FROM Maintenance WHERE vessel_name = 'VesselR' AND maintenance_start_date BETWEEN '2020-04-01' AND '2020-06-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "DATEDIFF without unit returns days not hours; should use TIMESTAMPDIFF or DATEDIFF(hour) and filter on start_time/end_time rather than maintenance_date"
    }
  },
  {
    "example_id": 861,
    "prompt": "Count the number of vessels that have loaded cargo.",
    "generated_sql": "SELECT COUNT(DISTINCT vessels.id) FROM vessels JOIN cargo ON vessels.id = cargo.vessel_id JOIN cargo_loadings ON cargo_loadings.vessel = cargo.vessel_id AND cargo_loadings.load_date BETWEEN DATEADD(day, -7, GETDATE()) AND GETDATE();",
    "reference_sql": "SELECT COUNT(DISTINCT VesselID) FROM VesselCargo WHERE CargoID IS NOT NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Includes an unnecessary 7-day date filter and incorrect joins not specified by the request"
    }
  },
  {
    "example_id": 862,
    "prompt": "Calculate the average usage_amount for the residential category in the water_usage table",
    "generated_sql": "SELECT AVG(usage_amount) FROM water_usage WHERE category = 'Residential';",
    "reference_sql": "SELECT AVG(usage_amount) FROM water_usage WHERE usage_category = 'Residential';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 863,
    "prompt": "List all the water conservation initiatives in each country in 2020.",
    "generated_sql": "SELECT country, initiative, ROW_NUMBER() OVER (ORDER BY initiative DESC) as country_rank FROM WaterConservationInferences WHERE initiative = 'Water Conservation' AND year = 2020;",
    "reference_sql": "SELECT country, initiative_name FROM water_conservation WHERE year=2020 GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters on initiative = 'Water Conservation' and unncessarily uses ROW_NUMBER(); it should select all initiatives for each country in 2020 without restricting to a single initiative or ranking"
    }
  },
  {
    "example_id": 864,
    "prompt": "What was the change in water consumption between 2020 and 2021 for each city?",
    "generated_sql": "SELECT City, WaterConsumption FROM WaterConsumption WHERE Year BETWEEN 2020 AND 2021;",
    "reference_sql": "SELECT a.city, (a.consumption - b.consumption) AS consumption_change FROM city_water_usage a INNER JOIN city_water_usage b ON a.city = b.city AND a.year = 2021 AND b.year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns consumption for each year but does not compute the change between 2020 and 2021"
    }
  },
  {
    "example_id": 865,
    "prompt": "Find the intersection of AI safety and algorithmic fairness datasets?",
    "generated_sql": "SELECT AI_Safety_Data.Data_Name, Algorithmic_Fairness_Data.Data_Name FROM AI_Safety_Data INNER JOIN Algorithmic_Fairness_Data ON AI_Safety_Data.Data_Name = Algorithmic_Fairness_Data.Data_Name WHERE Data_Name IN ('AI Safety', 'Algorithmic_Fairness');",
    "reference_sql": "SELECT AI_Safety.dataset_name FROM AI_Safety INNER JOIN Algorithmic_Fairness ON AI_Safety.dataset_name = Algorithmic_Fairness.dataset_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering by specific dataset names limits results instead of returning all common names"
    }
  },
  {
    "example_id": 866,
    "prompt": "How many economic diversification efforts were successful in South Africa between 2015 and 2021?",
    "generated_sql": "SELECT COUNT(*) FROM efforts WHERE country = 'South Africa' AND success = true AND year BETWEEN 2015 AND 2021;",
    "reference_sql": "SELECT COUNT(*) FROM economic_diversification_efforts WHERE country = 'South Africa' AND start_year >= 2015 AND end_year <= 2021 AND success = true;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 867,
    "prompt": "How many rural infrastructure projects in the 'rural_development' schema have a type that starts with the letter 'E'?",
    "generated_sql": "SELECT COUNT(*) FROM rural_development.projects WHERE type LIKE '%E%';",
    "reference_sql": "SELECT COUNT(*) FROM rural_development.infrastructure_projects WHERE type LIKE 'E%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses '%E%' to match anywhere instead of 'E%' to match at the start"
    }
  },
  {
    "example_id": 868,
    "prompt": "How many women-led farming initiatives were successful in the past year in the Asia-Pacific region, grouped by country?",
    "generated_sql": "SELECT country, COUNT(*) as success_count FROM farm_initiatives WHERE success_date >= DATEADD(year, -1, GETDATE()) AND country IN ('USA', 'Australia', 'Japan', 'Nigeria', 'South Korea') GROUP BY country;",
    "reference_sql": "SELECT country, COUNT(*) FROM farming_projects WHERE leader_gender = 'female' AND project_status = 'successful' AND country IN ('Asia', 'Pacific') GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for women-led initiatives or actual success flag, and uses incorrect country list for Asia-Pacific region"
    }
  },
  {
    "example_id": 869,
    "prompt": "Remove all movies with a production budget greater than 300000000",
    "generated_sql": "DELETE FROM movies WHERE production_budget > 300000000;",
    "reference_sql": "DELETE FROM movies WHERE production_budget > 300000000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 870,
    "prompt": "What was the minimum price per gram of the Gelato strain in Nevada in 2022?",
    "generated_sql": "SELECT MIN(price) FROM GelatoInNevada WHERE strain = 'Gelato' AND state = 'Nevada' AND year = 2022;",
    "reference_sql": "SELECT MIN(price/grams) FROM inventory WHERE state = 'Nevada' AND year = 2022 AND strain = 'Gelato';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 871,
    "prompt": "Display the total billing information for each attorney",
    "generated_sql": "SELECT a.name, SUM(b.amount) FROM attorneys a JOIN billing b ON a.id = b.attorney_id GROUP BY a.name;",
    "reference_sql": "SELECT attorney_id, SUM(amount) FROM billing_information GROUP BY attorney_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 872,
    "prompt": "How many cases were opened in 'july' 2019 and closed in 'october' 2019?",
    "generated_sql": "SELECT COUNT(*) FROM cases JOIN cases_closed ON cases.case_id = cases_closed.case_id WHERE cases_opened = 'july' AND cases_closed = 'october' GROUP BY cases.case_id, cases.closed_date;",
    "reference_sql": "SELECT COUNT(*) FROM cases WHERE case_open_date BETWEEN '2019-07-01' AND '2019-07-31' AND case_close_date BETWEEN '2019-10-01' AND '2019-10-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing year filters and incorrect grouping; does not filter 2019 and groups by case_id instead of returning a single count"
    }
  },
  {
    "example_id": 873,
    "prompt": "Identify attorneys who have never handled cases in the 'West' region but have in the 'North' or 'South'.",
    "generated_sql": "SELECT a.name FROM attorneys a JOIN cases c ON a.attorney_id = c.attorney_id WHERE a.region = 'North' OR a.region = 'South' AND c.case_id IS NULL;",
    "reference_sql": "SELECT h.attorney_id FROM attorney_regions h LEFT JOIN handled_cases i ON h.attorney_id = i.attorney_id WHERE h.region IN ('North', 'South') AND h.region != 'West' AND i.attorney_id IS NOT NULL AND h.attorney_id NOT IN (SELECT attorney_id FROM attorney_regions WHERE region = 'West');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters region on attorneys instead of cases and incorrectly checks c.case_id IS NULL"
    }
  },
  {
    "example_id": 874,
    "prompt": "What is the maximum production capacity of the chemical manufacturing plants located in Canada?",
    "generated_sql": "SELECT MAX(production_capacity) FROM chemical_manufacturing WHERE country = 'Canada';",
    "reference_sql": "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 875,
    "prompt": "What is the total number of electric vehicle charging stations installed in each state of the United States in 2022?",
    "generated_sql": "SELECT state, COUNT(*) FROM electric_charging_stations WHERE year = 2022 GROUP BY state;",
    "reference_sql": "SELECT state, COUNT(size) FROM charging_stations_us WHERE year = 2022 GROUP BY state;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 876,
    "prompt": "What is the average R&D expenditure for drugs that were approved in the US market?",
    "generated_sql": "SELECT AVG(D.Expenditure) FROM DrugDuty D INNER JOIN DrugAdoption DA ON D.DrugID = DA.DrugID WHERE DA.ApprovalCountry = 'US';",
    "reference_sql": "SELECT AVG(expenditures) FROM r_and_d_expenditures JOIN drug_approval ON r_and_d_expenditures.drug_name = drug_approval.drug_name WHERE drug_approval.market = 'US';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 877,
    "prompt": "What is the total number of disability accommodations requested and approved by department?",
    "generated_sql": "SELECT department, SUM(advocacy_requests) AS total_advocacy_requests FROM disability_accommodations GROUP BY department;",
    "reference_sql": "SELECT Department, COUNT(*) as Total_Requests FROM Accommodation_Data WHERE Request_Status = 'Approved' GROUP BY Department;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only sums requested accommodations, not approved accommodations"
    }
  },
  {
    "example_id": 878,
    "prompt": "Delete wildlife habitat data for Australia before 2015",
    "generated_sql": "DELETE FROM wildlife_data WHERE country = 'Australia' AND year < 2015;",
    "reference_sql": "DELETE FROM wildlife_habitat WHERE country_code = 'AUS' AND year < 2015;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 879,
    "prompt": "What is the total volume of timber harvested in tropical rainforests for the year 2020?",
    "generated_sql": "SELECT SUM(volume) FROM TimberHarvests WHERE year = 2020 AND habitat = 'Tropical Rainforest';",
    "reference_sql": "SELECT SUM(volume) FROM rainforests WHERE country IN ('Brazil', 'Congo', 'Indonesia') AND YEAR(harvest_date) = 2020 AND type = 'tropical';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 880,
    "prompt": "Show veteran employment statistics for each state in the 'veteran_employment' table",
    "generated_sql": "SELECT state, state_employee_count FROM veteran_employment WHERE state = 'CA' OR state = 'IDaho';",
    "reference_sql": "SELECT state, COUNT(*) as veteran_employees FROM veteran_employment WHERE state IN ('CA', 'NY', 'TX', 'FL', 'PA') GROUP BY state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query filters for only CA and Idaho instead of returning all states"
    }
  },
  {
    "example_id": 881,
    "prompt": "What is the total cargo handling time for all ports?",
    "generated_sql": "SELECT SUM(Cargo_Handling_Time) FROM Port_Accommodations;",
    "reference_sql": "SELECT SUM(cargo_handling_time) FROM ports;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 882,
    "prompt": "Which vessels have not had their annual inspections in the last 3 years?",
    "generated_sql": "SELECT cargo_type, AVG(annual_inspection) FROM vessel_inspection WHERE vessel_type IN ('Cargo', 'Tanker') AND cargo_date < DATE_SUB(CURDATE(), INTERVAL 3 YEAR) GROUP BY cargo_type;",
    "reference_sql": "SELECT Name FROM Vessels WHERE DATEDIFF(year, LastInspection, GETDATE()) >= 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses wrong columns and aggregation, does not identify vessels missing inspections, and applies unrelated filters"
    }
  },
  {
    "example_id": 883,
    "prompt": "List all suppliers from the Asia-Pacific region who have supplied materials to ManufacturerC",
    "generated_sql": "SELECT SupplierID FROM Suppliers WHERE Country = 'Asia-Pacific' AND Material = 'Recycled Polyester' AND Manufacturer = 'ManufacturerC';",
    "reference_sql": "SELECT s.supplier_name FROM Suppliers s INNER JOIN Supplies sp ON s.supplier_id = sp.supplier_id INNER JOIN Manufacturers m ON sp.manufacturer_id = m.manufacturer_id WHERE m.region = 'North America' AND m.manufacturer_name = 'ManufacturerC' AND s.region = 'Asia-Pacific';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query incorrectly filters on a specific material and uses Country for region; it should list all materials and filter by region and ManufacturerC supply relationship"
    }
  },
  {
    "example_id": 884,
    "prompt": "Find the number of healthcare providers in each type of facility in the rural healthcare system.",
    "generated_sql": "SELECT type, COUNT(*) FROM healthcare_providers GROUP BY type;",
    "reference_sql": "SELECT FacilityType, COUNT(*) AS Total FROM Providers GROUP BY FacilityType;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "No filter for the rural healthcare system and missing join to facility table to get facility types"
    }
  },
  {
    "example_id": 885,
    "prompt": "Show companies with below average ESG scores in the education sector.",
    "generated_sql": "SELECT companies.name FROM companies INNER JOIN companies_education ON companies.id = companies_education.company_id WHERE companies.education_sector = 'Education' AND companies_education.esg_score < 70 GROUP BY companies.name HAVING COUNT(*) <= 1;",
    "reference_sql": "SELECT * FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses a fixed threshold and grouping instead of computing and comparing to the sector\u2019s average ESG score"
    }
  },
  {
    "example_id": 886,
    "prompt": "Determine the number of unique donors who made donations in the last month from the 'donations' table.",
    "generated_sql": "SELECT COUNT(DISTINCT donor_id) FROM donations WHERE donation_date >= DATEADD(month, -1, GETDATE());",
    "reference_sql": "SELECT COUNT(DISTINCT donor_name) FROM donations WHERE donation_date >= DATEADD(month, -1, GETDATE());",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 887,
    "prompt": "How many volunteers joined after participating in a community outreach event in '2020'?",
    "generated_sql": "SELECT COUNT(*) FROM volunteers WHERE event_date BETWEEN '2020-01-01' AND '2020-12-31';",
    "reference_sql": "SELECT SUM(num_volunteers) FROM volunteer_events WHERE year = 2020 AND event_name IN (SELECT event_name FROM volunteer_events WHERE year = 2020 AND num_volunteers > 0);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing condition to ensure volunteers joined after their 2020 community outreach event and no filter on event type"
    }
  },
  {
    "example_id": 888,
    "prompt": "What was the budget for the Marketing department in each quarter of 2019?",
    "generated_sql": "SELECT DepartmentName, QUARTER,Budget FROM MarketingDepartments WHERE QUARTER = 1 AND YEAR(DateOfCompletion) = 2019;",
    "reference_sql": "SELECT department, QUARTER(budget_date) as quarter, SUM(amount) as total_budget FROM Department_Budget WHERE YEAR(budget_date) = 2019 AND department = 'Marketing' GROUP BY department, quarter;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query filters on QUARTER = 1 instead of returning all quarters for 2019."
    }
  },
  {
    "example_id": 889,
    "prompt": "What is the maximum mental health score of students in 'Fall 2021'?",
    "generated_sql": "SELECT MAX(score) FROM students WHERE school = 'Fall 2021';",
    "reference_sql": "SELECT MAX(mental_health_score) FROM student_mental_health WHERE date = '2021-09-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering by school instead of the term/semester column and using the students table instead of the mental health scores table"
    }
  },
  {
    "example_id": 890,
    "prompt": "Create a view to display all employees' ages and ethnicities",
    "generated_sql": "CREATE VIEW employee_age_ethnicity AS SELECT * FROM employees;",
    "reference_sql": "CREATE VIEW EmployeeAgesEthnicities AS SELECT Age, Ethnicity FROM EmployeeDemographics;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query selects all columns instead of only ages and ethnicities"
    }
  },
  {
    "example_id": 891,
    "prompt": "What is the average salary of employees who identify as Latinx in the Engineering department?",
    "generated_sql": "SELECT AVG(Salary) FROM Employees WHERE Gender = 'Male' AND Department = 'Engineering';",
    "reference_sql": "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on Gender = 'Male' instead of identifying Latinx ethnicity"
    }
  },
  {
    "example_id": 892,
    "prompt": "List all the hockey players and their respective positions.",
    "generated_sql": "SELECT p.player_name, p.position FROM players p INNER JOIN position p1 ON p.player_id = p1.player_id WHERE p1.team_name = 'Yankees' AND p.position IN ('Goal', 'Puck', 'Rink') GROUP BY p.player_name;",
    "reference_sql": "SELECT name, position FROM players WHERE sport = 'Hockey';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by an unrelated team and position values instead of listing all hockey players and their positions"
    }
  },
  {
    "example_id": 893,
    "prompt": "List the top 5 players with the highest points per game, including their team name and average points per game.",
    "generated_sql": "SELECT p.team_name, p.points_per_game, m.team_name, AVG(p.points_per_game) as avg_points_per_game FROM players p JOIN games g ON p.player_id = g.player_id JOIN players m ON p.player_id = m.player_id GROUP BY p.team_name, p.points_per_game ORDER BY avg_points_per_game DESC LIMIT 5;",
    "reference_sql": "SELECT p.name, p.team, AVG(p.points_per_game) as avg_points_per_game FROM players p GROUP BY p.name, p.team ORDER BY avg_points_per_game DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect joins and grouping: groups by points_per_game, duplicates team_name, omits player name, miscalculates average"
    }
  },
  {
    "example_id": 894,
    "prompt": "Which team has the highest number of wins in the 'basketball_games' table?",
    "generated_sql": "SELECT name, COUNT(*) as wins FROM basketball_games GROUP BY name ORDER BY wins DESC LIMIT 1;",
    "reference_sql": "SELECT name AS team, MAX(home_team_wins + away_team_wins) AS highest_wins FROM (SELECT name, CASE WHEN home_team = team_id AND home_team_score > away_team_score THEN 1 ELSE 0 END + CASE WHEN away_team = team_id AND away_team_score > home_team_score THEN 1 ELSE 0 END AS home_team_wins, CASE WHEN home_team = team_id AND home_team_score < away_team_score THEN 1 ELSE 0 END + CASE WHEN away_team = team_id AND away_team_score < home_team_score THEN 1 ELSE 0 END AS away_team_wins FROM basketball_teams JOIN basketball_games ON basketball_teams.team_id = basketball_games.home_team OR basketball_teams.team_id = basketball_games.away_team) AS subquery GROUP BY name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts all games per name rather than counting wins (no filter on winner column)"
    }
  },
  {
    "example_id": 895,
    "prompt": "How many volunteers with 'Medical' skills were assigned before a volunteer with 'Engineering' skills?",
    "generated_sql": "SELECT COUNT(*) FROM volunteer_skills WHERE skill = 'Medical' AND assignment_date < '2020-01-01' AND skill = 'Engineering';",
    "reference_sql": "SELECT COUNT(*) FROM (SELECT skill, assignment_date, LAG(skill) OVER (ORDER BY assignment_date) AS prev_skill FROM volunteers_ext WHERE skill = 'Medical') t WHERE prev_skill = 'Engineering';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters for both Medical and Engineering in same row and uses a fixed date instead of comparing to the earliest Engineering assignment"
    }
  },
  {
    "example_id": 896,
    "prompt": "Which communities in Africa have received the most humanitarian aid, and what is the total amount of aid received?",
    "generated_sql": "SELECT community_name, SUM(amount_assessed) as total_assessed FROM Humanitarian_Assessments GROUP BY community_name ORDER BY total_assessed DESC;",
    "reference_sql": "SELECT c.name, SUM(a.amount) as total_aid FROM communities c JOIN aid a ON c.id = a.community WHERE c.country = 'Africa' GROUP BY c.name ORDER BY total_aid DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No filter for African communities; query should restrict to continent = 'Africa'"
    }
  },
  {
    "example_id": 897,
    "prompt": "What is the total fare collected for each train line?",
    "generated_sql": "SELECT Line, SUM(Fare) FROM LineTypes GROUP BY Line;",
    "reference_sql": "SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It sums fare from the LineTypes table rather than actual collected fares from trip records joined by train line"
    }
  },
  {
    "example_id": 898,
    "prompt": "What was the total fare collected on the 'Green Line' on March 15th, 2021?",
    "generated_sql": "SELECT SUM(fare) FROM fare WHERE route_id = 1 AND station_id = 1 AND fare_date BETWEEN '2021-03-15' AND '2021-03-15';",
    "reference_sql": "SELECT SUM(fare) FROM green_line WHERE route_id = 101 AND date = '2021-03-15';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on station_id and hardcoded route_id without joining route name; does not target Green Line correctly"
    }
  },
  {
    "example_id": 899,
    "prompt": "Which station on the 'Red' line has the lowest fare collection?",
    "generated_sql": "SELECT station_id, MIN(fare) FROM station WHERE line = 'Red' GROUP BY station_id;",
    "reference_sql": "SELECT station, MIN(revenue) FROM fares WHERE station IN (SELECT station FROM routes WHERE line = 'Red') GROUP BY station;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It groups by station and returns each station\u2019s minimum fare rather than selecting the station with the overall lowest fare."
    }
  },
  {
    "example_id": 900,
    "prompt": "Delete the product with the highest price in the 'Sustainable' category.",
    "generated_sql": "DELETE FROM Products WHERE product_category = 'Sustainable' AND price > (SELECT MAX(price) FROM Products WHERE product_category = 'Sustainable');",
    "reference_sql": "DELETE FROM products WHERE price = (SELECT MAX(price) FROM products WHERE category = 'Sustainable');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses '>' instead of '=' with MAX(price), so it matches no rows and does not delete the highest-priced product"
    }
  },
  {
    "example_id": 901,
    "prompt": "Show the percentage of sustainable material used by each brand as compared to the total quantity of sustainable material used by all brands.",
    "generated_sql": "SELECT Brand, (SUM(Quantity) * 100.0 / (SELECT SUM(Quantity) FROM Brands)) as Percentage FROM Brands GROUP BY Brand;",
    "reference_sql": "SELECT Brand_Name, (SUM(Quantity) * 100.0 / (SELECT Total_Quantity FROM Total_Sustainable_Material)) as Percentage FROM Brands GROUP BY Brand_Name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 902,
    "prompt": "What is the total CO2 emission from transportation for each country in the ethical fashion supply chain?",
    "generated_sql": "SELECT country, SUM(emission) FROM ethical_fashion_emissions WHERE country IN ('UK', 'USA', 'Germany', 'Brazil') GROUP BY country;",
    "reference_sql": "SELECT country, SUM(co2_emission_kg) FROM transportation GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query restricts to specific countries and does not filter for transportation emissions"
    }
  },
  {
    "example_id": 903,
    "prompt": "Show me the total ad revenue generated per month for a specific advertiser (AdvertiserID = 1001)",
    "generated_sql": "SELECT SUM(Revenue) FROM (SELECT Ad.AdID, SUM(Revenue) AS TotalRevenue FROM Ad WHERE Ad.Revenue = 1001) AS Subquery;",
    "reference_sql": "SELECT DATE_FORMAT(month_year, '%Y-%m') AS month, SUM(revenue) AS total_revenue FROM ad_revenue WHERE advertiser_id = 1001 GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on Revenue instead of AdvertiserID and does not group by month."
    }
  },
  {
    "example_id": 904,
    "prompt": "What is the minimum Shariah-compliant loan amount issued in the last quarter of 2021?",
    "generated_sql": "SELECT MIN(loan_amount) FROM shariah_loan WHERE loan_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
    "reference_sql": "SELECT MIN(amount) FROM loans WHERE EXTRACT(YEAR FROM date) = 2021 AND EXTRACT(QUARTER FROM date) = 4 AND loan_type = 'Shariah-compliant';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Date filter uses CURRENT_DATE minus 3 months instead of restricting to Q4 2021 (2021-10-01 to 2021-12-31)."
    }
  },
  {
    "example_id": 905,
    "prompt": "What is the average donation amount and number of donations for each program in the 'programs' and 'donations' tables?",
    "generated_sql": "SELECT programs.program_name, AVG(donations.amount) AS avg_donations, COUNT(donations.donor_id) AS num_donations FROM programs INNER JOIN donations ON programs.program_id = donations.program_id GROUP BY programs.program_name;",
    "reference_sql": "SELECT p.program_name, AVG(d.donation_amount) as avg_donation, COUNT(d.donation_id) as num_donations FROM programs p JOIN donations d ON p.program_id = d.program_id GROUP BY p.program_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "INNER JOIN excludes programs with no donations; use LEFT JOIN to include all programs"
    }
  },
  {
    "example_id": 906,
    "prompt": "How many shipments were made from each country?",
    "generated_sql": "SELECT country, COUNT(*) FROM shipments GROUP BY country;",
    "reference_sql": "SELECT country, COUNT(*) as total_shipments FROM shipments GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 907,
    "prompt": "What is the total quantity of items with type 'E' or type 'F' in warehouse O and warehouse P?",
    "generated_sql": "SELECT SUM(quantity) FROM inventory JOIN products ON inventory.product_id = products.product_id WHERE products.product_type = 'E' OR products.product_type = 'F' AND w.store_name = 'warehouse O' AND w.store_name = 'warehouse P';",
    "reference_sql": "SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F') UNION ALL SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing join to warehouse table, alias w undefined, and incorrect warehouse filter requiring both names simultaneously"
    }
  },
  {
    "example_id": 908,
    "prompt": "Which parcel_delivery routes have a distance greater than 1000 kilometers?",
    "generated_sql": "SELECT d.route_name, d.distance FROM parcel_delivery_routes d INNER JOIN routes r ON d.route_id = r.route_id WHERE r.distance > 1000;",
    "reference_sql": "SELECT route_id, start_location, end_location, distance FROM parcel_delivery WHERE distance > 1000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on r.distance instead of d.distance and unnecessary join with routes table"
    }
  },
  {
    "example_id": 909,
    "prompt": "Show the total budget allocated to healthcare programs in each department from the 'government_budget' database.",
    "generated_sql": "SELECT department, SUM(budget) FROM program WHERE budget = (SELECT SUM(budget) FROM program) GROUP BY department;",
    "reference_sql": "SELECT departments.name, SUM(programs.budget) as total_budget FROM departments INNER JOIN programs ON departments.id = programs.department_id WHERE programs.name LIKE '%healthcare%' GROUP BY departments.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters rows where budget equals the total budget instead of selecting healthcare programs and grouping by department"
    }
  },
  {
    "example_id": 910,
    "prompt": "What is the total revenue generated from eco-friendly tours in France?",
    "generated_sql": "SELECT SUM(tour_revenue) FROM tours WHERE country = 'France' AND eco_friendly = true;",
    "reference_sql": "SELECT SUM(revenue) FROM tours WHERE country = 'France' AND type = 'Eco-friendly';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 911,
    "prompt": "Who are the top 3 artists with the most artworks in the 'Cubism' category, excluding artists who have less than 5 artworks in total?",
    "generated_sql": "SELECT ArtistID, COUNT(*) as ArtworkCount FROM Artists WHERE Artworks.ArtworkID NOT IN (SELECT Artworks.ArtworkID FROM Artworks WHERE Artworks.ArtistID = Artists.ArtistID) AND Artworks.ArtistID IN (SELECT Artworks.ArtistID FROM Artworks WHERE Artworks.ArtistID IN (SELECT Artworks.ArtistID FROM Artworks WHERE Artworks.ArtistID NOT IN (SELECT Artworks.ArtistID FROM Artworks WHERE Artworks.ArtistID = 5))) GROUP BY ArtistID ORDER BY ArtworkCount",
    "reference_sql": "SELECT Artists.Name FROM Artists INNER JOIN Artworks ON Artists.ArtistID = Artworks.ArtistID WHERE Artworks.Category = 'Cubism' GROUP BY Artists.Name HAVING SUM(Artworks.Quantity) > 5 ORDER BY SUM(Artworks.Quantity) DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by 'Cubism', lacks total artwork count filter and LIMIT 3, and has incorrect joins"
    }
  },
  {
    "example_id": 912,
    "prompt": "Which indigenous communities share a region with the snow leopard?",
    "generated_sql": "SELECT communities FROM communities WHERE region = 'North America' AND animal ='snow leopard';",
    "reference_sql": "SELECT IndigenousCommunities.name FROM IndigenousCommunities INNER JOIN Species ON IndigenousCommunities.region = Species.region WHERE Species.name = 'Snow Leopard';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Hard-coded region 'North America' instead of using the actual snow leopard regions"
    }
  },
  {
    "example_id": 913,
    "prompt": "What is the number of patients who identified as Indigenous and received therapy in H2 2021?",
    "generated_sql": "SELECT COUNT(*) FROM patients WHERE ethnicity = 'Indigenous' AND service = 'therapy' AND YEAR(birthdate) = 2021;",
    "reference_sql": "SELECT COUNT(*) FROM patients WHERE race = 'Indigenous' AND therapy_date >= '2021-07-01' AND therapy_date < '2022-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on birthdate year instead of service date and omits H2 date range."
    }
  },
  {
    "example_id": 914,
    "prompt": "Get the number of bridges built in each decade since 1950",
    "generated_sql": "SELECT DATE(build_date) AS build_date, SUM(amount) AS total_build_cost FROM Bridges WHERE build_date CURRENT_DATE >= '2010-01-01' GROUP BY build_date;",
    "reference_sql": "SELECT (year - 1900) / 10 AS decade, COUNT(*) FROM Bridges WHERE year >= 1950 GROUP BY decade;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not group by decade since 1950 and uses sum(amount) instead of counting bridges"
    }
  },
  {
    "example_id": 915,
    "prompt": "What is the minimum, maximum, and average age of victims who have participated in restorative justice programs, by location?",
    "generated_sql": "SELECT location, MIN(avg_age), MAX(avg_age) FROM victims JOIN restorative_justice ON victims.id = restorative_justice.victim_id;",
    "reference_sql": "SELECT location, MIN(v.age) AS min_age, MAX(v.age) AS max_age, AVG(v.age) AS avg_age FROM victims v JOIN restorative_justice_participants rjp ON v.id = rjp.victim_id GROUP BY location;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not group by location or compute min(age), max(age), and avg(age) correctly"
    }
  },
  {
    "example_id": 916,
    "prompt": "Show the total number of marine protected areas in the Pacific Ocean",
    "generated_sql": "SELECT SUM(area_count) FROM marine_protected_areas WHERE region = 'Pacific Ocean';",
    "reference_sql": "SELECT COUNT(*) FROM marine_protected_areas WHERE location = 'Pacific Ocean';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(area_count) instead of counting rows; should use COUNT(*) to count number of areas"
    }
  },
  {
    "example_id": 917,
    "prompt": "List the names and publication years of Middle Eastern authors who have published books in the 'Non-fiction' genre.",
    "generated_sql": "SELECT name, publication_year FROM MiddleEasternAuthors WHERE genre = 'Non-fiction';",
    "reference_sql": "SELECT a.name, b.publication_year FROM authors a INNER JOIN books b ON a.id = b.author_id INNER JOIN genres g ON b.genre = g.genre WHERE a.ethnicity = 'Middle Eastern' AND g.genre = 'Non-fiction';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing join between authors and books tables to filter by genre and retrieve publication years"
    }
  },
  {
    "example_id": 918,
    "prompt": "Determine the percentage of women in the workforce by department.",
    "generated_sql": "SELECT department, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM employees WHERE gender = 'Female' AND department = 'Workforce'), 2) AS percentage_of_women FROM employees WHERE gender = 'Female' AND department = 'Workforce';",
    "reference_sql": "SELECT name, (female_workforce/workforce)*100 as percentage_of_women FROM departments ORDER BY percentage_of_women DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only females in a specific department 'Workforce' and divides by that same count, rather than computing women as a percentage of total employees per department."
    }
  },
  {
    "example_id": 919,
    "prompt": "What is the number of employees in each department, ordered from the highest to the lowest?",
    "generated_sql": "SELECT name, department, COUNT(*) as employee_count FROM department GROUP BY department, name ORDER BY department, employee_count DESC;",
    "reference_sql": "SELECT department, COUNT(*) AS count FROM mining_operations GROUP BY department ORDER BY count DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query groups by both name and department on the department table instead of grouping only by department in the employees table, so it does not count employees per department correctly."
    }
  },
  {
    "example_id": 920,
    "prompt": "What is the percentage of mobile customers who are using 4G networks in each city?",
    "generated_sql": "SELECT city, (100.0 * COUNT(DISTINCT customer_id) / (SELECT COUNT(*) FROM mobile_users)) as mobile_4G_percentage FROM mobile_users GROUP BY city;",
    "reference_sql": "SELECT city, 100.0 * SUM(CASE WHEN network_type = '4G' THEN 1 ELSE 0 END) / COUNT(*) AS pct FROM mobile_networks JOIN mobile_subscribers ON mobile_networks.customer_id = mobile_subscribers.id GROUP BY city;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for 4G users and denominator uses global total instead of per city."
    }
  },
  {
    "example_id": 921,
    "prompt": "What is the total data usage for each mobile plan in a given month?",
    "generated_sql": "SELECT plan_name, SUM(data_usage) FROM mobile_plans WHERE plan_type = 'Mobile' AND month = 1 GROUP BY plan_name;",
    "reference_sql": "SELECT plan_id, SUM(data_usage) AS total_data_usage FROM subscriber_data WHERE usage_month = 'Jan-2022' GROUP BY plan_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query hard-codes month=1 instead of using a parameter for the given month"
    }
  },
  {
    "example_id": 922,
    "prompt": "How many concert tickets were sold in Europe in 2020?",
    "generated_sql": "SELECT SUM(CASE WHEN sale_date = '2020-01-01' THEN 1 ELSE 0 END) + COUNT(*) FROM concert_tickets WHERE country = 'Europe' AND sale_date BETWEEN '2020-01-01' AND '2020-01-31';",
    "reference_sql": "SELECT SUM(quantity) FROM tickets WHERE location LIKE 'Europe%' AND year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query restricts to January 2020 and miscalculates with SUM+COUNT instead of counting all tickets sold in 2020"
    }
  },
  {
    "example_id": 923,
    "prompt": "How many streams did each song by an artist get in a given month?",
    "generated_sql": "SELECT song_id, SUM(streams) FROM songs_streams WHERE artists.artist_id IN (SELECT artist_id FROM artists_streams WHERE month = 1) GROUP BY song_id;",
    "reference_sql": "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing month filter on streams, incorrect table joins, and does not link songs to the specified artist correctly"
    }
  },
  {
    "example_id": 924,
    "prompt": "Insert a new artist 'SZA' with the genre 'R&B' and 5 million monthly listeners in the 'artists' table.",
    "generated_sql": "INSERT INTO artists (name, genre, monthly_listeners) VALUES ('SZA', 'R&B', 50000000);",
    "reference_sql": "INSERT INTO artists (name, genre, monthly_listeners) VALUES ('SZA', 'R&B', 5000000);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserted monthly_listeners is 50000000 instead of 5000000"
    }
  },
  {
    "example_id": 925,
    "prompt": "Calculate the average temperature of the ocean floor in the Indian Ocean.",
    "generated_sql": "SELECT AVG(temperature) FROM ocean_floor WHERE location = 'Indian Ocean';",
    "reference_sql": "SELECT AVG(temperature) FROM ocean_floor_temperatures WHERE location = 'Indian Ocean';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 926,
    "prompt": "What is the average age of players who play VR games and their total spending on games?",
    "generated_sql": "SELECT AVG(Players.Age) as AvgAge, COUNT(DISTINCT Players.GameID) as TotalSpending, SUM(Players.SpentOnVR) as TotalVRSpent FROM Players INNER JOIN Players ON Players.PlayerID = Players.PlayerID INNER JOIN Players.Game ON Players.GameID = Players.GameID WHERE Players.GameID IN (SELECT GameID FROM Players WHERE GameType = 'VR') GROUP BY Players.GameID, Players.GameID;",
    "reference_sql": "SELECT AVG(players.age), SUM(games.price) FROM players INNER JOIN player_games ON players.id = player_games.player_id INNER JOIN games ON player_games.game_id = games.id WHERE games.type = 'VR';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses incorrect self-joins, wrong aggregation for spending (COUNT instead of SUM of spending), and improper GROUP BY, so it does not compute the average age and total spending correctly."
    }
  },
  {
    "example_id": 927,
    "prompt": "Delete records from the \"sensor_data\" table where the \"sensor_id\" is 3",
    "generated_sql": "DELETE FROM sensor_data WHERE sensor_id = 3;",
    "reference_sql": "DELETE FROM sensor_data WHERE sensor_id = 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 928,
    "prompt": "How many public service delivery requests were received from each age group of citizens in 2022?",
    "generated_sql": "SELECT age_group, COUNT(*) as num_requests FROM public_service_requests WHERE year = 2022 GROUP BY age_group;",
    "reference_sql": "SELECT Age_Group, SUM(Num_Requests) FROM Requests WHERE Year = 2022 GROUP BY Age_Group;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 929,
    "prompt": "What is the sum of lanthanum imports to Norway and Sweden for the years 2018 and 2019?",
    "generated_sql": "SELECT SUM(imports) FROM lanthanum_imports WHERE location = 'Norway' AND year IN (2018, 2019);",
    "reference_sql": "SELECT SUM(quantity) FROM lanthanum_imports WHERE country IN ('Norway', 'Sweden') AND year IN (2018, 2019);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query filters only Norway and omits Sweden"
    }
  },
  {
    "example_id": 930,
    "prompt": "How many properties are there in total for each co-ownership model?",
    "generated_sql": "SELECT co_ownership_model, COUNT(*) FROM properties GROUP BY co_ownership_model;",
    "reference_sql": "SELECT cm.model_id, COUNT(*) as total_properties FROM coownership_model cm GROUP BY cm.model_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 931,
    "prompt": "What is the minimum property tax for properties in the table 'co_ownership' that are located in the city of New York?",
    "generated_sql": "SELECT MIN(property_tax) FROM co_ownership WHERE city = 'New York';",
    "reference_sql": "SELECT MIN(property_tax) FROM co_ownership WHERE city = 'New York';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 932,
    "prompt": "What is the average energy efficiency score for buildings in each country, ordered by the highest average score?",
    "generated_sql": "SELECT country, AVG(energy_efficiency_score) FROM Buildings GROUP BY country ORDER BY AVG(energy_efficiency_score) DESC;",
    "reference_sql": "SELECT country, AVG(efficiency_score) AS avg_efficiency_score  FROM Buildings GROUP BY country ORDER BY avg_efficiency_score DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 933,
    "prompt": "Which menu categories have a daily revenue greater than the average daily revenue?",
    "generated_sql": "SELECT menu_category_name FROM (SELECT menu_category_name, AVG(daily_revenue) as daily_revenue FROM menu_categories) t WHERE daily_revenue > t.daily_revenue;",
    "reference_sql": "SELECT menu_category, daily_revenue FROM menu_engineering WHERE daily_revenue > (SELECT AVG(daily_revenue) FROM menu_engineering);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The subquery lacks GROUP BY and compares the same alias, so it fails to compute and compare category vs overall averages correctly."
    }
  },
  {
    "example_id": 934,
    "prompt": "Show the names of suppliers that provide materials for at least 3 products.",
    "generated_sql": "SELECT SupplierName FROM Materials.Suppliers WHERE Suppliers.Products IN (SELECT ProductID FROM Materials.Materials WHERE Products IN (SELECT ProductID FROM Materials.Materials WHERE Products LIKE '%%Materials%'));",
    "reference_sql": "SELECT supplier_id FROM materials GROUP BY supplier_id HAVING COUNT(DISTINCT product_id) >= 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query fails to count products per supplier and does not select suppliers providing at least three products, misusing table relationships."
    }
  },
  {
    "example_id": 935,
    "prompt": "What are the names and launch dates of all astronauts who have participated in space missions?",
    "generated_sql": "SELECT name, launch_date FROM astronauts WHERE launch_date IS NOT NULL;",
    "reference_sql": "SELECT FirstName, LastName, LaunchDate FROM Astronaut a JOIN SpaceMission sm ON a.MissionId = sm.Id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not join through missions data; simply filters on launch_date in astronauts table, missing mission participation relationship"
    }
  },
  {
    "example_id": 936,
    "prompt": "What is the total cost of Mars rover missions that have successfully landed?",
    "generated_sql": "SELECT SUM(cost) FROM Mars_Rovers WHERE successful_landing = true;",
    "reference_sql": "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 937,
    "prompt": "How many fans from the \"Fans\" table live in the state of New York and have never attended a game?",
    "generated_sql": "SELECT COUNT(DISTINCT Fans.id) FROM Fans INNER JOIN GameSales ON Fans.id = GameSales.fan_id WHERE GameSales.city = 'New York' AND Fans.state = 'NY';",
    "reference_sql": "SELECT COUNT(*) FROM fans WHERE state = 'New York' AND games_attended = 0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses an INNER JOIN on GameSales and filters attendance, but the question asks for fans who have never attended a game (no GameSales records)."
    }
  },
  {
    "example_id": 938,
    "prompt": "How many unique user accounts have been accessing the system in the past month?",
    "generated_sql": "SELECT COUNT(DISTINCT user_id) FROM user_access_count WHERE access_date >= DATEADD(month, -1, GETDATE());",
    "reference_sql": "SELECT COUNT(DISTINCT user_id) as unique_users FROM user_activity WHERE activity_time >= NOW() - INTERVAL '1 month';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 939,
    "prompt": "List all autonomous bus routes and their operating companies in Tokyo, Japan.",
    "generated_sql": "SELECT route, COUNT(*) FROM autonomous_bus_routes WHERE city = 'Tokyo' AND company = 'Tokyo Autonomous Bus' GROUP BY route;",
    "reference_sql": "SELECT route, company FROM autonomous_buses WHERE city = 'Tokyo';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by a single company, uses COUNT(*) and GROUP BY, instead of listing all routes with their companies"
    }
  },
  {
    "example_id": 940,
    "prompt": "What is the distribution of trips by mode of transport?",
    "generated_sql": "SELECT mode, COUNT(*) FROM trips GROUP BY mode;",
    "reference_sql": "SELECT mode, SUM(trip_count) as total_trips FROM trips GROUP BY mode;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 941,
    "prompt": "Get the count of 'Vegan Leather Shoes' orders in France with a quantity greater than 3.",
    "generated_sql": "SELECT COUNT(*) FROM Orders WHERE country = 'France' AND item = 'Vegan Leather Shoes' AND quantity > 3;",
    "reference_sql": "SELECT COUNT(*) FROM orders INNER JOIN garments ON orders.garment_id = garments.id WHERE garments.name = 'Vegan Leather Shoes' AND garments.country = 'France' AND orders.quantity > 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 942,
    "prompt": "What is the average CO2 emissions for the garment manufacturing process for each collection?",
    "generated_sql": "SELECT collection_id, AVG(co2_emissions) FROM garment_manufacturing GROUP BY collection_id;",
    "reference_sql": "SELECT collection, AVG(co2_emissions) FROM emissions GROUP BY collection;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 943,
    "prompt": "How many workplace safety incidents were reported in the Construction industry in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM incidents WHERE industry = 'Construction' AND year = 2021;",
    "reference_sql": "SELECT incidents FROM WorkplaceSafety WHERE industry = 'Construction' AND year = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 944,
    "prompt": "List the collective bargaining agreements and their expiration dates for the 'agriculture' sector",
    "generated_sql": "SELECT sector, agreement_date FROM collective_bargaining_contracts WHERE sector = 'agriculture';",
    "reference_sql": "SELECT * FROM agriculture_cb_expirations WHERE sector = 'agriculture';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects sector and agreement_date instead of agreement names and expiration dates"
    }
  },
  {
    "example_id": 945,
    "prompt": "What is the average age of members in unions advocating for 'CivilRights'?",
    "generated_sql": "SELECT AVG(Age) FROM Members WHERE Union = 'CivilRights';",
    "reference_sql": "SELECT AVG(Unions.member_age) FROM UnionMembership INNER JOIN Unions ON UnionMembership.union_id = Unions.union_id WHERE Unions.cause = 'CivilRights';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters Members.Union by name instead of joining Unions on advocacy = 'CivilRights'"
    }
  },
  {
    "example_id": 946,
    "prompt": "What is the union with the fewest members in the education sector?",
    "generated_sql": "SELECT union_name, COUNT(DISTINCT members) AS num_members FROM union_education GROUP BY union_name ORDER BY num_members DESC LIMIT 1;",
    "reference_sql": "SELECT name FROM unions WHERE industry = 'Education' ORDER BY members LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query orders by num_members DESC, returning the largest union instead of the smallest; it should use ASC for fewest members."
    }
  },
  {
    "example_id": 947,
    "prompt": "Find the top 2 car makes with the highest safety ratings, considering the average rating for each make across all models.",
    "generated_sql": "SELECT make, AVG(safety_rating) as avg_safety_rating, COUNT(*) as num_models FROM safety_rating_reviews GROUP BY make ORDER BY avg_safety_rating DESC LIMIT 2;",
    "reference_sql": "SELECT make, AVG(rating) AS avg_rating FROM SafetyRatings GROUP BY make ORDER BY avg_rating DESC LIMIT 2;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 948,
    "prompt": "How many safety tests have been conducted for each type of vehicle in 2022?",
    "generated_sql": "SELECT VehicleType, COUNT(*) FROM SafetyTests WHERE Year = 2022 GROUP BY VehicleType;",
    "reference_sql": "SELECT TestTypes.TestType, COUNT(*) FROM TestTypes INNER JOIN SafetyTests ON TestTypes.Id = SafetyTests.TestTypeId WHERE YEAR(TestDate) = 2022 GROUP BY TestTypes.TestType;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 949,
    "prompt": "Update the 'safety_score' for the 'vehicle_make' 'Polestar' in the 'safety_ratings' table to 95",
    "generated_sql": "UPDATE safety_ratings SET safety_score = 95 WHERE vehicle_make = 'Polestar';",
    "reference_sql": "UPDATE safety_ratings SET safety_score = 95 WHERE vehicle_make = 'Polestar';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 950,
    "prompt": "Identify the states with the highest wastewater treatment plant construction rates between 2005 and 2015, excluding Texas.",
    "generated_sql": "SELECT state, SUM(rate) FROM wastewater_treatment_plants WHERE year BETWEEN 2005 AND 2015 GROUP BY state HAVING COUNT(*) = 7;",
    "reference_sql": "SELECT state, AVG(num_plants) AS avg_construction_rate FROM wastewater_plants WHERE state != 'Texas' AND year BETWEEN 2005 AND 2007 GROUP BY state ORDER BY avg_construction_rate DESC LIMIT 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not exclude Texas, uses incorrect HAVING clause, and does not identify highest rates"
    }
  },
  {
    "example_id": 951,
    "prompt": "Insert records into the 'drought_impact' table for the 'West' region with a 'severity' rating of 'low' and a 'year' of 2021",
    "generated_sql": "INSERT INTO drought_impact (region, severity, year) VALUES ('West', 'low', 2021);",
    "reference_sql": "INSERT INTO drought_impact (region, severity, year) VALUES ('West', 'low', 2021);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 952,
    "prompt": "List members who did more than 10 yoga workouts and their total yoga workouts.",
    "generated_sql": "SELECT m.member_name, SUM(m.total_yoga_workouts) FROM members m GROUP BY m.member_name HAVING COUNT(DISTINCT m.id) > 10;",
    "reference_sql": "SELECT m.member_id, m.join_date, COUNT(w.workout_id) as total_yoga_workouts FROM membership_data m JOIN workout_data w ON m.member_id = w.member_id WHERE w.workout_type = 'yoga' GROUP BY m.member_id HAVING COUNT(w.workout_id) > 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using COUNT(DISTINCT m.id) and SUM(m.total_yoga_workouts) is incorrect; should filter on total_yoga_workouts>10 or count workout records"
    }
  },
  {
    "example_id": 953,
    "prompt": "Display economic diversification efforts and their respective program managers from the 'rural_development' database",
    "generated_sql": "SELECT program_manager, program_name FROM (SELECT program_manager, program_name, ROW_NUMBER() OVER (ORDER BY program_name DESC) as rn FROM programs WHERE type = 'diversification') c INNER JOIN (SELECT program_manager, program_name, ROW_NUMBER() OVER (ORDER BY program_name) as rn FROM programs WHERE type = 'economic_development') c1 ON c.program_id = c1.program_id WHERE rn = 1;",
    "reference_sql": "SELECT effort, program_manager FROM economic_diversification;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary join and row_number logic; does not directly filter for diversification efforts and mismatches types"
    }
  },
  {
    "example_id": 954,
    "prompt": "Show the types of economic diversification initiatives and the number of community members involved in each from the 'economic_diversification' and 'community_development' tables",
    "generated_sql": "SELECT initiative, COUNT(*) as num_community_members FROM economic_diversification JOIN community_development ON economic_diversification.initiative_id = community_development.initiative_id GROUP BY initiative;",
    "reference_sql": "SELECT e.initiative_name, COUNT(c.member_id) FROM economic_diversification e INNER JOIN community_development c ON e.member_id = c.member_id GROUP BY e.initiative_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 955,
    "prompt": "What is the total number of animals in the 'animal_population' table, grouped by species?",
    "generated_sql": "SELECT species, SUM(population) FROM animal_population GROUP BY species;",
    "reference_sql": "SELECT species, SUM(animal_count) FROM animal_population GROUP BY species;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 956,
    "prompt": "Which species of fish has the highest average daily growth rate in the Americas?",
    "generated_sql": "SELECT species_name, AVG(daily_growth) AS avg_daily_growth FROM fish_species WHERE continent = 'Americas' GROUP BY species_name ORDER BY avg_daily_growth DESC;",
    "reference_sql": "SELECT Species, AVG(DailyGrowthRate) as AvgDailyGrowthRate FROM FishGrowth WHERE Region = 'Americas' GROUP BY Species ORDER BY AvgDailyGrowthRate DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query is missing LIMIT 1 to return only the species with the highest average daily growth rate."
    }
  },
  {
    "example_id": 957,
    "prompt": "What is the total funding_amount for art_exhibit events in Q4 2020?",
    "generated_sql": "SELECT SUM(funding_amount) FROM ArtExhibit WHERE EXTRACT(QUARTER FROM start_date) = 4 AND EXTRACT(YEAR FROM end_date) = 2020;",
    "reference_sql": "SELECT SUM(funding_amount) FROM art_exhibit_funding_q4_2020 WHERE MONTH(event_date) BETWEEN 10 AND 12;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters use start_date for quarter but end_date for year, misaligning the date criteria"
    }
  },
  {
    "example_id": 958,
    "prompt": "How many building permits were issued per month in 2020?",
    "generated_sql": "SELECT EXTRACT(MONTH FROM permit_date) AS month, COUNT(permits.permit_id) FROM permits INNER JOIN permits ON permits.permit_id = permits.permit_id WHERE permit_date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY month;",
    "reference_sql": "SELECT DATE_FORMAT(issue_date, '%Y-%m') as month, COUNT(*) as permits_issued FROM building_permits WHERE YEAR(issue_date) = 2020 GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query self-joins the permits table unnecessarily, leading to incorrect counts."
    }
  },
  {
    "example_id": 959,
    "prompt": "What is the total salary paid to construction workers who worked on sustainable building projects in Washington?",
    "generated_sql": "SELECT SUM(salary) FROM workers WHERE state = 'Washington' AND sustainable_building = TRUE;",
    "reference_sql": "SELECT SUM(cls.salary) FROM ConstructionLaborStatistics cls JOIN WorkerBuildings wb ON cls.id = wb.worker_id JOIN BuildingTypes bt ON wb.building_id = bt.id WHERE bt.building_type = 'Sustainable' AND state = 'Washington';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing join to projects table to filter workers who worked on sustainable building projects"
    }
  },
  {
    "example_id": 960,
    "prompt": "Calculate the total billing amount for cases with a precedent set in the last 3 years for French law.",
    "generated_sql": "SELECT SUM(total_billing) FROM cases WHERE precedent_set LIKE 'Paris%' AND case_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR) AND CURRENT_DATE;",
    "reference_sql": "SELECT SUM(BillingAmount) FROM Precedents JOIN Cases ON Precedents.CaseID = Cases.CaseID WHERE PrecedentYear >= YEAR(CURRENT_DATE) - 3 AND PrecedentType = 'French';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on precedent_set LIKE 'Paris%' instead of checking law jurisdiction = 'French law' and using precedent_set date"
    }
  },
  {
    "example_id": 961,
    "prompt": "Select the total number of cases won by attorneys in the 'Boston' office.",
    "generated_sql": "SELECT COUNT(*) FROM cases WHERE office = 'Boston' AND won = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM cases c JOIN offices o ON c.office_id = o.office_id WHERE o.office_name = 'Boston' AND c.case_outcome = 'Won';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 962,
    "prompt": "Update the 'crops' table to set the 'irrigation' column to 'Drip' for all entries where the crop_name is 'Tomato'.",
    "generated_sql": "UPDATE crops SET irrigation = 'Drip' WHERE crop_name = 'Tomato';",
    "reference_sql": "UPDATE crops SET irrigation = 'Drip' WHERE crop_name = 'Tomato';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 963,
    "prompt": "How many policy advocacy initiatives were implemented in each state in the last 5 years?",
    "generated_sql": "SELECT state, COUNT(*) FROM policy_initiatives WHERE initiative_date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY state;",
    "reference_sql": "SELECT state, COUNT(*) as num_initiatives FROM Policy_Advocacy_Initiatives WHERE initiation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY state;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 964,
    "prompt": "What is the total number of students with and without disabilities in each academic year?",
    "generated_sql": "SELECT academic_year, COUNT(*) as total_students FROM student_disabilities GROUP BY academic_year;",
    "reference_sql": "SELECT year, SUM(CASE WHEN disability THEN 1 ELSE 0 END) AS students_with_disabilities, SUM(CASE WHEN NOT disability THEN 1 ELSE 0 END) AS students_without_disabilities FROM students GROUP BY year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query only counts students with disabilities; it does not include students without disabilities"
    }
  },
  {
    "example_id": 965,
    "prompt": "List the regulatory frameworks in the 'United States' that have enacted blockchain-related legislation.",
    "generated_sql": "SELECT f.name FROM regulatory_frameworks f LEFT JOIN blockchain_legislation b ON f.id = b.regulation_id WHERE f.name = 'United States';",
    "reference_sql": "SELECT framework_name FROM us_regulatory_frameworks WHERE country = 'United States' AND framework_name LIKE '%blockchain%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on f.name instead of country and uses LEFT JOIN without ensuring blockchain legislation"
    }
  },
  {
    "example_id": 966,
    "prompt": "What is the total number of digital assets issued by companies based in the United States?",
    "generated_sql": "SELECT SUM(amount) FROM digital_assets WHERE country = 'United States';",
    "reference_sql": "SELECT COUNT(*) FROM digital_assets WHERE country = 'United States' AND company IS NOT NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing join with companies table to filter by US-based companies"
    }
  },
  {
    "example_id": 967,
    "prompt": "What is the minimum investment of clients in the \"Commodity\" fund?",
    "generated_sql": "SELECT MIN(investment) FROM clients WHERE fund_name = 'Commodity';",
    "reference_sql": "SELECT MIN(clients.investment) FROM clients INNER JOIN fund_investments ON clients.client_id = fund_investments.client_id WHERE fund_investments.fund_name = 'Commodity';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 968,
    "prompt": "What is the total transaction amount by month for the US?",
    "generated_sql": "SELECT EXTRACT(MONTH FROM transaction_date) as month, SUM(transaction_amount) as total_transaction_amount FROM transactions WHERE transaction_date IN ('2021-01-01', '2021-02-01', '2021-03-01', '2021-04-01', '2021-05-01', '2021-06-01', '2021-07-01', '2021-08-0",
    "reference_sql": "SELECT DATE_FORMAT(transaction_date, '%Y-%m') as month, SUM(transaction_amount) as total_transaction_amount FROM transactions WHERE country = 'US' GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters on specific dates and does not filter by US; should group all US transactions by month rather than using IN on exact dates"
    }
  },
  {
    "example_id": 969,
    "prompt": "Calculate the average downtime for each manufacturing process",
    "generated_sql": "SELECT process_name, AVG(out_of_stock) as avg_out_of_stock, AVG(out_of_stock) as avg_avg_out_of_stock FROM manufacturing_processes GROUP BY process_name;",
    "reference_sql": "SELECT process_name, AVG(downtime) as avg_downtime FROM manufacturing_processes GROUP BY process_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses out_of_stock column instead of downtime and duplicates the average calculation"
    }
  },
  {
    "example_id": 970,
    "prompt": "What is the minimum salary of employees working in factories that are located in a specific city and have a production output above a certain threshold?",
    "generated_sql": "SELECT MIN(salary) FROM Employees WHERE city = 'CityA' AND production_output > (SELECT MAX(production_output) FROM Employees WHERE city = 'CityA')",
    "reference_sql": "SELECT MIN(employees.salary) FROM factories INNER JOIN employees ON factories.factory_id = employees.factory_id WHERE factories.location = 'Los Angeles' AND factories.production_output > 5000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MAX(production_output) subquery instead of the given threshold"
    }
  },
  {
    "example_id": 971,
    "prompt": "Calculate the average distance to the nearest rural healthcare facility in Argentina and Colombia.",
    "generated_sql": "SELECT AVG(distance) FROM healthcare_facilities WHERE country IN ('Argentina', 'Colombia');",
    "reference_sql": "SELECT AVG(distance_km) FROM healthcare_facilities WHERE country IN ('Argentina', 'Colombia');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter rural facilities or calculate the nearest distance per location before averaging"
    }
  },
  {
    "example_id": 972,
    "prompt": "Update track duration based on album release year",
    "generated_sql": "UPDATE tracks SET duration = duration * 1.0 / 12 WHERE album = 'YEAR' AND release_year = 2017;",
    "reference_sql": "UPDATE tracks SET duration = duration * (release_year / 2020.0) WHERE album_id IN (SELECT id FROM albums WHERE release_year > 2000);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses hard-coded album and arbitrary division by 12; does not generically update durations based on release year"
    }
  },
  {
    "example_id": 973,
    "prompt": "What was the total donation amount for each program's first-time donors in 2022?",
    "generated_sql": "SELECT program, SUM(donation_amount) FROM (SELECT program, SUM(donation_amount) as first_time_donation FROM donor_donations WHERE donor_id = (SELECT id FROM donor_donations WHERE donor_name = 'Joe') WHERE donation_date >= '2022-01-01' AND donation_date < '2022-12-31') t WHERE first_time_donation = 1 GROUP BY program;",
    "reference_sql": "SELECT p.program_name, SUM(d.donation_amount) FROM Programs p JOIN Donations d ON p.program_id = d.program_id WHERE d.donor_id IN (SELECT donor_id FROM Donations WHERE YEAR(donation_date) = 2022 GROUP BY donor_id HAVING COUNT(*) = 1) GROUP BY p.program_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters by a specific donor and does not identify first-time donors per program in 2022"
    }
  },
  {
    "example_id": 974,
    "prompt": "Create a view combining student mental health and demographic data",
    "generated_sql": "CREATE VIEW student_demographics AS SELECT p.student_id, p.gender, p.ethnicity, p.college_id, p.mental_health, p.demographics FROM student p;",
    "reference_sql": "CREATE VIEW student_info AS SELECT smh.student_id, smh.mental_health_score, sd.age, sd.gender FROM student_mental_health smh INNER JOIN student_demographics sd ON smh.student_id = sd.student_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query selects from a single table and does not join separate mental health and demographic tables, so it does not combine the two data sources as requested."
    }
  },
  {
    "example_id": 975,
    "prompt": "Find the top 3 employees with the highest salaries in the \"employee\" and \"salary\" tables",
    "generated_sql": "SELECT employee_name, salary FROM employee ORDER BY salary DESC LIMIT 3;",
    "reference_sql": "SELECT e.name, s.salary FROM employee e JOIN salary s ON e.id = s.employee_id WHERE (SELECT COUNT(*) FROM salary s2 WHERE s2.salary > s.salary) < 3 ORDER BY s.salary DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not join employee and salary tables and only selects from employee"
    }
  },
  {
    "example_id": 976,
    "prompt": "Find the top 2 countries with the highest total installed capacity for wind energy.",
    "generated_sql": "SELECT country, SUM(installed_capacity) AS total_installed_capacity FROM wind_capacity GROUP BY country ORDER BY total_installed_capacity DESC LIMIT 2;",
    "reference_sql": "SELECT CountryName, SUM(InstalledCapacity) AS TotalCapacity FROM Country GROUP BY CountryName ORDER BY TotalCapacity DESC FETCH FIRST 2 ROWS ONLY;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 977,
    "prompt": "Find the number of wells drilled in Texas in 2020",
    "generated_sql": "SELECT COUNT(*) FROM wells WHERE state = 'Texas' AND drilling_year = 2020;",
    "reference_sql": "SELECT COUNT(*) FROM wells WHERE state = 'Texas' AND YEAR(date) = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 978,
    "prompt": "What is the production rate for the well with the highest production rate?",
    "generated_sql": "SELECT production_rate FROM production_rates WHERE well_id = (SELECT id FROM wells WHERE name = 'Well1');",
    "reference_sql": "SELECT production_rate FROM (SELECT well_id, well_type, location, production_rate, ROW_NUMBER() OVER (ORDER BY production_rate DESC) rn FROM wells) t WHERE rn = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by a specific well name instead of selecting the maximum production_rate across all wells."
    }
  },
  {
    "example_id": 979,
    "prompt": "Who has the highest number of rebounds for the Raptors?",
    "generated_sql": "SELECT rps.rebound_id, rps.rebound_name FROM rps JOIN rps_rebounds ON rps.rebound_id = rps_rebounds.rebound_id WHERE rps.team = 'Raptors' AND rps.rebound_name LIKE '%Rebound%' AND rps.rebound_num > 0;",
    "reference_sql": "SELECT home_team_rebounds, away_team_rebounds, (home_team_rebounds + away_team_rebounds) as total_rebounds FROM games WHERE home_team_id = (SELECT team_id FROM teams WHERE team_name = 'Raptors') OR away_team_id = (SELECT team_id FROM teams WHERE team_name = 'Raptors') ORDER BY total_rebounds DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not find the maximum rebounds (no MAX or ORDER BY and LIMIT), includes irrelevant conditions on rebound_name"
    }
  },
  {
    "example_id": 980,
    "prompt": "For the AI_ethics_guidelines table, return the organization_name, guideline_text, and review_date for the row with the minimum review_date, in ascending order.",
    "generated_sql": "SELECT org_name, guideline_text, review_date FROM ai_ethics_guidelines ORDER BY review_date ASC;",
    "reference_sql": "SELECT organization_name, guideline_text, review_date FROM AI_ethics_guidelines WHERE review_date = (SELECT MIN(review_date) FROM AI_ethics_guidelines);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query returns all rows ordered instead of just the row with the minimum review_date"
    }
  },
  {
    "example_id": 981,
    "prompt": "Which users have posted ads and have more than 10 followers?",
    "generated_sql": "SELECT ad_user_id, ad_post_date, followers FROM ads WHERE ad_post_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND followers > 10;",
    "reference_sql": "SELECT users.name FROM users INNER JOIN ads ON users.id = ads.user_id WHERE users.followers > 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query restricts to ads in the last month and uses a followers column on ads without joining the users or followers table, missing users and accurate follower counts."
    }
  },
  {
    "example_id": 982,
    "prompt": "Show fabric and country of origin",
    "generated_sql": "SELECT fabric, country_of_origin, country_of_origin FROM fabric_manufacturing;",
    "reference_sql": "SELECT fabric, country_of_origin FROM sustainable_fabric;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query selects country_of_origin twice instead of only fabric and country_of_origin"
    }
  },
  {
    "example_id": 983,
    "prompt": "What is the total quantity of size 8 and size 9 women's shoes sold in the United Kingdom?",
    "generated_sql": "SELECT SUM(quantity) FROM sales WHERE size = 'Size8' AND country = 'UK' AND sale_date >= '2022-01-01' AND sale_date < '2022-06-01';",
    "reference_sql": "SELECT SUM(s.quantity) FROM sales_2 s WHERE s.product = 'shoes' AND s.size IN (8, 9) AND s.country = 'UK';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only size 8, excludes size 9, and adds unrequested date constraints"
    }
  },
  {
    "example_id": 984,
    "prompt": "Update the 'financial_wellbeing' table to reflect a decrease in the stress level of a client in Mexico.",
    "generated_sql": "UPDATE financial_wellbeing SET stress_level = 6 WHERE client_location = 'Mexico' AND client_status ='satisfied';",
    "reference_sql": "UPDATE financial_wellbeing SET stress_level = 40 WHERE client_id = 8 AND country = 'Mexico';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Adds an irrelevant client_status filter and sets a fixed stress_level instead of decreasing the existing value"
    }
  },
  {
    "example_id": 985,
    "prompt": "How many non-gluten-free items are available in the bakery category?",
    "generated_sql": "SELECT COUNT(*) FROM Inventory WHERE Category = 'Bakery' AND IsNonGlutenFree = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM inventory WHERE category = 'bakery' AND gluten_free = false;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 986,
    "prompt": "What is the name and address of the public library with the highest circulation in the city of Chicago?",
    "generated_sql": "SELECT name, address FROM LibraryAdministration WHERE city = 'Chicago' GROUP BY name, address ORDER BY number DESC LIMIT 1;",
    "reference_sql": "SELECT name, address FROM public_libraries WHERE city = 'Chicago' AND circulation = (SELECT MAX(circulation) FROM public_libraries WHERE city = 'Chicago');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using GROUP BY without aggregation and ordering by an undefined column 'number' instead of the circulation field"
    }
  },
  {
    "example_id": 987,
    "prompt": "What is the total amount of research grants awarded to the Physics department in 2021 and 2022?",
    "generated_sql": "SELECT SUM(grant_amount) FROM (SELECT grant_amount FROM Physics_Research_Grants WHERE year = 2021 OR year = 2022) AS subquery;",
    "reference_sql": "SELECT SUM(grant_amount) as total_grant_amount FROM research_grants WHERE department_id = (SELECT id FROM departments WHERE department_name = 'Physics') AND grant_year IN (2021, 2022);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 988,
    "prompt": "Delete all green buildings in Japan with a silver rating.",
    "generated_sql": "DELETE FROM green_buildings WHERE country = 'Japan';",
    "reference_sql": "DELETE FROM green_buildings WHERE country = 'Japan' AND rating = 'silver';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing condition for silver rating"
    }
  },
  {
    "example_id": 989,
    "prompt": "What is the total installed capacity of renewable energy projects in each country in the European Union?",
    "generated_sql": "SELECT Country, SUM(capacity) FROM RenewableEnergyProjects WHERE country IN ('France', 'Germany', 'Spain', 'Italy') GROUP BY Country;",
    "reference_sql": "SELECT e.country_name, SUM(r.installed_capacity) FROM renewable_energy_projects r INNER JOIN eu_countries e ON r.country = e.country_code GROUP BY e.country_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query restricts to only four countries instead of all EU member states"
    }
  },
  {
    "example_id": 990,
    "prompt": "How many mental health parity violations were reported by gender?",
    "generated_sql": "SELECT Gender, COUNT(DISTINCT Violation) as ViolationCount FROM MentalHealthParity V WHERE ViolationCount >= 0 GROUP BY Gender;",
    "reference_sql": "SELECT Gender, COUNT(*) as ViolationCount FROM MentalHealthParityGender GROUP BY Gender;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect use of COUNT(DISTINCT) and invalid WHERE on alias; should simply count violations per gender without filtering."
    }
  },
  {
    "example_id": 991,
    "prompt": "Identify the number of UNESCO World Heritage sites in Asia with virtual tourism offerings.",
    "generated_sql": "SELECT COUNT(*) FROM virtual_tourism WHERE location = 'Asia' AND type = 'World Heritage';",
    "reference_sql": "SELECT COUNT(*) FROM world_heritage_sites WHERE has_virtual_tour = true AND country IN (SELECT name FROM countries WHERE continent = 'Asia');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not join UNESCO World Heritage sites table to ensure only UNESCO sites are counted"
    }
  },
  {
    "example_id": 992,
    "prompt": "Show the number of hotels that have adopted AI technology in the city of San Francisco",
    "generated_sql": "SELECT COUNT(*) FROM hotels WHERE city = 'San Francisco' AND ai_technology = true;",
    "reference_sql": "SELECT COUNT(*) FROM hotels WHERE city = 'San Francisco' AND has_adopted_ai = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 993,
    "prompt": "What is the most common type of crime in each district?",
    "generated_sql": "SELECT district, COUNT(*) as total_crimes FROM district_crime GROUP BY district ORDER BY total_crimes DESC;",
    "reference_sql": "SELECT District, CrimeType FROM Crimes GROUP BY District;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts total crimes per district but does not determine the most common crime type within each district."
    }
  },
  {
    "example_id": 994,
    "prompt": "Insert new marine debris records into the marine_debris table.",
    "generated_sql": "INSERT INTO marine_debris (id, debris_type, location) VALUES (2, 'Plastic debris', 'Ocean');",
    "reference_sql": "INSERT INTO marine_debris (id, debris_type, debris_date) VALUES (3, 'Microplastic', '2022-03-01'), (4, 'Abandoned Net', '2022-04-01');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only inserts a single record and may omit required columns; does not handle multiple records as requested."
    }
  },
  {
    "example_id": 995,
    "prompt": "List all the unique locations where pollution monitoring has been conducted, along with the number of records for each location.",
    "generated_sql": "SELECT location, COUNT(*) as total_records FROM pollution_monitoring GROUP BY location;",
    "reference_sql": "SELECT location, COUNT(*) as record_count FROM Pollution GROUP BY location;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 996,
    "prompt": "Retrieve the names of all marine species with a conservation status of 'Critically Endangered'",
    "generated_sql": "SELECT species_name FROM marine_species WHERE conservation_status = 'Critically Endangered';",
    "reference_sql": "SELECT species FROM red_list_data WHERE conservation_status = 'Critically Endangered';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 997,
    "prompt": "How many times has each dish been ordered for takeout?",
    "generated_sql": "SELECT dish_id, MAX(order_count) as max_orders FROM takeout GROUP BY dish_id;",
    "reference_sql": "SELECT dish_name, COUNT(*) as total_takeout_orders FROM orders WHERE order_type = 'takeout' GROUP BY dish_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MAX(order_count) instead of COUNT(*) or SUM(order_count) to get total orders per dish"
    }
  },
  {
    "example_id": 998,
    "prompt": "What is the total number of military equipment sold by Lockheed Martin to the Canadian government in 2020?",
    "generated_sql": "SELECT SUM(sales) FROM military_equipment WHERE supplier = 'Lockheed Martin' AND sale_date BETWEEN '2020-01-01' AND '2020-12-31';",
    "reference_sql": "SELECT SUM(quantity) FROM military_sales WHERE supplier = 'Lockheed Martin' AND buyer = 'Canadian Government' AND year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for sales to the Canadian government"
    }
  },
  {
    "example_id": 999,
    "prompt": "Which miner has the lowest CO2 emissions in Africa?",
    "generated_sql": "SELECT miner, COUNT(*) as CO2_emissions FROM Miners WHERE region = 'Africa' GROUP BY miner HAVING CO2_emissions = (SELECT MIN(carbon_emissions) FROM Miners WHERE region = 'Africa');",
    "reference_sql": "SELECT context.miner_name, context.country, sql.co2_emissions, sql.emission_rank FROM environmental_impact sql JOIN miner_year_co2_emissions context ON sql.miner_name = context.miner_name WHERE context.emission_rank = 1 AND sql.country = 'Africa'",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) to measure emissions instead of comparing the carbon_emissions column"
    }
  },
  {
    "example_id": 1000,
    "prompt": "How many employees work at each mine, categorized by their job types?",
    "generated_sql": "SELECT mining_id, job_type, COUNT(*) AS employee_count FROM mine_work GROUP BY mining_id, job_type;",
    "reference_sql": "SELECT MineName, JobType, COUNT(*) as EmployeeCount FROM Employee INNER JOIN Mine ON Employee.MineID = Mine.MineID GROUP BY MineName, JobType;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1001,
    "prompt": "How many workforce diversity incidents were reported in the Southern region in 2020, excluding those reported in January?",
    "generated_sql": "SELECT COUNT(*) FROM workforce_diversity_incidents WHERE region = 'Southern' AND incident_date < '2020-01-01' AND location = 'Southern' AND region = 'Southern' AND area 0 GROUP BY incident_date;",
    "reference_sql": "SELECT region_id, COUNT(incident_id) FROM diversity_incidents WHERE region_id = 1 AND incident_date BETWEEN '2020-02-01' AND '2020-12-31' GROUP BY region_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters use incident_date < '2020-01-01' and incorrect grouping; does not select events in 2020 excluding January."
    }
  },
  {
    "example_id": 1002,
    "prompt": "Update the Machinery table to change the Type of MachineryID 2 to 'Bulldozer'.",
    "generated_sql": "UPDATE machinery SET type = 'Bulldozer' WHERE id = 2;",
    "reference_sql": "UPDATE Machinery SET Type = 'Bulldozer' WHERE MachineryID = 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Column name should be MachineryID not id"
    }
  },
  {
    "example_id": 1003,
    "prompt": "Update a compliance record's regulation and description in the compliance table",
    "generated_sql": "UPDATE compliance SET regulation = 'Compliance Code 1', description = 'Compliance Code 1 Description' WHERE regulation = 'Compliance Code 1';",
    "reference_sql": "UPDATE compliance SET regulation = 'Data Privacy', description = 'Complied with data privacy regulations' WHERE compliance_id = 4001;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause filters on the new regulation value, so it won\u2019t correctly identify the record to update; it should use the old regulation or a proper identifier."
    }
  },
  {
    "example_id": 1004,
    "prompt": "Which artist has the highest total ticket sales?",
    "generated_sql": "SELECT ArtistName, SUM(TicketSales) AS TotalTicketSales FROM ArtistTickets GROUP BY ArtistName ORDER BY TotalTicketSales DESC;",
    "reference_sql": "SELECT artist_name, SUM(tickets_sold) as total_tickets_sold FROM tickets GROUP BY artist_name ORDER BY total_tickets_sold DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing limit to return only the top artist"
    }
  },
  {
    "example_id": 1005,
    "prompt": "What is the average word count of news articles published in the \"articles\" table by month?",
    "generated_sql": "SELECT month, AVG(word_count) OVER (PARTITION BY month) AS avg_word_count FROM articles;",
    "reference_sql": "SELECT EXTRACT(MONTH FROM publication_date) AS month, AVG(word_count) AS avg_word_count FROM articles GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using a window function returns the average for each row rather than one row per month; need to GROUP BY month instead"
    }
  },
  {
    "example_id": 1006,
    "prompt": "What is the average word count of news articles written by investigative journalists?",
    "generated_sql": "SELECT AVG(word_count) FROM News_Articles WHERE journalist = 'Investigative Journalist';",
    "reference_sql": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS avg_word_count FROM news_articles WHERE reporter_id IN (SELECT id FROM reporters WHERE position = 'Investigative Journalist');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on journalist name instead of journalist type or role"
    }
  },
  {
    "example_id": 1007,
    "prompt": "What is the total amount donated by donors in the 'Regular Donors' category?",
    "generated_sql": "SELECT SUM(donation_amount) FROM donors WHERE category = 'Regular Donors';",
    "reference_sql": "SELECT SUM(DonationAmount) FROM Donations INNER JOIN Donors ON Donations.DonorID = Donors.DonorID WHERE Donors.Category = 'Regular Donors';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1008,
    "prompt": "Delete records of players who joined after 2020-01-01 from the 'Player' table",
    "generated_sql": "DELETE FROM Player WHERE join_date > '2020-01-01';",
    "reference_sql": "DELETE FROM Player WHERE Date_Joined > '2020-01-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1009,
    "prompt": "Find the number of IoT sensors installed in each farm that use Sprinkler irrigation.",
    "generated_sql": "SELECT farm_id, farm_name, sensors_installed FROM FarmSensors WHERE irrigation = TRUE;",
    "reference_sql": "SELECT f.id, COUNT(s.id) FROM Farmers f JOIN Irrigation i ON f.id = i.Farm_id JOIN IoT_Sensors s ON f.id = s.Farm_id WHERE i.irrigation_type = 'Sprinkler' GROUP BY f.id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters on irrigation = TRUE instead of selecting where irrigation type = 'Sprinkler'."
    }
  },
  {
    "example_id": 1010,
    "prompt": "Identify the renewable energy project with the highest carbon offset (in tonnes) in 'projects' schema?",
    "generated_sql": "SELECT project_name FROM renewable_energy WHERE carbon_offset = (SELECT MAX(carbon_offset) FROM renewable_energy);",
    "reference_sql": "SELECT project_id, MAX(offset_tonnes) as max_offset FROM projects.carbon_offset GROUP BY project_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1011,
    "prompt": "Find the total revenue for each cuisine type",
    "generated_sql": "SELECT cuisine_type, SUM(revenue) FROM menu_categories GROUP BY cuisine_type;",
    "reference_sql": "SELECT R.CuisineType, SUM(S.Revenue) as TotalRevenue FROM Restaurants R INNER JOIN Sales S ON R.RestaurantID = S.RestaurantID GROUP BY R.CuisineType;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1012,
    "prompt": "How many restaurants are there in each country?",
    "generated_sql": "SELECT country, COUNT(*) FROM restaurants GROUP BY country;",
    "reference_sql": "SELECT country, COUNT(*) FROM restaurant GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1013,
    "prompt": "What is the minimum price of vegan dishes in San Francisco?",
    "generated_sql": "SELECT MIN(price) FROM VeganDishes WHERE city = 'San Francisco';",
    "reference_sql": "SELECT MIN(price) FROM Menu JOIN Restaurants ON Menu.restaurant_id = Restaurants.id WHERE Restaurants.city = 'San Francisco' AND category = 'Vegan';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1014,
    "prompt": "What is the total revenue for 'Italian' category in '2023'?",
    "generated_sql": "SELECT SUM(revenue) FROM revenue WHERE category = 'Italian' AND year = 2023;",
    "reference_sql": "SELECT SUM(revenue) FROM RestaurantRevenue WHERE category = 'Italian' AND year = 2023;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1015,
    "prompt": "List the top 3 most expensive eco-friendly products in Europe and their suppliers.",
    "generated_sql": "SELECT product_name, supplier_name, SUM(amount) AS total_cost FROM eco_friendly_products WHERE country = 'Europe' GROUP BY product_name, supplier_name ORDER BY total_cost DESC LIMIT 3;",
    "reference_sql": "SELECT P.productName, P.price, S.supplierName FROM (SELECT * FROM Products WHERE ecoFriendly = TRUE ORDER BY price DESC LIMIT 3) P JOIN Suppliers S ON P.supplierID = S.supplierID;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Summing amount and grouping is incorrect; should select products by highest price rather than aggregate amounts"
    }
  },
  {
    "example_id": 1016,
    "prompt": "What are the names and launch dates of satellites launched by SpaceX?",
    "generated_sql": "SELECT name, launch_date FROM Satellites WHERE company = 'SpaceX';",
    "reference_sql": "SELECT name, launch_date FROM satellites WHERE manufacturer = 'SpaceX';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1017,
    "prompt": "Insert a new record for the spacecraft 'Artemis III' into the Spacecrafts table",
    "generated_sql": "INSERT INTO Spacecrafts (name, launch_date, mass) VALUES ('Artemis III', '2022-01-01', 1000000000000);",
    "reference_sql": "INSERT INTO Spacecrafts (SpacecraftID, Name, Manufacturer, YearManufactured) VALUES (3, 'Artemis III', 'NASA', 2022);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The INSERT includes arbitrary launch_date and mass values not specified by the request"
    }
  },
  {
    "example_id": 1018,
    "prompt": "What is the maximum number of spacewalks for each astronaut?",
    "generated_sql": "SELECT Astronaut_Name, MAX(Spacewalk_Count) OVER (PARTITION BY Astronaut_Name) as Max_Spacewalks FROM Astronauts;",
    "reference_sql": "SELECT a.name, MAX(sw.id) FROM Astronauts a JOIN Spacewalks sw ON a.id = sw.astronaut_id GROUP BY a.name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1019,
    "prompt": "What is the distribution of fan demographics by age range for each team?",
    "generated_sql": "SELECT f.team_name, f.age_range, COUNT(DISTINCT f.fans) as fan_demographics FROM fans f GROUP BY f.team_name, f.age_range;",
    "reference_sql": "SELECT team, age_range, COUNT(*) as count FROM fan_demographics_team GROUP BY team, age_range;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using COUNT(DISTINCT f.fans) is incorrect; should count fan identifiers (e.g., COUNT(*) or COUNT(fan_id)) to get distribution"
    }
  },
  {
    "example_id": 1020,
    "prompt": "What are the names of the policies related to the transportation sector?",
    "generated_sql": "SELECT PolicyName FROM Policies WHERE Sector = 'Transportation';",
    "reference_sql": "SELECT name FROM policies WHERE sector = 'Transportation';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1021,
    "prompt": "Count the number of 'Train' records in the 'PublicTransit' table where 'state' is 'California'",
    "generated_sql": "SELECT COUNT(*) FROM PublicTransit WHERE state = 'California';",
    "reference_sql": "SELECT COUNT(*) FROM PublicTransit WHERE transit_type = 'Train' AND state = 'California';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for records where the mode is 'Train'"
    }
  },
  {
    "example_id": 1022,
    "prompt": "How many autonomous taxis were in operation in San Francisco as of January 1, 2022?",
    "generated_sql": "SELECT COUNT(*) FROM autonomous_taxis WHERE city = 'San Francisco' AND date BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT COUNT(*) FROM autonomous_taxis WHERE taxi_type = 'autonomous' AND operation_end_date >= '2022-01-01' AND operation_start_date <= '2022-01-01' AND city = 'San Francisco';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts taxis for the entire month of January 2022 instead of as of the specific date January 1, 2022."
    }
  },
  {
    "example_id": 1023,
    "prompt": "List all garments in the \"Spring 2023\" collection that are made of silk or cotton.",
    "generated_sql": "SELECT garment_name FROM garments WHERE collection_name = 'Spring 2023' AND material = 'Silk' AND material = 'Cotton';",
    "reference_sql": "SELECT garment_name FROM Spring2023 WHERE material IN ('Silk', 'Cotton');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses AND for material instead of OR, making no rows match both silk and cotton simultaneously"
    }
  },
  {
    "example_id": 1024,
    "prompt": "What is the number of employees in the 'education' industry?",
    "generated_sql": "SELECT COUNT(*) FROM employees WHERE industry = 'education';",
    "reference_sql": "SELECT SUM(number_of_employees) FROM employment WHERE industry = 'education';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1025,
    "prompt": "What is the total number of workers in unions involved in collective bargaining in each state?",
    "generated_sql": "SELECT state, SUM(number_of_workers) FROM unions WHERE state IN ('California', 'Texas') GROUP BY state;",
    "reference_sql": "SELECT state, SUM(workers) FROM collective_bargaining GROUP BY state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only California and Texas and does not filter for collective bargaining involvement"
    }
  },
  {
    "example_id": 1026,
    "prompt": "What is the total waste generated in South Asia in the year 2020?",
    "generated_sql": "SELECT SUM(waste_amount) FROM waste_generation WHERE region = 'South Asia' AND year = 2020;",
    "reference_sql": "SELECT SUM(waste_generated_kg) FROM WasteGeneration WHERE country IN ('India', 'Pakistan', 'Bangladesh', 'Sri Lanka', 'Afghanistan', 'Nepal', 'Bhutan') AND year = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1027,
    "prompt": "What was the minimum glass recycling rate in 2019 for South America and Africa?",
    "generated_sql": "SELECT MIN(recycling_rate) FROM glass_recycling WHERE source = 'South America' AND year = 2019;",
    "reference_sql": "SELECT MIN(recycling_rate) FROM RecyclingRates WHERE year = 2019 AND material = 'Glass' AND region IN ('South America', 'Africa');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only returns South America, missing Africa"
    }
  },
  {
    "example_id": 1028,
    "prompt": "How many members in the West region have a premium membership?",
    "generated_sql": "SELECT COUNT(*) FROM member WHERE region = 'West' AND membership_type = 'Premium';",
    "reference_sql": "SELECT COUNT(*) FROM memberships WHERE member_type = 'Premium' AND region = 'West';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1029,
    "prompt": "SELECT MemberID, COUNT(*) as WorkoutCountToday FROM Workouts WHERE Date = CURRENT_DATE GROUP BY MemberID ORDER BY WorkoutCountToday DESC;",
    "generated_sql": "SELECT MemberID, COUNT(*) as WorkoutCountToday FROM Workouts WHERE Date = CURRENT_DATE GROUP BY MemberID ORDER BY WorkoutCountToday DESC;",
    "reference_sql": "SELECT MemberID, WorkoutType, DATE_TRUNC('week', Date) as Week, AVG(Duration) as AverageWorkoutDurationPerWeek FROM Workouts GROUP BY MemberID, WorkoutType, Week ORDER BY Week DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1030,
    "prompt": "How many economic diversification projects were completed in '2019'?",
    "generated_sql": "SELECT COUNT(*) FROM economic_diversification WHERE year = 2019;",
    "reference_sql": "SELECT COUNT(*) FROM economic_diversification WHERE YEAR(end_date) = 2019;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1031,
    "prompt": "What is the maximum and minimum population of animals for each species?",
    "generated_sql": "SELECT species, MAX(population) as max_population, MIN(population) as min_population FROM animals GROUP BY species;",
    "reference_sql": "SELECT species, MIN(population) OVER (PARTITION BY species) as min_population, MAX(population) OVER (PARTITION BY species) as max_population FROM animal_population ORDER BY species;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1032,
    "prompt": "What is the total conservation funding per region for the last 5 years?",
    "generated_sql": "SELECT region, SUM(amount) as total_funding FROM conservation_funding WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY region;",
    "reference_sql": "SELECT region, SUM(funding) as total_funding, EXTRACT(YEAR FROM date_trunc('year', current_date)) - sequence AS years_ago FROM conservation_funding, generate_series(1, 5) sequence GROUP BY region, sequence ORDER BY years_ago DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1033,
    "prompt": "What is the average dissolved oxygen level for each species in our fish farms?",
    "generated_sql": "SELECT species, AVG(dissolved_oxygen) FROM fish_farms GROUP BY species;",
    "reference_sql": "SELECT fs.name AS species_name, AVG(av.dissolved_oxygen) AS avg_dissolved_oxygen FROM fish_inventory fi JOIN fish_farms ff ON fi.fish_farm_id = ff.id JOIN fish_species fs ON fi.fish_species_id = fs.id JOIN (SELECT fish_species_id, AVG(dissolved_oxygen) AS dissolved_oxygen FROM water_quality GROUP BY fish_species_id) av ON fs.id = av.fish_species_id GROUP BY fs.name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1034,
    "prompt": "What is the average water temperature in the Pacific Ocean for the month of July?",
    "generated_sql": "SELECT AVG(temperature) FROM weather WHERE location = 'Pacific Ocean' AND month = 7 AND EXTRACT(MONTH FROM timestamp) = 7;",
    "reference_sql": "SELECT AVG(temp) FROM pacific_ocean_temp WHERE EXTRACT(MONTH FROM date) = 7 AND EXTRACT(YEAR FROM date) = 2021 AND ocean_name = 'Pacific Ocean';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1035,
    "prompt": "List the building permits issued in New York City for the construction of multi-family buildings since 2015.",
    "generated_sql": "SELECT permit FROM Permits WHERE city = 'New York City' AND year >= 2015;",
    "reference_sql": "SELECT permit_id, city, building_type, issue_date FROM building_permits WHERE city = 'NYC' AND building_type = 'Multi-family' AND issue_date >= '2015-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not filter for multi-family building permits"
    }
  },
  {
    "example_id": 1036,
    "prompt": "What is the average project timeline for sustainable building projects in the city of Seattle?",
    "generated_sql": "SELECT AVG(project_timeline) FROM sustainable_project_timeline WHERE city = 'Seattle';",
    "reference_sql": "SELECT AVG(project.timeline) FROM project INNER JOIN sustainable_building ON project.id = sustainable_building.project_id WHERE project.city = 'Seattle';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1037,
    "prompt": "How many climate mitigation projects were initiated in Latin America since 2015?",
    "generated_sql": "SELECT SUM(num_projects) FROM climate_mitigation WHERE country IN ('Brazil', 'Argentina', 'Colombia', 'Ecuador', 'Mexico', 'Peru', 'Bolivia', 'Chile', 'Ecuador', 'Colombia', 'Ecuador', 'Peru', 'Ecuador', 'Peru', 'Ecuador', 'Peru', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador', 'Ecuador",
    "reference_sql": "SELECT COUNT(*) FROM mitigation_projects WHERE year >= 2015 AND region = 'Latin America';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing date filter for projects since 2015 and country list is incorrect with duplicates"
    }
  },
  {
    "example_id": 1038,
    "prompt": "What was the total investment in climate communication in Europe and Central Asia in 2019?",
    "generated_sql": "SELECT SUM(amount) FROM climate_communication_investment WHERE country IN ('Europe', 'Central Asia') AND year = 2019;",
    "reference_sql": "SELECT SUM(investment) FROM climate_investments WHERE category = 'Climate Communication' AND (region = 'Europe' OR region = 'Central Asia') AND year = 2019;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1039,
    "prompt": "Find the number of clinical trials for 'DrugE' that ended in phase 3?",
    "generated_sql": "SELECT COUNT(*) FROM clinical_trials WHERE drug_name = 'DrugE' AND phase_3 = 1;",
    "reference_sql": "SELECT COUNT(*) FROM clinical_trials WHERE drug_name = 'DrugE' AND phase = 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts trials that reached phase 3 instead of those whose final phase is 3; it should exclude trials that proceeded to phase 4"
    }
  },
  {
    "example_id": 1040,
    "prompt": "How many cases of Measles were reported in Brazil in 2014?",
    "generated_sql": "SELECT SUM(cases_reported) FROM Measles WHERE country = 'Brazil' AND year = 2014;",
    "reference_sql": "SELECT reported FROM measles_reports WHERE disease = 'Measles' AND location = 'Brazil' AND year = 2014;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1041,
    "prompt": "Display the number of exits by year",
    "generated_sql": "SELECT EXIT_YEAR, COUNT(*) FROM exit_by_year ORDER BY EXIT_YEAR;",
    "reference_sql": "SELECT exit_year, COUNT(*) FROM exit GROUP BY exit_year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY EXIT_YEAR clause to aggregate counts by year"
    }
  },
  {
    "example_id": 1042,
    "prompt": "What is the average disability accommodation budget by state?",
    "generated_sql": "SELECT state, AVG(budget) FROM disability_accommodations GROUP BY state;",
    "reference_sql": "SELECT s.state_name, AVG(da.budget) AS avg_budget FROM disability_accommodations_state da INNER JOIN states s ON da.state_id = s.state_id GROUP BY s.state_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1043,
    "prompt": "What is the maximum population size of all marine species in the North Atlantic, grouped by conservation status?\"",
    "generated_sql": "SELECT conservation_status, MAX(population_size) FROM marine_species WHERE conservation_status IN ('Endangered', 'Critically Endangered', 'Vulnerable') GROUP BY conservation_status;",
    "reference_sql": "SELECT conservation_status, MAX(max_population_size) as max_population_size FROM marine_species_population WHERE region = 'North Atlantic' GROUP BY conservation_status;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for region='North Atlantic' and unnecessary restriction on conservation_status values"
    }
  },
  {
    "example_id": 1044,
    "prompt": "List the dapps that have deployed the fewest smart contracts in the 'Polygon' network.",
    "generated_sql": "SELECT dapps.name FROM dapps INNER JOIN network ON dapps.network_id = network.network_id INNER JOIN smart_contracts ON network.smart_contract_id = smart_contracts.contract_id INNER JOIN smart_contracts ON smart_contracts.contract_id = smart_contracts.contract_id ON dapps.network_id = smart_contracts.network_id WHERE smart_contracts.deployment_date BETWEEN '2022-01-01' AND '2022-12",
    "reference_sql": "SELECT dapp_name, network, smart_contracts, DENSE_RANK() OVER (ORDER BY smart_contracts ASC) as rank FROM polygon_dapps WHERE network = 'Polygon';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses incorrect joins, duplicates smart_contracts table, and includes unrelated date filter"
    }
  },
  {
    "example_id": 1045,
    "prompt": "What is the number of smart contracts developed by individuals from underrepresented communities in the Ethereum network?",
    "generated_sql": "SELECT COUNT(*) FROM smart_contracts WHERE community_id IN (SELECT community_id FROM community WHERE community_type = 'Ethnolinguistic') AND community_name IN (SELECT community_name FROM community WHERE community_type = 'Underrepresented');",
    "reference_sql": "SELECT COUNT(*) FROM smart_contracts WHERE developer_community IN ('Women in Tech', 'Minority Ethnic Group', 'LGBTQ+', 'People with Disabilities', 'Indigenous People', 'Young Developers');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query misuses community filters and does not filter for the Ethereum network"
    }
  },
  {
    "example_id": 1046,
    "prompt": "What is the maximum safety rating for products in the skincare category that are not tested on animals?",
    "generated_sql": "SELECT MAX(safety_rating) FROM products WHERE category ='skincare' AND is_animal_testing = false;",
    "reference_sql": "SELECT MAX(PS.SafetyRating) as HighestSafetyRating FROM ProductSafety PS JOIN Products P ON PS.ProductID = P.id JOIN CrueltyFreeCertification CFC ON P.id = CFC.ProductID WHERE P.Category = 'skincare' AND P.IsCrueltyFree = TRUE AND CFC.CertificationDate IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1047,
    "prompt": "Which ingredients used in cosmetics are sourced from countries with high biodiversity and have been certified as organic?",
    "generated_sql": "SELECT ingredient_name FROM ingredients WHERE certified_organic = TRUE AND country LIKE 'countries%' AND country IN (SELECT country FROM countries WHERE country LIKE 'Country%' AND is_bioregional = TRUE);",
    "reference_sql": "SELECT I.Ingredient_Name FROM Ingredients I INNER JOIN Ingredient_Sources ISrc ON I.Ingredient_ID = ISrc.Ingredient_ID WHERE I.Is_Organic = true AND ISrc.Source_Country IN ('Brazil', 'Indonesia', 'Colombia', 'Madagascar', 'Peru');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses placeholder LIKE patterns and incorrect filters instead of properly joining ingredients to countries with high biodiversity"
    }
  },
  {
    "example_id": 1048,
    "prompt": "Show the number of threat occurrences per threat type and month in the 'threat_intelligence' table",
    "generated_sql": "SELECT threat_type, COUNT(*) as number_of_occurrences, MONTH(occurrence_date) as month_of_occurrence FROM threat_intelligence GROUP BY threat_type;",
    "reference_sql": "SELECT EXTRACT(MONTH FROM occurrence_date) as month, threat_type, COUNT(*) as threat_count FROM threat_intelligence GROUP BY month, threat_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not group by month_of_occurrence, so it does not return counts per threat type and month"
    }
  },
  {
    "example_id": 1049,
    "prompt": "Show veteran employment statistics for the year 2020",
    "generated_sql": "SELECT * FROM veteran_employment WHERE employment_year = 2020;",
    "reference_sql": "SELECT * FROM veteran_employment WHERE year = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1050,
    "prompt": "What is the total number of peacekeeping operations in the Middle East and their average duration?",
    "generated_sql": "SELECT AVG(Duration) FROM PeacekeepingOperations WHERE Region IN ('Middle East', 'North Africa') AND Type = 'Military';",
    "reference_sql": "SELECT COUNT(*) AS total_operations, AVG(end_date - start_date) AS avg_duration FROM PeacekeepingOperationsMiddleEast;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only returns average duration, does not return total count, and incorrectly filters regions and operation type"
    }
  },
  {
    "example_id": 1051,
    "prompt": "What is the average transaction amount for retail customers in New York?",
    "generated_sql": "SELECT AVG(amount) FROM transactions WHERE city = 'New York' AND customer_state = 'NY';",
    "reference_sql": "SELECT AVG(transaction_amount) FROM retail_customers WHERE state = 'NY';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not filter for retail customers"
    }
  },
  {
    "example_id": 1052,
    "prompt": "What is the total assets of clients who have invested in both stocks and bonds?",
    "generated_sql": "SELECT SUM(Assets) FROM clients WHERE Investments IN (SELECT Investments FROM stocks);",
    "reference_sql": "SELECT c.total_assets FROM clients c INNER JOIN investments i ON c.client_id = i.client_id WHERE i.investment_type IN ('Stocks', 'Bonds') GROUP BY c.client_id HAVING COUNT(DISTINCT i.investment_type) = 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query only checks for stock investments and does not ensure clients also invested in bonds."
    }
  },
  {
    "example_id": 1053,
    "prompt": "Show the total tonnage of cargo handled by each port in the South America region, ranked in descending order, including ports with no cargo.",
    "generated_sql": "SELECT port, SUM(cargo_tonnage) as total_tonnage FROM freight WHERE region = 'South America' GROUP BY port ORDER BY total_tonnage DESC;",
    "reference_sql": "SELECT p.port_name, COALESCE(SUM(c.tonnage),0) as total_tonnage FROM ports p LEFT JOIN cargo c ON p.port_id = c.port_id WHERE p.region = 'South America' GROUP BY p.port_name ORDER BY total_tonnage DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not include ports with no cargo, needs an outer join on ports to show zero tonnage"
    }
  },
  {
    "example_id": 1054,
    "prompt": "Add a new record to the 'resources' table for a rural health center in India.",
    "generated_sql": "INSERT INTO resources (id, location, state, country, name, description, price, status, start_date) VALUES (1, 'Rural Health Center', 'India', 'India', 'healthcare', '2022-01-01', '500', '2022-01-02');",
    "reference_sql": "INSERT INTO rural.resources (id, resource_type, country) VALUES (1, 'rural health center', 'India');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Column values are mismatched and fields like description, status, and dates are assigned incorrect values"
    }
  },
  {
    "example_id": 1055,
    "prompt": "What is the average budget of military technology programs in the Asia-Pacific region, excluding programs with a budget over $500 million?",
    "generated_sql": "SELECT AVG(budget) FROM military_tech_programs WHERE region = 'Asia-Pacific' AND budget > 50000000;",
    "reference_sql": "SELECT AVG(budget) FROM MilitaryBudget WHERE region = 'Asia-Pacific' AND budget <= 500000000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The filter uses budget > 50,000,000 instead of excluding budgets over 500,000,000 (should use budget <= 500000000)"
    }
  },
  {
    "example_id": 1056,
    "prompt": "What is the total budget for program 'Sports' in 2021?",
    "generated_sql": "SELECT SUM(budget) FROM budget_2021 WHERE program = 'Sports';",
    "reference_sql": "SELECT SUM(allocated_budget) FROM Budget WHERE program_name = 'Sports' AND year = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1057,
    "prompt": "Who are the top 3 donors in terms of total donation amount?",
    "generated_sql": "SELECT Donors.Name, SUM(Donations.Amount) as TotalDonationAmount FROM Donors JOIN Donations ON Donors.DonorID = Donations.DonorID GROUP BY Donors.Name ORDER BY TotalDonationAmount DESC LIMIT 3;",
    "reference_sql": "SELECT Name, TotalDonations FROM Donors ORDER BY TotalDonations DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1058,
    "prompt": "Alter 'Courses' table to add a column 'StudentsEnrolled'",
    "generated_sql": "ALTER TABLE Courses ADD COLUMN StudentsEnrolled INT;",
    "reference_sql": "ALTER TABLE Courses ADD COLUMN StudentsEnrolled INT;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1059,
    "prompt": "How many employees were hired in each month of 2022?",
    "generated_sql": "SELECT d.start_date, e.start_date, SUM(e.num_employees) FROM employee_hires e JOIN (SELECT DATE_PART('month', e.start_date) as year, DATE_PART('year', e.start_date) as month, DATE_PART('year', e.start_date) as quarter FROM employee_hires JOIN quarter_end e ON employee_hires.quarter = quarter_end.quarter WHERE e.start_date BETWEEN '2022-01-01",
    "reference_sql": "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query is truncated and contains incomplete subqueries, making its syntax and logic invalid."
    }
  },
  {
    "example_id": 1060,
    "prompt": "How many wells are there in total in the 'CaspianSea' schema?",
    "generated_sql": "SELECT COUNT(*) FROM wells WHERE type = 'well' AND region = 'CaspianSea';",
    "reference_sql": "SELECT COUNT(*) FROM CaspianSea.wells;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query adds unnecessary filters (type and region) instead of simply counting all wells in the CaspianSea schema."
    }
  },
  {
    "example_id": 1061,
    "prompt": "Update the 'oil_production' value for the record with 'well_id' = 2 in the 'production_figures' table to 2000",
    "generated_sql": "UPDATE production_figures SET production_quantity = 2000 WHERE well_id = 2;",
    "reference_sql": "UPDATE production_figures SET oil_production = 2000 WHERE well_id = 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Updates 'production_quantity' instead of the 'oil_production' column"
    }
  },
  {
    "example_id": 1062,
    "prompt": "How many educational institutions in 'refugee_camps' have 'education_support' as one of their services?",
    "generated_sql": "SELECT COUNT(*) FROM refugee_camps WHERE education_support = 'education_support';",
    "reference_sql": "SELECT num_edu_institutions FROM refugee_camps WHERE services LIKE '%education_support%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for educational institutions or correctly check services; uses incorrect column comparison"
    }
  },
  {
    "example_id": 1063,
    "prompt": "Which organizations have contributed more than $50,000 for 'Community Development' sector in 'South America'?",
    "generated_sql": "SELECT organization FROM Contributions WHERE sector = 'Community Development' AND contribution > 5000000 AND country IN ('Argentina', 'Brazil', 'Colombia', 'Peru', 'Venezuela');",
    "reference_sql": "SELECT organization FROM Contributions_South_America WHERE sector = 'Community Development' AND amount > 50000 AND location = 'South America';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses wrong contribution threshold and incomplete country list for South America"
    }
  },
  {
    "example_id": 1064,
    "prompt": "What is the minimum budget for an AI project in Europe?",
    "generated_sql": "SELECT MIN(budget) FROM ai_projects WHERE region = 'Europe';",
    "reference_sql": "SELECT MIN(budget) FROM ai_projects WHERE country = 'UK';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1065,
    "prompt": "What is the total number of employees working in companies that have implemented ethical AI?",
    "generated_sql": "SELECT COUNT(*) FROM ethical_ai_companies WHERE is_ethical_ai_enabled = TRUE;",
    "reference_sql": "SELECT SUM(num_employees) FROM Companies WHERE has_ethical_ai = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts companies instead of summing their employee counts."
    }
  },
  {
    "example_id": 1066,
    "prompt": "What is the minimum number of bikes available at each station in Paris?",
    "generated_sql": "SELECT Station, MIN(BikeCount) FROM Bikes WHERE ArrivalCountry = 'Paris' GROUP BY Station;",
    "reference_sql": "SELECT station_id, MIN(num_bikes) FROM bike_stations WHERE city = 'Paris' GROUP BY station_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by ArrivalCountry = 'Paris' but should filter stations located in the city of Paris"
    }
  },
  {
    "example_id": 1067,
    "prompt": "What is the percentage of accessible buses and trams in the fleet?",
    "generated_sql": "SELECT (SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM BusFleet) FROM BusFleet WHERE accessible = TRUE) AS percentage FROM BusFleet;",
    "reference_sql": "SELECT type, (COUNT(*) FILTER (WHERE accessibility = TRUE) * 100.0 / COUNT(*)) AS percentage FROM fleet GROUP BY type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only calculates percentage for buses and ignores trams"
    }
  },
  {
    "example_id": 1068,
    "prompt": "Update the material_waste table to set recycling_rate to 35 for all materials with type as 'Plastic'",
    "generated_sql": "UPDATE material_waste SET recycling_rate = 35 WHERE type = 'Plastic';",
    "reference_sql": "UPDATE material_waste SET recycling_rate = 35 WHERE type = 'Plastic';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1069,
    "prompt": "What is the average carbon footprint of clothing items made with recycled materials?",
    "generated_sql": "SELECT AVG(carbon_footprint) FROM Clothing_Materials WHERE material ='recycled';",
    "reference_sql": "SELECT AVG(carbon_footprint) FROM RecycledClothing;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1070,
    "prompt": "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?",
    "generated_sql": "SELECT material_id FROM inventory WHERE quantity_used > 100 AND product_type NOT IN ('plastic', 'aluminum','steel', 'ceramic');",
    "reference_sql": "SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses wrong columns and hard-coded product_types instead of excluding materials based on products table and misuses quantity_used > 100 instead of quantity >= 100"
    }
  },
  {
    "example_id": 1071,
    "prompt": "What is the average fabric waste (in kg) for each textile supplier in the NY region?",
    "generated_sql": "SELECT s.supplier_name, AVG(s.waste_weight) as avg_waste_kg FROM textile_suppliers s WHERE s.region = 'NY' GROUP BY s.supplier_name;",
    "reference_sql": "SELECT Region, AVG(AvgFabricWaste) FROM TextileSuppliers WHERE Region = 'NY' GROUP BY Region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1072,
    "prompt": "What is the name and sensitivity of the biosensor technology with the lowest sensitivity?",
    "generated_sql": "SELECT name, sensitivity FROM biosensors WHERE name <> 'D2000' AND sensitivity = (SELECT min(sensitivity) FROM biosensors WHERE name <> 'D2000');",
    "reference_sql": "SELECT name, sensitivity FROM biosensors.technologies ORDER BY sensitivity ASC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary exclusion of 'D2000' may omit the true lowest sensitivity"
    }
  },
  {
    "example_id": 1073,
    "prompt": "Which graduate students have not received any research grants?",
    "generated_sql": "SELECT graduate_student_id FROM graduate_students WHERE graduate_student_id IS NULL;",
    "reference_sql": "SELECT g.name FROM grad_students g LEFT JOIN research_grants r ON g.id = r.student_id WHERE r.id IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query checks for NULL IDs instead of students without grants"
    }
  },
  {
    "example_id": 1074,
    "prompt": "Which smart city initiatives have been implemented in a given city?",
    "generated_sql": "SELECT name FROM smart_cities WHERE id IN (SELECT id FROM cities WHERE name = 'New York City');",
    "reference_sql": "SELECT Initiative.initiative_name FROM City JOIN Initiative ON City.city_id = Initiative.city_id WHERE City.city_name = 'CityName';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses smart_cities.id to match cities.id and hardcodes city name instead of using city_id relationship"
    }
  },
  {
    "example_id": 1075,
    "prompt": "Delete all records from the \"virtual_tours\" table where the \"platform\" is \"WebXR\"",
    "generated_sql": "DELETE FROM virtual_tours WHERE platform = 'WebXR';",
    "reference_sql": "DELETE FROM virtual_tours WHERE platform = 'WebXR';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1076,
    "prompt": "Delete the record for the 'Virtual Tour of the Great Wall' from the database.",
    "generated_sql": "DELETE FROM virtual_tour WHERE id = 1;",
    "reference_sql": "DELETE FROM tours WHERE name = 'Virtual Tour of the Great Wall' AND location = 'China';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query deletes id=1 without verifying it matches 'Virtual Tour of the Great Wall'; should filter by the title field."
    }
  },
  {
    "example_id": 1077,
    "prompt": "What is the ranking of hotels in the 'asia_hotels' view by online travel agency bookings?",
    "generated_sql": "SELECT hotel_id, hotel_name, BOOLEAN(bookings_outcome = 'Yes') as b_outcome FROM (SELECT hotel_id, hotel_name, BOOLEAN(bookings_outcome = 'Yes') as b_outcome FROM Asia_Hotels) t WHERE b_outcome = TRUE;",
    "reference_sql": "SELECT name, ROW_NUMBER() OVER (ORDER BY bookings DESC) as ranking FROM asia_hotels JOIN online_travel_agency_bookings ON asia_hotels.id = online_travel_agency_bookings.hotel_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters on a boolean outcome and does not compute or order by online travel agency booking counts or generate a ranking."
    }
  },
  {
    "example_id": 1078,
    "prompt": "What is the maximum and minimum temperature difference between any two Arctic research stations?",
    "generated_sql": "SELECT MAX(temp) AS max_temp, MIN(temp) AS min_temp FROM stations WHERE location = 'North America' GROUP BY location;",
    "reference_sql": "SELECT a.name as station1, b.name as station2, MAX(ABS(a.temperature - b.temperature)) as temp_diff FROM arctic_stations a, arctic_stations b ORDER BY temp_diff DESC LIMIT 1",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by North America and groups incorrectly, does not compute temperature differences between stations"
    }
  },
  {
    "example_id": 1079,
    "prompt": "How many whale species are in the Southern Ocean?",
    "generated_sql": "SELECT COUNT(*) FROM WhaleSpecies WHERE habitat = 'Southern Ocean';",
    "reference_sql": "SELECT COUNT(whale_species) FROM SouthernOcean WHERE whale_species LIKE '%Whale%';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1080,
    "prompt": "List all unique marine species observed in 'north_pole' and 'south_pole'.",
    "generated_sql": "SELECT species FROM marine_species WHERE location IN ('north_pole','south_pole');",
    "reference_sql": "SELECT DISTINCT species_name FROM polar_species_observations WHERE pole IN ('North Pole', 'South Pole');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing DISTINCT to ensure unique species"
    }
  },
  {
    "example_id": 1081,
    "prompt": "What is the minimum temperature (in degrees Celsius) recorded in the Indian Ocean in the last decade?",
    "generated_sql": "SELECT MIN(temperature) FROM ocean_temperatures WHERE location = 'Indian Ocean' AND year >= 2015;",
    "reference_sql": "SELECT MIN(temperature) FROM ocean_temperature WHERE year BETWEEN 2011 AND 2020 AND location = 'Indian Ocean';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query hard\u2010codes year>=2015 instead of dynamically covering the last 10 years"
    }
  },
  {
    "example_id": 1082,
    "prompt": "What is the total population of all marine species in the Pacific ocean?",
    "generated_sql": "SELECT SUM(population) FROM marine_species WHERE ocean = 'Pacific';",
    "reference_sql": "SELECT SUM(population) FROM marine_species WHERE location = 'Pacific';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1083,
    "prompt": "How many shows were released in each genre, and what is the total runtime for each genre?",
    "generated_sql": "SELECT genre, COUNT(*) as total_shows, SUM(runtime) as total_runtime FROM shows GROUP BY genre;",
    "reference_sql": "SELECT genre, COUNT(*), SUM(runtime) FROM shows GROUP BY genre;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1084,
    "prompt": "What is the total runtime of TV shows with diverse casts?",
    "generated_sql": "SELECT SUM(runtime) FROM tv_shows WHERE diversity = true;",
    "reference_sql": "SELECT SUM(runtime_minutes) FROM tv_shows WHERE cast_diverse = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1085,
    "prompt": "What was the average military equipment sales price per quarter in 2019?",
    "generated_sql": "SELECT AVG(price) FROM MilitaryEquipmentSales WHERE year = 2019 AND month IN (2, 5, 7, 9, 11);",
    "reference_sql": "SELECT quarter, AVG(price) FROM equipment_sales WHERE year = 2019 GROUP BY quarter;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not group by quarter and uses incorrect month filters"
    }
  },
  {
    "example_id": 1086,
    "prompt": "What is the total CO2 emission for each equipment type, excluding equipment that is older than 8 years?",
    "generated_sql": "SELECT equipment_type, COUNT(*) AS total_emissions FROM emissions_2 GROUP BY equipment_type;",
    "reference_sql": "SELECT EquipmentType, SUM(CO2Emission) as TotalCO2Emission FROM EmissionData WHERE Age <= 8 GROUP BY EquipmentType;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) instead of summing CO2 emissions and does not filter out equipment older than 8 years"
    }
  },
  {
    "example_id": 1087,
    "prompt": "What are the top 5 countries with the most broadband subscribers?",
    "generated_sql": "SELECT country, SUM(subscribers) AS total_subscribers FROM broadband_subscribers GROUP BY country ORDER BY total_subscribers DESC LIMIT 5;",
    "reference_sql": "SELECT bs.country, COUNT(bs.subscriber_id) AS num_subscribers FROM broadband_subscribers bs JOIN country_codes cc ON bs.country = cc.country GROUP BY bs.country ORDER BY num_subscribers DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1088,
    "prompt": "What is the total number of postpaid and prepaid mobile subscribers in each region?",
    "generated_sql": "SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query returns only total subscribers per region without separating postpaid and prepaid counts"
    }
  },
  {
    "example_id": 1089,
    "prompt": "How many non-profit organizations are there in the 'social_services' sector with an annual revenue greater than $500,000?",
    "generated_sql": "SELECT COUNT(*) FROM social_services.non_profit_orgs WHERE annual_revenue >= 500000;",
    "reference_sql": "SELECT COUNT(*) FROM organizations WHERE sector = 'social_services' AND annual_revenue > 500000.00;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses >= 500000 instead of strictly > 500000"
    }
  },
  {
    "example_id": 1090,
    "prompt": "What is the mission statement for the nonprofit with the lowest average grant amount?",
    "generated_sql": "SELECT MIN(grant_amount) FROM nonprofits WHERE organization_name LIKE '%nonprofit%';",
    "reference_sql": "SELECT MissionStatement FROM Nonprofits N WHERE N.NonprofitID = (SELECT G.NonprofitID FROM Grants G GROUP BY G.NonprofitID ORDER BY AVG(GrantAmount) ASC LIMIT 1);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns a single minimum grant amount instead of retrieving the mission statement for the nonprofit with the lowest average grant amount"
    }
  },
  {
    "example_id": 1091,
    "prompt": "Insert a new record into the \"DeepSeaExploration\" table with values (1, 'Atlantic Ocean', 'Successful')",
    "generated_sql": "INSERT INTO DeepSeaExploration (id, region, success) VALUES (1, 'Atlantic Ocean', 'Successful');",
    "reference_sql": "INSERT INTO DeepSeaExploration (Id, Location, Status) VALUES (1, 'Atlantic Ocean', 'Successful');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1092,
    "prompt": "What is the maximum score achieved in the 'scores' table?",
    "generated_sql": "SELECT MAX(score) FROM scores;",
    "reference_sql": "SELECT MAX(score) FROM scores;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1093,
    "prompt": "List the top 3 countries with the most players in Mobile games.",
    "generated_sql": "SELECT * FROM Players WHERE GameType = 'Mobile' OR GameType = 'Mobile Games';",
    "reference_sql": "SELECT Country, COUNT(PlayerID) as NumberOfPlayers FROM Players WHERE FavoriteGame = 'Mobile' GROUP BY Country ORDER BY NumberOfPlayers DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not group by country, count players per country, order by count, or limit to top 3"
    }
  },
  {
    "example_id": 1094,
    "prompt": "Show the youngest player from the 'PlayerData' table",
    "generated_sql": "SELECT player_name, MIN(age) FROM PlayerData GROUP BY player_name;",
    "reference_sql": "SELECT * FROM PlayerData ORDER BY Age LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by player_name returns each player\u2019s age rather than the single youngest player"
    }
  },
  {
    "example_id": 1095,
    "prompt": "What is the average age of players who play multiplayer games?",
    "generated_sql": "SELECT AVG(age) FROM players WHERE game = 'Minecraft';",
    "reference_sql": "SELECT AVG(age) FROM players WHERE multiplayer = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters for 'Minecraft' instead of all multiplayer games"
    }
  },
  {
    "example_id": 1096,
    "prompt": "What is the minimum price per kilogram of Gadolinium imported by South Korea from all countries in the last 5 years?",
    "generated_sql": "SELECT MIN(price) FROM Gadolinium_Import WHERE country IN (SELECT country FROM DMI WHERE country LIKE '%South Korea' AND EXTRACT(YEAR FROM import_date) = 2022);",
    "reference_sql": "SELECT MIN(price) FROM Gadolinium_Imports WHERE importing_country = 'South Korea' GROUP BY year ORDER BY year DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only year 2022 using the wrong table and country field, does not compute last 5 years or target South Korea imports"
    }
  },
  {
    "example_id": 1097,
    "prompt": "Insert new inclusive housing policies in Boston.",
    "generated_sql": "INSERT INTO inclusive_housing (id, name, location, neighborhood, cost) VALUES (3, 'Boston', 'Boston', 'Boston', 20.00);",
    "reference_sql": "INSERT INTO policies(id, city, policy) VALUES (2, 'Boston', 'Policy 2');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query inserts generic placeholder values (all 'Boston') and a cost without specifying actual policy details, failing to capture the requested inclusive housing policies."
    }
  },
  {
    "example_id": 1098,
    "prompt": "List the number of affordable housing units in each neighborhood of San Francisco.",
    "generated_sql": "SELECT Neighborhood.Name, COUNT(S.UnitID) AS NumberOfUnits FROM Neighborhoods INNER JOIN Units ON Neighborhoods.NeighborhoodID = Units.NeighborhoodID WHERE Units.Zone = 'San Francisco' GROUP BY Neighborhood.Name;",
    "reference_sql": "SELECT neighborhood, num_units FROM affordable_housing;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for affordable housing units"
    }
  },
  {
    "example_id": 1099,
    "prompt": "What is the total number of co-owned properties in each location type?",
    "generated_sql": "SELECT location_type, COUNT(*) FROM properties WHERE co_ownership IS NOT NULL GROUP BY location_type;",
    "reference_sql": "SELECT location, SUM(count) FROM co_ownership_location_count WHERE location IN ('urban', 'rural') GROUP BY location;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering co-owned properties using IS NOT NULL may include non\u2013co-owned rows; should explicitly filter for co_ownership = TRUE or appropriate flag"
    }
  },
  {
    "example_id": 1100,
    "prompt": "What is the total number of inclusive housing policies in each city?",
    "generated_sql": "SELECT c.city, COUNT(i.policy_id) AS policy_count FROM cities c JOIN housing_policies i ON c.city = i.city GROUP BY c.city;",
    "reference_sql": "SELECT city, COUNT(DISTINCT policy) as num_policies FROM inclusive_housing GROUP BY city;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to count only inclusive housing policies"
    }
  },
  {
    "example_id": 1101,
    "prompt": "How many products in each category are available in the inventory?",
    "generated_sql": "SELECT Category, COUNT(*) FROM Products GROUP BY Category;",
    "reference_sql": "SELECT category, COUNT(*) FROM products GROUP BY category;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for available products in inventory"
    }
  },
  {
    "example_id": 1102,
    "prompt": "What is the total quantity of products manufactured using ethical labor practices in each country?",
    "generated_sql": "SELECT c.country, SUM(p.quantity) FROM product_manufacturing p JOIN manufacturer m ON p.manufacturer_id = m.manufacturer_id JOIN country c ON p.country = c.country GROUP BY c.country;",
    "reference_sql": "SELECT country, SUM(quantity) FROM country_ethical_chains WHERE ethical_labor = TRUE GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No filter for ethical labor practices"
    }
  },
  {
    "example_id": 1103,
    "prompt": "Find the number of operational satellites in low Earth orbit.",
    "generated_sql": "SELECT COUNT(*) FROM operational_satellites WHERE orbit_latitude = '100.0' AND orbit_longitude = '000.0' GROUP BY orbit_latitude, orbit_longitude;",
    "reference_sql": "SELECT COUNT(*) FROM Satellites WHERE Orbit = 'Low Earth Orbit' AND Operational = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Filters by specific latitude and longitude instead of selecting satellites in low Earth orbit"
    }
  },
  {
    "example_id": 1104,
    "prompt": "What is the average age of astronauts from Japan?",
    "generated_sql": "SELECT AVG(age) FROM astronauts WHERE country = 'Japan';",
    "reference_sql": "SELECT AVG(age) as avg_age FROM astronauts WHERE country = 'Japan';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1105,
    "prompt": "What is the total number of spacecraft sent to Mars by any space agency?",
    "generated_sql": "SELECT COUNT(*) FROM SpacecraftSends WHERE agency = 'NASA';",
    "reference_sql": "SELECT COUNT(*) FROM mars_missions;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by NASA only instead of counting all agencies"
    }
  },
  {
    "example_id": 1106,
    "prompt": "Identify the number of unique ticket buyers from California who attended more than three games in the last season.",
    "generated_sql": "SELECT COUNT(DISTINCT ticket_buyer_id) as unique_ticket_buyers FROM ticket_buyers WHERE state = 'CA' AND game_date >= DATEADD(year, -3, GETDATE());",
    "reference_sql": "SELECT COUNT(DISTINCT buyer_name) FROM ticket_sales WHERE state = 'CA' AND game_count > 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query lacks a GROUP BY and HAVING clause to filter buyers with more than three games and uses an incorrect date range for the last season."
    }
  },
  {
    "example_id": 1107,
    "prompt": "What is the percentage of security incidents that were phishing attacks in the last quarter?",
    "generated_sql": "SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM security_incidents WHERE incident_date >= DATEADD(quarter, -1, CURRENT_DATE)) as phishing_percentage FROM security_incidents WHERE incident_date >= DATEADD(quarter, -1, CURRENT_DATE) AND incident_type = 'Phishing';",
    "reference_sql": "SELECT (COUNT(*) FILTER (WHERE incident_type = 'Phishing') * 100.0 / COUNT(*)) as phishing_percentage FROM incidents WHERE incident_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1108,
    "prompt": "List all machinery malfunctions that affected union members in Texas since 2018-01-01, ordered by severity.",
    "generated_sql": "SELECT * FROM machinery_malfunctions WHERE state = 'TX' AND severity = 'Danger' ORDER BY severity;",
    "reference_sql": "SELECT w.incident_date, w.incident_type, w.severity FROM WorkplaceSafety w JOIN UnionNegotiations n ON w.union_id = n.union_id JOIN UnionMembers m ON n.union_id = m.union_id WHERE m.state = 'TX' AND w.incident_date >= '2018-01-01' AND w.incident_type = 'Machinery Malfunction' ORDER BY w.severity DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing date filter for malfunctions since 2018-01-01, missing filter for union members, and incorrectly restricts severity to 'Danger' instead of ordering by severity."
    }
  },
  {
    "example_id": 1109,
    "prompt": "Compute the average safety rating for hybrid vehicles",
    "generated_sql": "SELECT AVG(safety_rating) FROM vehicle_safety WHERE vehicle_type = 'hybrid';",
    "reference_sql": "SELECT AVG(safety_rating) FROM safety_ratings WHERE vehicle_type = 'Hybrid';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1110,
    "prompt": "What is the total number of electric vehicles sold in each city in Canada?",
    "generated_sql": "SELECT city, SUM(vehicles_sold) FROM electric_vehicles WHERE country = 'Canada' GROUP BY city;",
    "reference_sql": "SELECT City, SUM(Quantity) FROM EVSales WHERE Country = 'Canada' GROUP BY City;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1111,
    "prompt": "How many visitors attended the Modern Art exhibition from the United States?",
    "generated_sql": "SELECT COUNT(DISTINCT visitor_id) FROM VisitorData WHERE exhibition_id = (SELECT exhibition_id FROM VisitorData WHERE country = 'United States');",
    "reference_sql": "SELECT COUNT(visitor_id) as num_visitors FROM visitors WHERE exhibition_id = 2 AND country = 'USA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not filter for the Modern Art exhibition and misuses a subquery to select exhibition_id based on country instead of exhibition name."
    }
  },
  {
    "example_id": 1112,
    "prompt": "find the total attendance for exhibits 1 and 2",
    "generated_sql": "SELECT SUM(attendance) FROM Exhibits WHERE exhibit_id = 1 AND exhibit_id = 2;",
    "reference_sql": "SELECT SUM(attendance) FROM exhibition_statistics WHERE exhibit_id IN (1, 2);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using AND in the WHERE clause yields no rows; should use OR or IN to select exhibits 1 and 2"
    }
  },
  {
    "example_id": 1113,
    "prompt": "Update wastewater treatment records from 'New York' to have a 5% higher water volume",
    "generated_sql": "UPDATE wastewater_treatment SET water_volume = 5.3 WHERE location = 'New York';",
    "reference_sql": "UPDATE wastewater_treatment SET water_volume = water_volume * 1.05 WHERE location = 'New York';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Sets water_volume to a constant (5.3) instead of increasing the existing value by 5% (water_volume * 1.05)."
    }
  },
  {
    "example_id": 1114,
    "prompt": "What is the average water usage in Florida in 2020?",
    "generated_sql": "SELECT AVG(usage) FROM water_usage WHERE state = 'Florida' AND year = 2020;",
    "reference_sql": "SELECT AVG(usage) FROM water_usage WHERE state='Florida' AND year=2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1115,
    "prompt": "Show the total workout duration for each workout type, excluding the ones that have a duration less than 30 minutes.",
    "generated_sql": "SELECT WorkoutType, SUM(WorkoutDuration) FROM Workouts WHERE WorkoutDuration < 30 GROUP BY WorkoutType;",
    "reference_sql": "SELECT workout_type, SUM(workout_duration) FROM workout_data_ext WHERE workout_duration >= 30 GROUP BY workout_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause includes durations < 30 instead of excluding them"
    }
  },
  {
    "example_id": 1116,
    "prompt": "List community development initiatives and their funding sources from the 'rural_development' database",
    "generated_sql": "SELECT initiative, funding FROM community_development WHERE type = 'initiative';",
    "reference_sql": "SELECT initiative, lead_organization, funding_source FROM community_development;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary filter on type='initiative' and possible mismatch in funding source column name"
    }
  },
  {
    "example_id": 1117,
    "prompt": "What is the total budget for all agricultural innovation projects in the 'rural_infrastructure' table?",
    "generated_sql": "SELECT SUM(budget) FROM rural_infrastructure WHERE project_type = 'agricultural_innovation';",
    "reference_sql": "SELECT SUM(budget) FROM rural_infrastructure WHERE project_type = 'Agricultural Innovation';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1118,
    "prompt": "How many successful orbital launches did Russia have in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM orbital_launches WHERE country = 'Russia' AND launch_date >= '2021-01-01' AND launch_date < '2021-06-01';",
    "reference_sql": "SELECT COUNT(*) FROM RussianLaunches WHERE launch_date BETWEEN '2021-01-01' AND '2021-12-31' AND launch_result = 'Success';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query restricts to launches before June 2021 and does not filter for successful launches"
    }
  },
  {
    "example_id": 1119,
    "prompt": "What is the average delivery time for satellites by manufacturer, considering only successful launches?",
    "generated_sql": "SELECT manufacturer, AVG(delivery_time) as avg_delivery_time FROM satellite_launch WHERE successful_launch = TRUE GROUP BY manufacturer;",
    "reference_sql": "SELECT manufacturer, AVG(DATEDIFF(launch_date, (SELECT MIN(launch_date) FROM SatelliteLaunch sl2 WHERE sl2.manufacturer = sl.manufacturer AND launch_outcome = 'successful'))) AS avg_delivery_time FROM SatelliteLaunch sl WHERE launch_outcome = 'successful' GROUP BY manufacturer;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1120,
    "prompt": "What is the total cost of aircraft orders for each manufacturer?",
    "generated_sql": "SELECT manufacturer, SUM(quantity) as total_cost FROM Aircraft_Orders GROUP BY manufacturer;",
    "reference_sql": "SELECT manufacturer, SUM(cost) as total_cost FROM aircraft_orders JOIN aircraft ON aircraft_orders.aircraft_id = aircraft.aircraft_id GROUP BY manufacturer;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums quantity instead of the cost column"
    }
  },
  {
    "example_id": 1121,
    "prompt": "How many animals of each type were in rehabilitation centers as of January 1, 2020?",
    "generated_sql": "SELECT type, COUNT(*) FROM animal_rehabilitation WHERE type = 'animal' AND start_date BETWEEN '2020-01-01' AND '2020-01-31' GROUP BY type;",
    "reference_sql": "SELECT animal_type, num_animals FROM AnimalRehabilitation WHERE date = '2020-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters by type='animal' and uses a January date range on start_date instead of counting animals present on 2020-01-01, ignoring end_date coverage."
    }
  },
  {
    "example_id": 1122,
    "prompt": "How many music_concerts were held in Paris and Berlin?",
    "generated_sql": "SELECT COUNT(*) FROM music_concerts WHERE city IN ('Paris', 'Berlin');",
    "reference_sql": "SELECT COUNT(*) FROM music_concerts WHERE concert_location IN ('Paris', 'Berlin');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1123,
    "prompt": "What was the number of attendees for events in the 'Theater' category?",
    "generated_sql": "SELECT SUM(Attendance) FROM Events WHERE Category = 'Theater';",
    "reference_sql": "SELECT SUM(attendee_count) FROM event_attendance JOIN events ON event_attendance.event_id = events.id WHERE events.category = 'Theater';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1124,
    "prompt": "What was the total expenditure by each department in the last fiscal quarter?",
    "generated_sql": "SELECT department, SUM(expenditure) as total_expenditure FROM expenses WHERE date BETWEEN '2022-01-01' AND '2022-07-31' GROUP BY department;",
    "reference_sql": "SELECT ExpenseType, SUM(ExpenseAmount) FROM Expenditures WHERE ExpenseDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND ExpenseDate < LAST_DAY(CURDATE()) GROUP BY ExpenseType;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Date range does not represent the last fiscal quarter and is fixed rather than dynamic"
    }
  },
  {
    "example_id": 1125,
    "prompt": "Insert a new record for 'DrugG' sales in 'Q4 2021' with '7000' units sold.",
    "generated_sql": "INSERT INTO Sales (SalesID, ProductID, ProductName, QuantitySold, SaleDate, SaleType, SellingCountry) VALUES (1, 5, 'DrugG', 7000, DATE_TRUNC('quarter', SUM(QuantitySold)) + 1, 'Q4 2021', 'Q1 2022')",
    "reference_sql": "INSERT INTO sales (drug_name, quarter, year, units_sold) VALUES ('DrugG', 'Q4', 2021, 7000);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM in VALUES and incorrect SaleDate and SellingCountry values"
    }
  },
  {
    "example_id": 1126,
    "prompt": "How many innovations have been made in the African region since 2016?",
    "generated_sql": "SELECT COUNT(*) FROM innovations WHERE region = 'Africa' AND type = 'Innovation' AND year >= 2016;",
    "reference_sql": "SELECT COUNT(*) FROM innovation i INNER JOIN innovation_region ir ON i.id = ir.innovation_id INNER JOIN region r ON ir.region_id = r.id WHERE r.region = 'Africa' AND i.year >= 2016;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "The query filters by type='Innovation', which is not specified and may exclude valid records; only region and year filters are needed."
    }
  },
  {
    "example_id": 1127,
    "prompt": "List funding amounts and corresponding diversity scores for companies founded in 2018",
    "generated_sql": "SELECT company_id, SUM(funding_amount) as total_funding_amount, SUM(diversity_score) as total_diversity_score FROM companies WHERE founding_year = 2018 GROUP BY company_id;",
    "reference_sql": "SELECT companies.name, funds.funding_amount, companies.diversity_score FROM companies INNER JOIN funds ON companies.id = funds.company_id WHERE companies.founding_year = 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary aggregation and GROUP BY; should select individual funding_amount and diversity_score without SUM"
    }
  },
  {
    "example_id": 1128,
    "prompt": "List the diversity metrics for startups founded in '2018'.",
    "generated_sql": "SELECT metric FROM diversity_metrics WHERE company_id = (SELECT company_id FROM companies WHERE company_name = 'Samsung');",
    "reference_sql": "SELECT startup_name, female_founders, underrepresented_teams FROM diversity_metrics WHERE founding_year = 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "The query filters by a specific company name instead of startups founded in 2018."
    }
  },
  {
    "example_id": 1129,
    "prompt": "List all marine protected areas in the Pacific Ocean.",
    "generated_sql": "SELECT * FROM marine_protected_areas WHERE region = 'Pacific Ocean';",
    "reference_sql": "SELECT area_name FROM marine_protected_areas WHERE ocean_basin = 'Pacific Ocean';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1130,
    "prompt": "Delete records in the species table where the common_name is 'White Oak'",
    "generated_sql": "DELETE FROM species WHERE common_name = 'White Oak';",
    "reference_sql": "DELETE FROM species WHERE common_name = 'White Oak';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1131,
    "prompt": "What is the average carbon sequestration rate for forests in tropical regions?",
    "generated_sql": "SELECT AVG(carbon_sequestration) FROM carbon_sequestration WHERE region = 'tropical_regions';",
    "reference_sql": "SELECT AVG(f.carbon_sequestration_rate) FROM forests f WHERE f.region = 'Tropical';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for forest ecosystems"
    }
  },
  {
    "example_id": 1132,
    "prompt": "What is the total area of all wildlife habitats, in hectares, for each type of habitat?",
    "generated_sql": "SELECT habitat_name, SUM(area) FROM wildlife_habitats GROUP BY habitat_name;",
    "reference_sql": "SELECT habitat_type, SUM(area) FROM wildlife_habitat_2 GROUP BY habitat_type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1133,
    "prompt": "List the top 5 countries with the highest average foundation sales revenue in H2 2021.",
    "generated_sql": "SELECT country, AVG(revenue) as avg_revenue FROM foundation_sales WHERE YEAR(sale_date) = 2021 GROUP BY country ORDER BY avg_revenue DESC LIMIT 5;",
    "reference_sql": "SELECT country, AVG(sales_revenue) as avg_rev FROM cosmetics_sales WHERE product_type = 'foundation' AND sales_date BETWEEN '2021-07-01' AND '2021-12-31' GROUP BY country ORDER BY avg_rev DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not restrict to H2 (months 7-12) of 2021"
    }
  },
  {
    "example_id": 1134,
    "prompt": "Insert a new record into the 'FireDepartments' table with the following data: '890', 'Eastside Fire Department', 2000",
    "generated_sql": "INSERT INTO FireDepartments (id, department, location) VALUES (1, 'Eastside Fire Department', 2000);",
    "reference_sql": "INSERT INTO FireDepartments (DepartmentID, DepartmentName, EstablishedYear) VALUES (890, 'Eastside Fire Department', 2000);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses id = 1 instead of 890 and inserts into a 'location' column instead of the correct third column"
    }
  },
  {
    "example_id": 1135,
    "prompt": "What is the maximum number of crimes reported in a single day in 'Harbor' district?",
    "generated_sql": "SELECT MAX(Crimes) FROM CityHistory WHERE District = 'Harbor';",
    "reference_sql": "SELECT MAX(crimes_reported) FROM daily_crimes WHERE district = 'Harbor';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1136,
    "prompt": "Calculate the total ticket revenue for events in the 'events' table.",
    "generated_sql": "SELECT SUM(price) FROM events WHERE event_id NOT IN (SELECT event_id FROM tickets);",
    "reference_sql": "SELECT SUM(ticket_price * attendance) as total_revenue FROM events;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums prices only for events without tickets instead of all ticket revenue"
    }
  },
  {
    "example_id": 1137,
    "prompt": "How many veteran employment applications were submitted in California in 2018?",
    "generated_sql": "SELECT COUNT(*) FROM veteran_adoptions WHERE YEAR(adoption_date) = 2018 AND state = 'California';",
    "reference_sql": "SELECT Applications FROM Veteran_Employment WHERE State = 'California' AND Year = 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses wrong table and column names (veteran_adoptions and adoption_date instead of applications and submission date)"
    }
  },
  {
    "example_id": 1138,
    "prompt": "How many peacekeeping operations were led by the Association of Southeast Asian Nations (ASEAN) in the past decade?",
    "generated_sql": "SELECT SUM(num_operations) FROM peacekeeping_operations WHERE organization IN ('ASEAN') AND year BETWEEN 2015 AND 2020;",
    "reference_sql": "SELECT COUNT(*) FROM asean_operations WHERE operation_start_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR) AND CURRENT_DATE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Time range is incorrect: it uses 2015-2020 instead of covering the past ten years"
    }
  },
  {
    "example_id": 1139,
    "prompt": "What is the maximum number of peacekeeping troops deployed by any country in a single peacekeeping operation?",
    "generated_sql": "SELECT MAX(troops) FROM peacekeeping_operations WHERE country IN ('United States', 'United Kingdom', 'Canada', 'Australia');",
    "reference_sql": "SELECT OperationID, MAX(NumberOfTroops) FROM PeacekeepingTroops GROUP BY OperationID;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query restricts to specific countries instead of all countries"
    }
  },
  {
    "example_id": 1140,
    "prompt": "What is the total number of military innovation projects and military personnel for each country involved in defense diplomacy?",
    "generated_sql": "SELECT country, SUM(num_projects) OVER (PARTITION BY country) AS total_projects, SUM(num_personnel) AS total_personnel FROM MilitaryInnovation;",
    "reference_sql": "SELECT country, SUM(military_personnel) AS total_military_personnel, SUM(project_count) AS total_projects FROM defense_diplomacy GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY for aggregation and inconsistent use of window function for num_projects"
    }
  },
  {
    "example_id": 1141,
    "prompt": "How many high-risk accounts are in the Asia-Pacific region with a balance greater than $100,000?",
    "generated_sql": "SELECT COUNT(*) FROM high_risk_accounts WHERE account_region = 'Asia-Pacific' AND balance > 100000;",
    "reference_sql": "SELECT COUNT(*) FROM accounts WHERE region = 'Asia-Pacific' AND risk_level = 'high' AND balance > 100000.00;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1142,
    "prompt": "List all clients with their age and the total number of investments they made?",
    "generated_sql": "SELECT c.client_id, c.client_name, SUM(i.amount) as total_amount FROM clients c JOIN investments i ON c.client_id = i.client_id WHERE i.investment_amount >= 0 GROUP BY c.client_id, c.client_name;",
    "reference_sql": "SELECT c.age, COUNT(i.investment_type) AS num_investments FROM clients c LEFT JOIN investments i ON c.client_id = i.client_id GROUP BY c.client_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums investment amounts instead of counting investments and omits the client age."
    }
  },
  {
    "example_id": 1143,
    "prompt": "Find the total unloaded cargo weight in the US for each flag.",
    "generated_sql": "SELECT flag_name, SUM(weight) as total_unloaded_weight FROM cargo_weights WHERE country = 'USA' GROUP BY flag_name;",
    "reference_sql": "SELECT vessel_flag, SUM(unloaded_weight) AS total_weight FROM ports WHERE country = 'USA' GROUP BY vessel_flag;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to include only unloaded cargo"
    }
  },
  {
    "example_id": 1144,
    "prompt": "List the ports that have been visited by vessels with a maximum cargo capacity of over 20000 tons in Q4 2020.",
    "generated_sql": "SELECT p.name FROM ports p JOIN vessels v ON p.port_id = v.port_id WHERE v.name = 'Oceania' AND v.capacity > 20000 AND v.location LIKE '%Oceania%' AND v.visit_date BETWEEN '2020-10-01' AND '2020-12-31'",
    "reference_sql": "SELECT DISTINCT port FROM Port_Visits PV JOIN (SELECT vessel, capacity FROM Vessels WHERE capacity > 20000) V ON PV.vessel = V.vessel WHERE MONTH(time) BETWEEN 10 AND 12 AND YEAR(time) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters on specific vessel name and location incorrectly and does not use a visits table to list all ports visited by vessels with capacity over 20000 in the specified period."
    }
  },
  {
    "example_id": 1145,
    "prompt": "What is the total production output of factories in each country?",
    "generated_sql": "SELECT country, SUM(co2_production) FROM factories GROUP BY country;",
    "reference_sql": "SELECT country, SUM(production_output) FROM factories GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums co2_production instead of the factories' production output"
    }
  },
  {
    "example_id": 1146,
    "prompt": "Determine the percentage change in national security budgets for the last 3 years, per region.",
    "generated_sql": "SELECT region, region_name, (SUM(budget) - budget) * 100 as percentage_change FROM budget_stats WHERE year BETWEEN 2018 AND 2021 GROUP BY region, region_name;",
    "reference_sql": "SELECT budget_year, region_id, budget_amount, (budget_amount - LAG(budget_amount, 1) OVER (PARTITION BY region_id ORDER BY budget_year)) * 100.0 / LAG(budget_amount, 1) OVER (PARTITION BY region_id ORDER BY budget_year) as percentage_change FROM budgets WHERE budget_year >= YEAR(CURRENT_DATE) - 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly aggregates budgets, does not calculate percentage change (missing division by initial value), misuses SUM and budget, and uses wrong year range."
    }
  },
  {
    "example_id": 1147,
    "prompt": "List all cybersecurity incidents and their respective severity levels in the Asia-Pacific region since 2020.",
    "generated_sql": "SELECT SUM(severity) FROM cybersecurity_incidents WHERE region = 'Asia-Pacific' AND year >= 2020;",
    "reference_sql": "SELECT incident_name, severity FROM cybersecurity_incidents WHERE date >= '2020-01-01' AND location LIKE '%Asia-Pacific%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query aggregates severity instead of listing each incident and its severity"
    }
  },
  {
    "example_id": 1148,
    "prompt": "Show all cybersecurity strategies along with their respective authors.",
    "generated_sql": "SELECT name, author FROM cybersecurity_strategies;",
    "reference_sql": "SELECT strategy, author FROM cybersecurity_strategies;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1149,
    "prompt": "What are the types and severities of cybersecurity incidents that occurred before '2021-03-01'?",
    "generated_sql": "SELECT incident_type, severity FROM cybersecurity_incidents WHERE date < '2021-03-01';",
    "reference_sql": "SELECT incident_type, incident_severity FROM Cyber_Incidents WHERE incident_date < '2021-03-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1150,
    "prompt": "What is the total number of military bases and their types in the Asia-Pacific region?",
    "generated_sql": "SELECT SUM(type) FROM military_bases WHERE region = 'Asia-Pacific';",
    "reference_sql": "SELECT COUNT(*), type FROM military_bases WHERE region = 'Asia-Pacific' GROUP BY type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(type) instead of counting bases and does not group by type"
    }
  },
  {
    "example_id": 1151,
    "prompt": "Which artists have the most followers on Instagram, by genre?",
    "generated_sql": "SELECT artist_name, COUNT(followers) as followers FROM artists JOIN streams ON artists.artist_id = streams.artist_id JOIN users ON streams.user_id = users.user_id WHERE users.name = 'Kendrick Lamar' GROUP BY artist_name, genre;",
    "reference_sql": "SELECT g.genre, a.artist, f.total_followers FROM artists a JOIN genres g ON a.genre = g.genre JOIN followers_view f ON a.artist_id = f.artist_id ORDER BY total_followers DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query filters by a specific user and counts streams instead of retrieving Instagram follower counts by genre"
    }
  },
  {
    "example_id": 1152,
    "prompt": "How many games did each NBA team play in the 2021-2022 season?",
    "generated_sql": "SELECT teams.team_name, COUNT(games.game_id) FROM teams INNER JOIN games ON teams.team_id = games.team_id WHERE YEAR(games.game_date) = 2021 AND YEAR(games.game_date) = 2022 GROUP BY teams.team_name;",
    "reference_sql": "SELECT team, COUNT(*) as games FROM nba_schedule GROUP BY team;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause YEAR(game_date) = 2021 AND YEAR(game_date) = 2022 is always false, so it returns no games. Use correct season filtering."
    }
  },
  {
    "example_id": 1153,
    "prompt": "Update the names of athletes whose names start with 'J' to 'X'",
    "generated_sql": "UPDATE athletes SET name = 'X', sport = 'Jockey' WHERE sport LIKE 'Jockey%';",
    "reference_sql": "UPDATE athletes SET name = REPLACE(name, 'J', 'X') WHERE name LIKE 'J%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses sport column in WHERE and updates sport instead of updating name for names starting with 'J'"
    }
  },
  {
    "example_id": 1154,
    "prompt": "What is the total number of penalties awarded to football team 306?",
    "generated_sql": "SELECT COUNT(*) FROM penalties WHERE team_id = (SELECT team_id FROM team WHERE team_name = 'Fantasia Football');",
    "reference_sql": "SELECT SUM(penalties) FROM penalties WHERE team_id = 306;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by team_name 'Fantasia Football' instead of using team_id = 306"
    }
  },
  {
    "example_id": 1155,
    "prompt": "Identify all the unique beneficiaries in Nepal who received support from the 'education' sector in 2021, the number of times they received support, and the total amount donated to each.",
    "generated_sql": "SELECT DISTINCT beneficiary_id, SUM(amount) as total_donation_amount FROM (SELECT beneficiary_id, SUM(amount) as total_donation_amount FROM support WHERE country = 'Nepal' AND sector = 'Education' AND year = 2021) o3 WHERE o3.country = 'Nepal' AND o3.year = 2021 GROUP BY beneficiary_id;",
    "reference_sql": "SELECT beneficiaries.name, COUNT(support.id), SUM(support.amount) FROM beneficiaries INNER JOIN support ON beneficiaries.id = support.beneficiary_id WHERE beneficiaries.country = 'Nepal' AND support.sector = 'education' AND support.support_date = 2021 GROUP BY beneficiaries.id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query incorrectly aggregates without GROUP BY beneficiary_id, omits count of support occurrences, and misuses subquery filters"
    }
  },
  {
    "example_id": 1156,
    "prompt": "What is the average production cost of garments made from organic cotton, per country?",
    "generated_sql": "SELECT country, AVG(cost) AS avg_cost FROM garments_organic WHERE organic = TRUE GROUP BY country;",
    "reference_sql": "SELECT country, AVG(production_cost) as avg_cost FROM OrganicCottonGarments GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1157,
    "prompt": "What is the total CO2 emissions of silk production in China?",
    "generated_sql": "SELECT SUM(co2_emissions) FROM silk_production WHERE country = 'China';",
    "reference_sql": "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1158,
    "prompt": "Find the top 5 most active users in 'user_behavior' table in the last month?",
    "generated_sql": "SELECT user_id, MONTH(start_date) as month, COUNT(*) as count FROM user_behavior WHERE MONTH(start_date) = (SELECT MAX(MONTH) FROM user_behavior) GROUP BY user_id ORDER BY count DESC LIMIT 5;",
    "reference_sql": "SELECT user_id, SUM(posts_per_day) FROM user_behavior WHERE post_date >= CURDATE() - INTERVAL 1 MONTH GROUP BY user_id ORDER BY SUM(posts_per_day) DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering by MAX(MONTH) ignores year and does not ensure last calendar month relative to current date"
    }
  },
  {
    "example_id": 1159,
    "prompt": "Update the \"status\" column to 'active' for all users with more than 1000 followers in the \"users\" table",
    "generated_sql": "UPDATE users SET status = 'active' WHERE followers > 1000;",
    "reference_sql": "UPDATE users SET status = 'active' WHERE followers > 1000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1160,
    "prompt": "What is the total revenue generated from ads on Instagram in March 2021, for users in the 'brand' category who have posted more than 10 times?",
    "generated_sql": "SELECT SUM(ad_revenue) FROM ads WHERE category = 'brand' AND date BETWEEN '2021-03-01' AND '2021-03-31';",
    "reference_sql": "SELECT SUM(ad_revenue) FROM ads WHERE platform = 'Instagram' AND MONTH(ad_date) = 3 AND YEAR(ad_date) = 2021 AND user_id IN (SELECT user_id FROM users WHERE category = 'brand' AND post_count > 10);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filters for Instagram platform and users who have posted more than 10 times"
    }
  },
  {
    "example_id": 1161,
    "prompt": "How many socially responsible loans were issued to customers in the South?",
    "generated_sql": "SELECT SUM(loan_amount) FROM socially_responsible_loans WHERE region = 'South';",
    "reference_sql": "SELECT COUNT(*) FROM loans WHERE is_socially_responsible = true AND region = 'South';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums loan amounts instead of counting the number of loans"
    }
  },
  {
    "example_id": 1162,
    "prompt": "What is the maximum socially responsible loan amount?",
    "generated_sql": "SELECT MAX(Amount) FROM SocialResponses;",
    "reference_sql": "SELECT MAX(loans.amount) as max_loan_amount FROM loans WHERE loans.is_socially_responsible = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to only include socially responsible loans"
    }
  },
  {
    "example_id": 1163,
    "prompt": "What was the total amount of Shariah-compliant finance loans issued to micro businesses in 2021?",
    "generated_sql": "SELECT SUM(amount) FROM shariah_compliant_loans WHERE type = 'Micro Business' AND issue_year = 2021;",
    "reference_sql": "SELECT SUM(loan_amount) FROM shariah_compliant_finance WHERE borrower_type = 'Micro Business' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1164,
    "prompt": "What is the monthly donation trend for the last 12 months?",
    "generated_sql": "SELECT DATE_FORMAT(date, '%Y-%m') as month, COUNT(*) as total_donations FROM donation_transactions WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY month;",
    "reference_sql": "SELECT EXTRACT(MONTH FROM DonationDate) as Month, ROUND(AVG(DonationAmount), 2) as AvgDonation FROM Donations WHERE DonationDate >= DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND DonationDate < DATE_TRUNC('year', CURRENT_DATE) GROUP BY Month ORDER BY Month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts transactions instead of summing donation amounts and uses inconsistent column names (date vs transaction_date)"
    }
  },
  {
    "example_id": 1165,
    "prompt": "What was the total amount donated by individuals in the United States in Q1 2021?",
    "generated_sql": "SELECT SUM(donation_amount) FROM donors WHERE country = 'USA' AND donation_date BETWEEN '2021-01-01' AND '2021-03-31';",
    "reference_sql": "SELECT SUM(donation_amount) FROM donations WHERE donation_date BETWEEN '2021-01-01' AND '2021-03-31' AND donor_id IN (SELECT donor_id FROM donors WHERE country = 'United States');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for individual donors, only filters by country and date"
    }
  },
  {
    "example_id": 1166,
    "prompt": "List all warehouse locations and their corresponding total inventory value.",
    "generated_sql": "SELECT warehouse_id, SUM(inventory_value) AS total_inventory FROM warehouses GROUP BY warehouse_id;",
    "reference_sql": "SELECT location, total_inventory FROM warehouse;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing warehouse location and does not join inventory table to sum values correctly"
    }
  },
  {
    "example_id": 1167,
    "prompt": "What is the total quantity of items in the 'inventory' table?",
    "generated_sql": "SELECT SUM(quantity) FROM inventory;",
    "reference_sql": "SELECT SUM(quantity) FROM inventory;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1168,
    "prompt": "List biotech startups founded before 2010.",
    "generated_sql": "SELECT name FROM biotech_startups WHERE start_date < '2010-01-01';",
    "reference_sql": "SELECT name FROM startups WHERE industry = 'biotech' AND founding_date < '2010-01-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1169,
    "prompt": "What is the total funding amount for all biotech startups?",
    "generated_sql": "SELECT SUM(funding.amount) FROM funding INNER JOIN startups ON funding.startup_id = startups.id WHERE startups.industry = 'Biotech';",
    "reference_sql": "SELECT SUM(funding_amount) FROM biotech_startups;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1170,
    "prompt": "What is the total number of public transportation projects and their total budget for projects located in 'Rural' area, grouped by transportation type?",
    "generated_sql": "SELECT project_type, SUM(budget) FROM public_transportation WHERE location = 'Rural' GROUP BY project_type;",
    "reference_sql": "SELECT transportation_type, COUNT(*) AS total_projects, SUM(budget) AS total_budget FROM projects WHERE area = 'Rural' GROUP BY transportation_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing COUNT of projects"
    }
  },
  {
    "example_id": 1171,
    "prompt": "List Smart City initiatives and their corresponding countries.",
    "generated_sql": "SELECT initiative_name, country FROM smart_cities;",
    "reference_sql": "SELECT SmartCities.initiative, Countries.name FROM SmartCities INNER JOIN Countries ON SmartCities.country_id = Countries.id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1172,
    "prompt": "List all renewable energy infrastructure projects in the African region and their respective costs.",
    "generated_sql": "SELECT project_name, AVG(cost) as avg_cost FROM renewable_energy_projects WHERE region = 'Africa' GROUP BY project_name;",
    "reference_sql": "SELECT project_name, cost FROM renewable_energy_infrastructure WHERE region = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses AVG(cost) aggregation instead of listing each project\u2019s actual cost"
    }
  },
  {
    "example_id": 1173,
    "prompt": "What is the total number of Green buildings in India certified by GRIHA?",
    "generated_sql": "SELECT COUNT(*) FROM GreenBuildings WHERE certification = 'Green' AND country = 'India';",
    "reference_sql": "SELECT COUNT(*) FROM green_buildings WHERE certifier = 'GRIHA' AND country = 'India';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters certification incorrectly; should filter for 'GRIHA' certification rather than 'Green'"
    }
  },
  {
    "example_id": 1174,
    "prompt": "Add a new sustainable practice to 'sustainable_practices' table",
    "generated_sql": "INSERT INTO sustainable_practices (practice_name, sustainable_practice_type, sustainable_practices_count) VALUES ('organic_drinking_water','sustainable_practices.drinking_water.drinking_water_type', 50000000);",
    "reference_sql": "INSERT INTO sustainable_practices (id, name, description) VALUES (1, 'Refillable Water Bottles', 'Promote reusable water bottles to reduce plastic waste.');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect practice type value: inserted a column name reference instead of a valid type"
    }
  },
  {
    "example_id": 1175,
    "prompt": "What is the average number of eco-friendly tours offered per hotel in Paris?",
    "generated_sql": "SELECT AVG(tour_count) FROM eco_tour_statistics JOIN hotels ON eco_tour_statistics.hotel_id = hotels.id WHERE hotels.city = 'Paris';",
    "reference_sql": "SELECT AVG(t.eco_friendly) FROM tours t JOIN hotels h ON t.hotel_id = h.id WHERE h.city = 'Paris' AND t.eco_friendly = true;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1176,
    "prompt": "What is the percentage of revenue generated from sustainable tourism in Europe?",
    "generated_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM tourism_sustainable_sales)) FROM tourism_sustainable_sales WHERE destination = 'Europe';",
    "reference_sql": "SELECT 100.0 * SUM(CASE WHEN revenue_type = 'Sustainable Tourism' THEN amount ELSE 0 END) / SUM(amount) as percentage FROM tourism_revenue WHERE region = 'Europe';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT instead of summing revenue and compares sustainable Europe sales count to sustainable global count rather than revenue proportions"
    }
  },
  {
    "example_id": 1177,
    "prompt": "Which sites in New York City, USA have more than 100000 annual visitors and what are their preferred languages?",
    "generated_sql": "SELECT * FROM visit_sites WHERE city = 'New York City' AND visitor_count > 100000 AND language_list = 'Latin' OR language_list = 'Chinese' OR language_list = 'Spanish';",
    "reference_sql": "SELECT c.name, COUNT(u.id) as annual_visitors, p.preferred_language FROM Cultural_Heritage_Sites c JOIN User_Preferences p ON c.id = p.user_id GROUP BY c.name HAVING annual_visitors > 100000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters specific languages and lacks parentheses, causing unintended OR logic and excluding other preferred languages."
    }
  },
  {
    "example_id": 1178,
    "prompt": "List the booking dates and hotel names for all OTA bookings where the hotel has implemented at least one AI-powered solution.",
    "generated_sql": "SELECT hotel_id, booking_date FROM ota_bookings WHERE ai_powered = TRUE;",
    "reference_sql": "SELECT otas.booking_date, hotels.hotel_name FROM otas INNER JOIN hotels ON otas.hotel_id = hotels.hotel_id INNER JOIN ai_solutions ON hotels.hotel_id = ai_solutions.hotel_id GROUP BY otas.booking_date, hotels.hotel_name HAVING COUNT(DISTINCT ai_solutions.solution_id) >= 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query selects hotel_id instead of hotel_name and lacks a join to retrieve the hotel name"
    }
  },
  {
    "example_id": 1179,
    "prompt": "Display the names and founding years of art galleries established after 1950 that have hosted exhibitions featuring artists from Africa or the African Diaspora.",
    "generated_sql": "SELECT gallery_name, founding_year FROM gallery_founding WHERE gallery_name LIKE 'ArtGalleries%' AND gallery_founding_year > 1950 AND gallery_founding_year < 2010;",
    "reference_sql": "SELECT ag.name, ag.founding_year FROM art_galleries ag INNER JOIN exhibitions e ON ag.name = e.gallery_name WHERE ag.founding_year > 1950 AND (e.artist_name LIKE 'African%' OR e.artist_name LIKE 'Diaspora%');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not join with exhibitions or artists tables and lacks filter for exhibitions featuring artists from Africa or the African Diaspora."
    }
  },
  {
    "example_id": 1180,
    "prompt": "What are the names and languages of the heritages sites located in Africa?",
    "generated_sql": "SELECT name, language FROM heritages WHERE country = 'Africa';",
    "reference_sql": "SELECT H.name, L.language FROM Heritages H INNER JOIN Languages L ON H.id = L.site_id WHERE H.location = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on country = 'Africa' is incorrect since Africa is a continent, not a country; should filter by continent."
    }
  },
  {
    "example_id": 1181,
    "prompt": "What is the average age of patients who received therapy in the state of California?",
    "generated_sql": "SELECT AVG(age) FROM patients WHERE state = 'California' AND therapy = TRUE;",
    "reference_sql": "SELECT AVG(age) FROM patients WHERE state = 'California' AND therapy_type IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1182,
    "prompt": "What is the maximum water depth for dams in Australia?",
    "generated_sql": "SELECT MAX(water_depth) FROM dams WHERE location = 'Australia';",
    "reference_sql": "SELECT MAX(max_depth) FROM Dam WHERE location LIKE '%Australia%' AND type = 'Dam';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1183,
    "prompt": "Find the average visitor count for natural attractions in Antarctica.",
    "generated_sql": "SELECT AVG(visitors) FROM attractions WHERE location = 'Antarctica';",
    "reference_sql": "SELECT AVG(visitors) FROM antarctica_attractions;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for natural attractions"
    }
  },
  {
    "example_id": 1184,
    "prompt": "What is the success rate of alternative dispute resolution methods, by type and resolution method?",
    "generated_sql": "SELECT method, type, success_rate FROM dispute_resolution_methods;",
    "reference_sql": "SELECT disputes.type, disputes.resolution_method, AVG(disputes.success) as success_rate FROM disputes GROUP BY disputes.type, disputes.resolution_method;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1185,
    "prompt": "Delete all invasive species records from the year 2020 in the 'MarineLife' table",
    "generated_sql": "DELETE FROM MarineLife WHERE Year = 2020;",
    "reference_sql": "DELETE FROM MarineLife WHERE species = 'Lionfish' AND YEAR(last_sighting) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query deletes all 2020 records but does not restrict to invasive species."
    }
  },
  {
    "example_id": 1186,
    "prompt": "Which countries have the highest and lowest media representation scores in South America?",
    "generated_sql": "SELECT country, media_representation_score FROM media_representation WHERE country IN ('Brazil', 'Argentina', 'Colombia', 'Peru', 'Venezuela', 'Suriname') GROUP BY country ORDER BY media_representation_score DESC LIMIT 1;",
    "reference_sql": "SELECT country, score FROM media_representation WHERE region = 'South America' ORDER BY score DESC LIMIT 1; SELECT country, score FROM media_representation WHERE region = 'South America' ORDER BY score ASC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only returns the highest score for a subset of countries and does not return the lowest score"
    }
  },
  {
    "example_id": 1187,
    "prompt": "Who are the top 3 authors with the highest number of articles published in The Guardian?",
    "generated_sql": "SELECT author, COUNT(*) as articles_per_year FROM author_articles WHERE publication_date >= '2019-01-01' AND publication_date < '2022-01-01' GROUP BY author ORDER BY articles_per_year DESC LIMIT 3;",
    "reference_sql": "SELECT a.name, COUNT(aa.article_id) AS articles_count FROM authors a JOIN articles_authors aa ON a.id = aa.author_id JOIN articles ar ON aa.article_id = ar.id WHERE ar.publisher = 'The Guardian' GROUP BY a.name ORDER BY articles_count DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by a specific date range and does not filter for articles in The Guardian"
    }
  },
  {
    "example_id": 1188,
    "prompt": "What is the maximum number of servings of any vegetarian side dish?",
    "generated_sql": "SELECT MAX(num_servings) FROM food_sales WHERE is_vegetarian = true;",
    "reference_sql": "SELECT MAX(max_servings) FROM side_dishes WHERE is_vegetarian = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not restrict to side dishes (missing dish type filter)"
    }
  },
  {
    "example_id": 1189,
    "prompt": "What's the percentage of coal resources depleted in each mine?",
    "generated_sql": "SELECT mine_id, COUNT(resource_id) * 100.0 / SUM(resource_count) AS depletion_percentage FROM coal_depletion_data GROUP BY mine_id;",
    "reference_sql": "SELECT name, (depleted_resources * 100.0 / total_resources) AS percentage_depleted FROM mines WHERE resource = 'Coal';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts resource_id instead of summing depleted amounts and incorrectly uses SUM(resource_count) for total resource amount"
    }
  },
  {
    "example_id": 1190,
    "prompt": "How many donations were made in each city?",
    "generated_sql": "SELECT city, COUNT(*) FROM Donations GROUP BY city;",
    "reference_sql": "SELECT city, COUNT(*) as total_donations FROM donations_2 GROUP BY city;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1191,
    "prompt": "Update the game genre of a specific game to 'Action RPG' in the GameGenres table.",
    "generated_sql": "UPDATE GameGenres SET GameGenre = 'Action RPG' WHERE GameName = 'Batman: The Animated Series';",
    "reference_sql": "UPDATE GameGenres SET Genre = 'Action RPG' WHERE GameID = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query hard-codes a specific game name not provided in the request."
    }
  },
  {
    "example_id": 1192,
    "prompt": "What is the average age of female players?",
    "generated_sql": "SELECT AVG(age) FROM Players WHERE gender = 'Female';",
    "reference_sql": "SELECT AVG(Age) FROM Players WHERE Gender = 'Female';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1193,
    "prompt": "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?",
    "generated_sql": "SELECT AVG(player_preferences.age) FROM player_preferences INNER JOIN player_demographics ON player_preferences.player_id = player_demographics.player_id WHERE player_preferences.genre = 'FPS';",
    "reference_sql": "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Selecting age from player_preferences instead of player_demographics"
    }
  },
  {
    "example_id": 1194,
    "prompt": "What is the average humidity in New York in the past week?",
    "generated_sql": "SELECT AVG(humidity) FROM humidity WHERE city = 'New York' AND date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) AND CURRENT_DATE;",
    "reference_sql": "SELECT AVG(humidity) FROM Weather WHERE location = 'New York' AND timestamp > NOW() - INTERVAL '1 week';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1195,
    "prompt": "How many traffic violations were recorded in the year 2019 for both cities 'San Francisco' and 'Los Angeles'?",
    "generated_sql": "SELECT COUNT(*) FROM traffic_violations WHERE city IN ('San Francisco', 'Los Angeles') AND year = 2019;",
    "reference_sql": "SELECT COUNT(*) FROM traffic_violations WHERE city IN ('San Francisco', 'Los Angeles') AND year = 2019;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1196,
    "prompt": "What was the minimum citizen feedback score for waste management services in the capital city in 2021?",
    "generated_sql": "SELECT MIN(val) FROM citizens WHERE city = 'capital' AND state = 'capital' AND service IN ('collection','recycling');",
    "reference_sql": "SELECT MIN(score) FROM Feedback WHERE year = 2021 AND city = 'Capital' AND service = 'Waste Management';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for year = 2021"
    }
  },
  {
    "example_id": 1197,
    "prompt": "Delete all records of Lutetium production in 2015 by companies located in the Asia-Pacific region.",
    "generated_sql": "DELETE FROM Lutetium_Production WHERE Country = 'Asia-Pacific' AND Year = 2015;",
    "reference_sql": "DELETE FROM Producers WHERE RareEarth = 'Lutetium' AND ProductionYear = 2015 AND Location LIKE '%Asia-Pacific%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering Country = 'Asia-Pacific' is incorrect; you need to identify companies by their region (Asia-Pacific) and join or filter on company location, not use Country = 'Asia-Pacific'"
    }
  },
  {
    "example_id": 1198,
    "prompt": "What is the minimum price of Holmium in Asia?",
    "generated_sql": "SELECT MIN(price) FROM products WHERE element = 'Holmium' AND region = 'Asia';",
    "reference_sql": "SELECT MIN(price) FROM holmium_prices WHERE region = 'China' OR region = 'Japan' OR region = 'India';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1199,
    "prompt": "What is the average monthly rent for wheelchair-accessible units across all areas?",
    "generated_sql": "SELECT AVG(rent) FROM rent_units WHERE accessibility = true;",
    "reference_sql": "SELECT AVG(monthly_rent) FROM area_units WHERE wheelchair_accessible = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1200,
    "prompt": "What is the maximum energy efficiency rating for appliances in the United Kingdom?",
    "generated_sql": "SELECT MAX(rating) FROM energy_efficiency WHERE country = 'United Kingdom';",
    "reference_sql": "SELECT MAX(energy_efficiency_rating) FROM uk_appliances WHERE country = 'United Kingdom';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1201,
    "prompt": "What is the maximum energy efficiency rating of hydroelectric dams in Canada?",
    "generated_sql": "SELECT MAX(energy_efficiency_rating) FROM hydroelectric_dams WHERE country = 'Canada';",
    "reference_sql": "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1202,
    "prompt": "How many vegan menu items are available at each restaurant?",
    "generated_sql": "SELECT restaurant_name, COUNT(CASE WHEN vegan THEN 1 END) as vegan_items FROM menu_items GROUP BY restaurant_name;",
    "reference_sql": "SELECT category, COUNT(*) as count FROM menu_items WHERE vegan = true GROUP BY category;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1203,
    "prompt": "What is the average revenue for menu items in the 'Desserts' category?",
    "generated_sql": "SELECT AVG(revenue) FROM MenuItems WHERE category = 'Desserts';",
    "reference_sql": "SELECT AVG(revenue) as avg_revenue FROM menu_items WHERE category = 'Desserts';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1204,
    "prompt": "Identify the top 3 countries with the most satellites in orbit.",
    "generated_sql": "SELECT country, SUM(satellites) as total_satellites FROM satellites GROUP BY country ORDER BY total_satellites DESC LIMIT 3;",
    "reference_sql": "SELECT country, COUNT(*) as satellite_count FROM satellites_in_orbit GROUP BY country ORDER BY satellite_count DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(satellites) instead of COUNT(*) to count satellites per country"
    }
  },
  {
    "example_id": 1205,
    "prompt": "Insert a new record of a vulnerability assessment for a medical device with ID 5, last assessment date of 2022-01-25, and severity score of 7.",
    "generated_sql": "INSERT INTO medical_devices (device_id, last_assessment_date, severity_score) VALUES (5, '2022-01-25', 7), (5, '2022-01-25', 7), (5, '2022-01-25', 6), (5, '2022-01-25', 7);",
    "reference_sql": "INSERT INTO medical_devices_v2 (id, name, last_assessment_date, severity_score) VALUES (5, 'Medical Device 5', '2022-01-25', 7);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserts multiple records including one with severity 6 instead of a single record with severity 7"
    }
  },
  {
    "example_id": 1206,
    "prompt": "List all autonomous taxis and their makes, grouped by city, in the 'taxis' table.",
    "generated_sql": "SELECT taxi_name, makes FROM taxi_tours WHERE city = 'London';",
    "reference_sql": "SELECT city, make FROM taxis WHERE autonomous = TRUE GROUP BY city;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses the wrong table, filters only London, and does not filter autonomous taxis or group by city"
    }
  },
  {
    "example_id": 1207,
    "prompt": "What is the average speed of public buses in Sydney?",
    "generated_sql": "SELECT AVG(Speed) FROM PublicBuses WHERE City = 'Sydney';",
    "reference_sql": "SELECT AVG(speed)  FROM sydney_buses WHERE route_id IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1208,
    "prompt": "What is the total retail value of the \"Winter 2022\" collection for each manufacturer?",
    "generated_sql": "SELECT Manufacturers.name, SUM(RetailValue.value) as TotalRetailValue FROM Manufacturers JOIN RetailValue ON Manufacturers.id = RetailValue.manufacturer_id WHERE Manufacturers.name = 'Tesla' AND RetailValue.year = 2022 GROUP BY Manufacturers.name;",
    "reference_sql": "SELECT m.manufacturer_name, SUM(w.retail_price) FROM Winter2022 w INNER JOIN Manufacturers m ON w.manufacturer_id = m.manufacturer_id GROUP BY m.manufacturer_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only Tesla and by year, missing filter for the Winter collection and excluding other manufacturers"
    }
  },
  {
    "example_id": 1209,
    "prompt": "Find the average age of policyholders in Texas.",
    "generated_sql": "SELECT AVG(age) FROM policyholders WHERE state = 'Texas';",
    "reference_sql": "SELECT AVG(age) FROM policyholders WHERE state = 'Texas';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1210,
    "prompt": "What is the average car manufacturing year for policy number 1003?",
    "generated_sql": "SELECT AVG(car_manufacturing_year) FROM policy_number WHERE policy_number = '1003';",
    "reference_sql": "SELECT AVG(car_manufacture_year) FROM policies WHERE policy_id = 1003;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses policy_number as table instead of the table containing car_manufacturing_year data"
    }
  },
  {
    "example_id": 1211,
    "prompt": "What is the average number of members in unions in the USA and UK?",
    "generated_sql": "SELECT AVG(Members) FROM Union WHERE Location IN ('USA', 'UK');",
    "reference_sql": "SELECT AVG(member_count) as avg_members FROM UnionMembers WHERE country IN ('USA', 'UK');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns a single combined average instead of separate averages for USA and UK; missing GROUP BY Location"
    }
  },
  {
    "example_id": 1212,
    "prompt": "List the unique types of waste generated in each area.",
    "generated_sql": "SELECT AreaName, WasteTypeName FROM WasteGeneration;",
    "reference_sql": "SELECT area, waste_type FROM WasteTypes GROUP BY area, waste_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not use DISTINCT to ensure unique waste types per area"
    }
  },
  {
    "example_id": 1213,
    "prompt": "What is the average recycling rate for the world for the year 2018?",
    "generated_sql": "SELECT AVG(recycling_rate) FROM recycling_rates WHERE year = 2018;",
    "reference_sql": "SELECT AVG(recycling_rate) FROM recycling_rates WHERE year = 2018;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1214,
    "prompt": "List all the unique workout types in the Workout table.",
    "generated_sql": "SELECT DISTINCT type FROM Workout;",
    "reference_sql": "SELECT DISTINCT WorkoutType FROM Workout;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1215,
    "prompt": "How many creative AI applications have been developed for each industry?",
    "generated_sql": "SELECT industry, COUNT(*) FROM ai_applications GROUP BY industry;",
    "reference_sql": "SELECT industry, application_count FROM creative_ai_applications;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to include only creative AI applications"
    }
  },
  {
    "example_id": 1216,
    "prompt": "Update the name of the project to 'Wind Power' in the 'rural_energy' table",
    "generated_sql": "UPDATE rural_energy SET name = 'Wind Power' WHERE name = 'Wind Power';",
    "reference_sql": "UPDATE rural_energy SET project_name = 'Wind Power' WHERE id = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause matches name='Wind Power', so it updates no rows and does not change the project name."
    }
  },
  {
    "example_id": 1217,
    "prompt": "What is the number of community development initiatives in Kenya?",
    "generated_sql": "SELECT COUNT(*) FROM community_development WHERE country = 'Kenya';",
    "reference_sql": "SELECT COUNT(*) FROM community_development_initiatives WHERE country = 'Kenya';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1218,
    "prompt": "What is the earliest and latest date of successful satellite deployments by 'India'?",
    "generated_sql": "SELECT * FROM satellites WHERE country = 'India' AND success_date <= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
    "reference_sql": "SELECT country, MIN(deployment_date) AS earliest_deployment, MAX(deployment_date) AS latest_deployment FROM SatelliteDeployments WHERE country = 'India' AND deployment_status = 'successful' GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by dates older than one year and does not compute earliest or latest dates."
    }
  },
  {
    "example_id": 1219,
    "prompt": "Add a new endangered animal 'Amur Leopard' to 'Conservation Area Z'",
    "generated_sql": "INSERT INTO ConservationArea (name, animal_name) VALUES ('Conservation Area Z', 'Amur Leopard');",
    "reference_sql": "INSERT INTO AnimalPopulation (AnimalID, AnimalName, HabitatID, Status) VALUES (3, 'Amur Leopard', 1, 'Endangered');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserts into the wrong table and does not handle the animal\u2013area relationship or endangered status"
    }
  },
  {
    "example_id": 1220,
    "prompt": "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.",
    "generated_sql": "SELECT vendor_id, AVG(price) AS avg_price FROM sales JOIN vendors ON sales.vendor_id = vendors.id WHERE vendors.name = 'Salmon' GROUP BY vendor_id ORDER BY avg_price DESC LIMIT 1;",
    "reference_sql": "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on vendors.name = 'Salmon' instead of filtering the product name in the sales table"
    }
  },
  {
    "example_id": 1221,
    "prompt": "What is the average attendance at visual art events in Paris and Rome?",
    "generated_sql": "SELECT AVG(attendance) FROM visual_art_events WHERE city IN ('Paris', 'Rome');",
    "reference_sql": "SELECT AVG(attendees) FROM Events WHERE city IN ('Paris', 'Rome') AND event_name LIKE '%Art%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not group by city to provide separate averages for Paris and Rome"
    }
  },
  {
    "example_id": 1222,
    "prompt": "What is the average time to complete a construction project?",
    "generated_sql": "SELECT AVG(TimeToComplete) FROM Projects;",
    "reference_sql": "SELECT AVG(DATEDIFF('day', start_date, end_date)) FROM project_timeline;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to include only construction projects"
    }
  },
  {
    "example_id": 1223,
    "prompt": "How many licenses were issued in each state as of 2022-01-01?",
    "generated_sql": "SELECT state, COUNT(*) FROM licenses WHERE YEAR(issued_date) = YEAR(CURDATE()) - 1 GROUP BY state;",
    "reference_sql": "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by the previous calendar year using CURDATE() instead of counting licenses issued on or before the fixed date '2022-01-01'."
    }
  },
  {
    "example_id": 1224,
    "prompt": "What is the total billing amount for cases handled by attorneys from Texas?",
    "generated_sql": "SELECT SUM(amount) FROM billing_records WHERE attorney_state = 'TX';",
    "reference_sql": "SELECT SUM(BillingAmount) FROM AttorneyBilling JOIN AttorneyLocation ON AttorneyBilling.AttorneyID = AttorneyLocation.AttorneyID WHERE Location = 'Texas';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1225,
    "prompt": "Delete the data for crop A in region X in all months.",
    "generated_sql": "DELETE FROM data WHERE crop = 'Crop A' AND region = 'Region X' AND date BETWEEN '2022-01-01' AND '2022-06-30';",
    "reference_sql": "DELETE FROM WeatherData WHERE region = 'X' AND crop = 'A';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query limits deletion to a specific date range; it should delete all months for crop A in region X without date filtering."
    }
  },
  {
    "example_id": 1226,
    "prompt": "Find total cost of accommodations for students with a specific accommodation.",
    "generated_sql": "SELECT SUM(cost) FROM Accommodations WHERE accommodation_id = (SELECT id FROM Accommodations WHERE accommodation_name = 'Classroom Accessories') GROUP BY accommodation_id;",
    "reference_sql": "SELECT a.accommodation_type, SUM(a.cost) as total_cost FROM Accommodations a JOIN Students s ON a.student_id = s.id WHERE s.name = 'John Doe' GROUP BY a.accommodation_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses same table for filtering and summing without joining student accommodations and may return incorrect result"
    }
  },
  {
    "example_id": 1227,
    "prompt": "What is the number of students who received accommodations by graduation year and gender?",
    "generated_sql": "SELECT SUM(students.graduation_year) AS total_students, (SELECT SUM(students.graduation_year) FROM students WHERE students.genderelement = students.graduation_year) AS total_students_by_graduation_year FROM students JOIN accommodations ON students.student_id = accommodations.student_id GROUP BY students.graduation_year, students.gender;",
    "reference_sql": "SELECT GraduationYear, Gender, COUNT(*) as Total FROM Accommodations JOIN Students ON Accommodations.StudentID = Students.StudentID GROUP BY GraduationYear, Gender;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(graduation_year) instead of counting students and includes an incorrect subquery unrelated to grouping by gender and year"
    }
  },
  {
    "example_id": 1228,
    "prompt": "What is the total number of employees trained in disability awareness in the Pacific region?",
    "generated_sql": "SELECT COUNT(*) FROM employees WHERE region = 'Pacific' AND training_type = 'Disability Awareness';",
    "reference_sql": "SELECT region, SUM(participants) FROM employee_training_pacific WHERE region = 'Pacific' AND training = 'Disability Awareness';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1229,
    "prompt": "Count how many protected forests are in Africa?",
    "generated_sql": "SELECT COUNT(*) FROM forests WHERE country = 'Africa';",
    "reference_sql": "SELECT COUNT(*) FROM forests WHERE region = 'Africa' AND is_protected = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for protected forests and uses country='Africa' instead of continent"
    }
  },
  {
    "example_id": 1230,
    "prompt": "What is the maximum response time for medical emergencies?",
    "generated_sql": "SELECT MAX(response_time) FROM emergency_response;",
    "reference_sql": "SELECT response_type, MAX(response_time) AS max_response_time FROM medical_responses WHERE response_type LIKE '%medical%' GROUP BY response_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to restrict to medical emergencies"
    }
  },
  {
    "example_id": 1231,
    "prompt": "What is the average ticket price for performances at the 'Downtown Theater'?",
    "generated_sql": "SELECT AVG(price) FROM performances WHERE location = 'Downtown Theater';",
    "reference_sql": "SELECT AVG(ticket_price) FROM DowntownTheater WHERE show_name = 'Downtown Theater'",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1232,
    "prompt": "Show defense contracts for 'Blue Skies Inc.' and 'Green Horizons Inc.' in Q3 2021",
    "generated_sql": "SELECT * FROM contracts WHERE company IN ('Blue Skies Inc.', 'Green Horizons Inc.') AND quarter = 3;",
    "reference_sql": "SELECT company, quarter, value FROM defense_contracts WHERE company IN ('Blue Skies Inc.', 'Green Horizons Inc.') AND quarter = 'Q3 2021';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filters for year = 2021 and contract type = 'Defense'"
    }
  },
  {
    "example_id": 1233,
    "prompt": "Update all military equipment maintenance records in the Southeast region from Q1 2022 to Q2 2022",
    "generated_sql": "UPDATE military_equipment_maintenance SET maintenance_date = '2022-01-01' WHERE region = 'Southeast';",
    "reference_sql": "UPDATE Equipment SET MaintenanceDate = CASE WHEN Quarter = 1 THEN DATE_ADD(MaintenanceDate, INTERVAL 1 QUARTER) ELSE MaintenanceDate END WHERE Region = 'Southeast';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter Q1 2022 records and sets maintenance_date incorrectly instead of updating to Q2 2022 dates"
    }
  },
  {
    "example_id": 1234,
    "prompt": "Who are the top 3 defense diplomacy partners of 'India' in the last 3 years, based on the number of joint military exercises?",
    "generated_sql": "SELECT DISTINCT partner, COUNT(*) as num_exercises FROM military_exercises WHERE partner = 'India' AND last_updated >= DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR) GROUP BY partner ORDER BY num_exercises DESC;",
    "reference_sql": "SELECT country2, COUNT(*) AS exercise_count FROM diplomacy_exercises WHERE country1 = 'India' AND exercise_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) GROUP BY country2 ORDER BY exercise_count DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters partner = 'India' instead of selecting exercises involving India and identifying the other country as partner, and it lacks LIMIT 3 for top results."
    }
  },
  {
    "example_id": 1235,
    "prompt": "List all the ports in the 'ports' table that have a crane capacity greater than 150 tons.",
    "generated_sql": "SELECT * FROM ports WHERE crane_capacity > 150;",
    "reference_sql": "SELECT port_name FROM ports WHERE crane_capacity > 150;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1236,
    "prompt": "Find excavation sites with no artifacts.",
    "generated_sql": "SELECT Name FROM ExcavationSites WHERE NoArtefacts = 0;",
    "reference_sql": "SELECT e.id, e.location FROM excavations e LEFT JOIN artifacts a ON e.id = a.excavation_id WHERE a.id IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a NoArtefacts column instead of checking absence of records in Artifacts table"
    }
  },
  {
    "example_id": 1237,
    "prompt": "List the top 3 most common artifact types found in the 'Eastern Region'?",
    "generated_sql": "SELECT artifact_type, COUNT(*) FROM artifacts WHERE region = 'Eastern' GROUP BY artifact_type ORDER BY COUNT(*) DESC LIMIT 3;",
    "reference_sql": "SELECT artifact_type, COUNT(*) as count FROM artifacts a JOIN excavation_sites e ON a.site_id = e.site_id WHERE e.region = 'Eastern Region' GROUP BY artifact_type ORDER BY count DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause filters region = 'Eastern' instead of 'Eastern Region'"
    }
  },
  {
    "example_id": 1238,
    "prompt": "What cybersecurity strategies were implemented in India?",
    "generated_sql": "SELECT * FROM cybersecurity_strategies_india WHERE country = 'India';",
    "reference_sql": "SELECT strategy FROM cybersecurity_strategies WHERE location = 'India';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses a nonstandard table and redundant WHERE clause; should query the general cybersecurity_strategies table filtered by country='India'"
    }
  },
  {
    "example_id": 1239,
    "prompt": "What is the maximum number of military personnel in Africa who have received training in military technology in the past 2 years?",
    "generated_sql": "SELECT MAX(num_military_pioneers) FROM military_training_date WHERE location = 'Africa' AND date >= DATEADD(year, -2, GETDATE());",
    "reference_sql": "SELECT MAX(count(*)) FROM military_personnel m JOIN countries c ON m.country = c.name WHERE c.region = 'Africa' AND m.training_history LIKE '%[0-9]% training,[0-9][0-9]%' GROUP BY YEAR(SUBSTRING(m.training_history, INSTR(m.training_history, ',') + 1, 4));",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using MAX on num_military_pioneers is inappropriate; should count or sum personnel over the period rather than max of a single column"
    }
  },
  {
    "example_id": 1240,
    "prompt": "What is the total amount donated in Q2 2022?",
    "generated_sql": "SELECT SUM(DonationAmount) FROM Donations WHERE DonationDate BETWEEN '2022-04-01' AND '2022-04-30';",
    "reference_sql": "SELECT SUM(Amount) FROM Donations WHERE DATE_FORMAT(DonationDate, '%Y-%m') BETWEEN '2022-04' AND '2022-06';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query only covers April instead of Q2 (April through June)"
    }
  },
  {
    "example_id": 1241,
    "prompt": "Find the average age of non-binary employees who have completed the compliance training.",
    "generated_sql": "SELECT AVG(age) FROM Employees WHERE gender = 'Non-binary' AND training_status = 'Compliant';",
    "reference_sql": "SELECT AVG(Age) FROM Employees WHERE Gender = 'Non-binary' AND CompletedComplianceTraining = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "training_status filter uses 'Compliant' instead of specifying completion of compliance training"
    }
  },
  {
    "example_id": 1242,
    "prompt": "What is the total number of employees who identify as a racial or ethnic minority?",
    "generated_sql": "SELECT COUNT(*) FROM Employees WHERE Ethnicity IN ('Hispanic', 'African American', 'Asian', 'Native American', 'Pacific Islander');",
    "reference_sql": "SELECT COUNT(*) FROM Employees WHERE Race <> 'White';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Hardcodes specific categories and omits other minority identifications (e.g., multiracial or other), should use a broader condition"
    }
  },
  {
    "example_id": 1243,
    "prompt": "What is the average energy production for each source in Texas between 2021-01-01 and 2021-01-07, excluding sources with only one production record?",
    "generated_sql": "SELECT a.source_id, AVG(a.energy_production) as avg_energy_production FROM energy_production a WHERE a.year BETWEEN 2021-01-01 AND 2021-01-07 GROUP BY a.source_id;",
    "reference_sql": "SELECT source, AVG(production_quantity) as avg_production FROM energy_production_3 WHERE production_date BETWEEN '2021-01-01' AND '2021-01-07' AND location = 'Texas' GROUP BY source HAVING COUNT(*) > 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for Texas and no exclusion of sources with only one production record"
    }
  },
  {
    "example_id": 1244,
    "prompt": "What was the total energy storage capacity in California in 2018 and 2019?",
    "generated_sql": "SELECT SUM(capacity) FROM energy_storage WHERE state = 'CA' AND year IN (2018, 2019);",
    "reference_sql": "SELECT SUM(capacity) as total_capacity, year FROM energy_storage WHERE region = 'California' GROUP BY year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Aggregates both years together instead of providing separate totals; missing GROUP BY year"
    }
  },
  {
    "example_id": 1245,
    "prompt": "What is the minimum and maximum technology accessibility score for organizations in the education sector?",
    "generated_sql": "SELECT MIN(technology_accessible_score) AS min_score, MAX(technology_accessible_score) AS max_score FROM education_equity;",
    "reference_sql": "SELECT MIN(tech_accessibility_score), MAX(tech_accessibility_score) FROM org_accessibility WHERE sector = 'education';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for education sector organizations"
    }
  },
  {
    "example_id": 1246,
    "prompt": "Find the number of vehicles in each maintenance category in the 'vehicle_maintenance' table.",
    "generated_sql": "SELECT maintenance_category, COUNT(*) FROM vehicle_maintenance GROUP BY maintenance_category;",
    "reference_sql": "SELECT category, COUNT(*) as num_vehicles FROM vehicle_maintenance GROUP BY category;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1247,
    "prompt": "List all unique route IDs and station IDs from the route_stations table",
    "generated_sql": "SELECT DISTINCT route_id, station_id FROM route_stations;",
    "reference_sql": "SELECT DISTINCT route_id, station_id FROM route_stations;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1248,
    "prompt": "Show the number of trips taken by each passenger on the 'Red Line'",
    "generated_sql": "SELECT p.name, COUNT(t.id) as trip_count FROM passenger p LEFT JOIN trip t ON p.id = t.passenger_id WHERE p.name LIKE '%Red Line%' GROUP BY p.name;",
    "reference_sql": "SELECT passengers.passenger_name, COUNT(passenger_trips.trip_id) FROM passengers JOIN passenger_trips ON passengers.passenger_id = passenger_trips.passenger_id WHERE passenger_trips.route_id = 1 GROUP BY passengers.passenger_id, passengers.passenger_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on passenger name instead of the trip's line"
    }
  },
  {
    "example_id": 1249,
    "prompt": "What is the average value for each accessibility feature per route for routes in Japan?",
    "generated_sql": "SELECT a.route_name, AVG(a.value) AS avg_value FROM access_features a GROUP BY a.route_name;",
    "reference_sql": "SELECT a.route_id, a.feature, AVG(a.value) AS avg_value FROM accessibility a WHERE a.country = 'Japan' GROUP BY a.route_id, a.feature;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for routes in Japan and missing grouping by feature"
    }
  },
  {
    "example_id": 1250,
    "prompt": "What is the name of the passenger who boarded the bus with the route 101 on March 15, 2021 at 10:15 AM?",
    "generated_sql": "SELECT name FROM passenger WHERE route = '101' AND last_bedoomed = '10:15' AND bus_id = (SELECT id FROM bus WHERE id = (SELECT id FROM bus WHERE bus_id = (SELECT id FROM bus WHERE bus_id = (SELECT id FROM bus WHERE bus_id = (SELECT id FROM bus WHERE bus_id = (SELECT id FROM bus WHERE bus_id = (SELECT id FROM bus WHERE bus_id = (SELECT id FROM bus WHERE bus_id = (SELECT id FROM bus WHERE bus_id = (SELECT id FROM bus WHERE bus_id",
    "reference_sql": "SELECT name FROM RIDERS WHERE boarding_time = '2021-03-15 10:15:00' AND id IN (SELECT rider_id FROM BUS_ROUTES_RIDERS WHERE route_number = 101);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses incorrect columns and irrelevant nested subqueries and does not filter by date"
    }
  },
  {
    "example_id": 1251,
    "prompt": "What is the total weight of non-organic fruits in the FOOD_ITEMS table?",
    "generated_sql": "SELECT SUM(weight) FROM FOOD_ITEMS WHERE is_organic = false;",
    "reference_sql": "SELECT SUM(weight) FROM FOOD_ITEMS WHERE is_organic = false AND category = 'Fruit';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums all non-organic items without restricting to fruits"
    }
  },
  {
    "example_id": 1252,
    "prompt": "What is the total number of items sold by each salesperson in the sales database?",
    "generated_sql": "SELECT salesperson, COUNT(items) FROM Sales GROUP BY salesperson;",
    "reference_sql": "SELECT salesperson, SUM(items) FROM sales GROUP BY salesperson;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(items) instead of SUM(items) to aggregate the total number of items sold"
    }
  },
  {
    "example_id": 1253,
    "prompt": "What is the minimum number of public participations in any initiative?",
    "generated_sql": "SELECT MIN(num_participations) FROM projects WHERE initiative_id IN (SELECT id FROM initiatives WHERE initiative_name = 'Water Conservation Program');",
    "reference_sql": "SELECT MIN(num_participants) FROM participations;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query restricts to a specific initiative instead of computing the minimum across all initiatives"
    }
  },
  {
    "example_id": 1254,
    "prompt": "Display the names of community health workers who manage both mental health and physical health cases.",
    "generated_sql": "SELECT name FROM community_health_workers WHERE mental_health_case_management = true AND physical_health_case_management = true;",
    "reference_sql": "SELECT DISTINCT c.Name FROM Cases c INNER JOIN CommunityHealthWorkers h ON c.WorkerID = h.WorkerID WHERE h.Specialty = 'Mental Health' AND h.Specialty = 'Physical Health';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1255,
    "prompt": "What is the total number of health equity metric evaluations conducted in 2020 and 2021?",
    "generated_sql": "SELECT SUM(enrollment_advocacy_count) FROM health_equity_metrics WHERE year IN (2020, 2021);",
    "reference_sql": "SELECT COUNT(*) as evaluation_count FROM evaluations WHERE evaluation_date BETWEEN '2020-01-01' AND '2021-12-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Summing enrollment_advocacy_count instead of the evaluations count for health equity metrics"
    }
  },
  {
    "example_id": 1256,
    "prompt": "How many eco-friendly hotels are in Portugal?",
    "generated_sql": "SELECT COUNT(*) FROM hotels WHERE country = 'Portugal' AND eco_friendly = true;",
    "reference_sql": "SELECT COUNT(*) FROM eco_hotels WHERE country = 'Portugal';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1257,
    "prompt": "Top 3 countries with most hotel listings on Online Travel Agency?",
    "generated_sql": "SELECT country, num_hotels FROM hotel_info GROUP BY country ORDER BY num_hotels DESC LIMIT 3;",
    "reference_sql": "SELECT country, SUM(listings) as total_listings FROM ota_hotels GROUP BY country ORDER BY total_listings DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "num_hotels is not computed via COUNT; should use COUNT(*) AS num_hotels"
    }
  },
  {
    "example_id": 1258,
    "prompt": "What is the total number of species in the Arctic biodiversity database?",
    "generated_sql": "SELECT COUNT(*) FROM biodiversity WHERE location = 'Arctic';",
    "reference_sql": "SELECT COUNT(species) FROM ArcticBiodiversity;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts all records instead of distinct species"
    }
  },
  {
    "example_id": 1259,
    "prompt": "Who are the top 3 medication managers with the most patients in India and South Africa?",
    "generated_sql": "SELECT name, country, patients FROM medication_management WHERE country = 'India' OR country = 'South Africa' ORDER BY patients DESC LIMIT 3;",
    "reference_sql": "SELECT medication_managers.name, COUNT(patients.id) AS patient_count FROM medication_managers INNER JOIN patients ON medication_managers.id = patients.manager_id WHERE patients.state IN ('India', 'South Africa') GROUP BY medication_managers.name ORDER BY patient_count DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1260,
    "prompt": "Identify the number of unique community organizations involved in each restorative justice program",
    "generated_sql": "SELECT program, COUNT(DISTINCT org_id) FROM restorative_justice_programs GROUP BY program;",
    "reference_sql": "SELECT program_id, COUNT(DISTINCT org_name) FROM community_orgs GROUP BY program_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1261,
    "prompt": "What is the average age of legal aid service users by gender in the 'legal_aid_users' table?",
    "generated_sql": "SELECT gender, AVG(age) FROM legal_aid_users GROUP BY gender;",
    "reference_sql": "SELECT gender, AVG(age) FROM legal_aid_users GROUP BY gender;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1262,
    "prompt": "What is the difference in the average duration of closed cases between attorneys in the \"criminal_defense\" department, ordered by the difference?",
    "generated_sql": "SELECT DISTINCT attorney_id, AVG(duration) as avg_duration FROM attorneys WHERE department = 'criminal_defense' GROUP BY attorney_id ORDER BY avg_duration DESC;",
    "reference_sql": "SELECT attorney_id, AVG(duration) - LAG(AVG(duration)) OVER (PARTITION BY attorney_id ORDER BY attorney_id) as difference FROM cases WHERE status = 'closed' GROUP BY attorney_id ORDER BY difference;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for closed cases or compute differences between average durations"
    }
  },
  {
    "example_id": 1263,
    "prompt": "What is the total quantity of orders from customers in the 'Asia-Pacific' region?",
    "generated_sql": "SELECT SUM(quantity) FROM orders WHERE region = 'Asia-Pacific';",
    "reference_sql": "SELECT SUM(quantity) FROM orders WHERE customer_region = 'Asia-Pacific';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes region is a column in orders; should join orders with customers to filter by customers.region"
    }
  },
  {
    "example_id": 1264,
    "prompt": "What is the earliest date of contract negotiation for each defense project in the Asia-Pacific region?",
    "generated_sql": "SELECT project, MIN(date_negotiated) FROM defense_projects WHERE region = 'Asia-Pacific' GROUP BY project;",
    "reference_sql": "SELECT ProjectName, MIN(StartDate) AS EarliestDate FROM Projects WHERE Region = 'Asia-Pacific' GROUP BY ProjectName;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1265,
    "prompt": "Which defense projects have the highest geopolitical risk in the Asia-Pacific region?",
    "generated_sql": "SELECT project_name, MAX(risk_level) as max_risk_level FROM defense_projects WHERE region = 'Asia-Pacific' GROUP BY project_name;",
    "reference_sql": "SELECT project_name, risk_level FROM defense_projects_risk WHERE region = 'Asia-Pacific' AND risk_level = (SELECT MAX(risk_level) FROM defense_projects_risk WHERE region = 'Asia-Pacific');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query returns each project\u2019s max risk rather than filtering to only those with the overall highest risk in the region."
    }
  },
  {
    "example_id": 1266,
    "prompt": "List the top 3 cities with the highest number of broadband subscribers as of 2021-12-31.",
    "generated_sql": "SELECT city, SUM(subscriber_count) FROM broadband_subscribers WHERE subscription_date BETWEEN '2021-12-31' AND '2021-12-31' GROUP BY city ORDER BY SUM(subscriber_count) DESC LIMIT 3;",
    "reference_sql": "SELECT city, COUNT(*) AS num_subscribers FROM subscribers WHERE service = 'broadband' AND start_date <= '2021-12-31' GROUP BY city ORDER BY num_subscribers DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums subscriptions on the date rather than using the cumulative subscriber count snapshot as of that date"
    }
  },
  {
    "example_id": 1267,
    "prompt": "What is the total amount donated by donors from the 'finance' sector in the year 2022?",
    "generated_sql": "SELECT SUM(donation_amount) FROM donations WHERE sector = 'finance' AND YEAR(donation_date) = 2022;",
    "reference_sql": "SELECT SUM(donation_amount) FROM donations WHERE donor_sector = 'finance' AND YEAR(donation_date) = 2022;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1268,
    "prompt": "Update the donation amount to $10000 for donor_id 5, who identifies as genderqueer.",
    "generated_sql": "UPDATE donations SET donation_amount = 10000 WHERE donor_id = 5 AND gender_queer = true;",
    "reference_sql": "UPDATE donors SET donation_amount = 10000 WHERE donor_id = 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on gender in donations table without joining donors and uses incorrect column for gender"
    }
  },
  {
    "example_id": 1269,
    "prompt": "Which organization received the most number of donations on a single day?",
    "generated_sql": "SELECT org_id, donation_amount, SUM(donation_amount) as total_donations FROM organization_deals GROUP BY org_id, donation_amount ORDER BY total_donations DESC;",
    "reference_sql": "SELECT OrgID, DonationDate, COUNT(*) as NumDonations FROM Donations GROUP BY OrgID, DonationDate ORDER BY OrgID, NumDonations DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by donation_amount instead of date and sums amounts instead of counting donations"
    }
  },
  {
    "example_id": 1270,
    "prompt": "What is the average number of wins for players who play \"Racing Simulator 2022\"?",
    "generated_sql": "SELECT AVG(Wins) FROM PlayerGame WHERE GameName = 'Racing Simulator 2022';",
    "reference_sql": "SELECT AVG(Wins) FROM Players WHERE Game = 'Racing Simulator 2022';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1271,
    "prompt": "What is the average age of players who have played Fortnite and are from Asia?",
    "generated_sql": "SELECT AVG(Age) FROM Players WHERE Game LIKE '%Fortnite%' AND PlayerRace = 'Asia';",
    "reference_sql": "SELECT AVG(PlayerAge) as AvgAge FROM Players WHERE Game = 'Fortnite' AND Continent = 'Asia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect column used for region and using LIKE for exact game match"
    }
  },
  {
    "example_id": 1272,
    "prompt": "What is the average number of games played by players who joined esports events in Canada, per month?",
    "generated_sql": "SELECT EXTRACT(MONTH FROM date) AS month, AVG(COUNT(*)) AS avg_games_played FROM esports_events WHERE country = 'Canada' GROUP BY month;",
    "reference_sql": "SELECT AVG(TotalGames) FROM Players WHERE Country = 'Canada' AND PlayerID IN (SELECT PlayerID FROM EventParticipation WHERE EventCountry = 'Canada')",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "You cannot nest AVG(COUNT(*)); it doesn\u2019t compute per-player averages. You need to count games per player per month, then average those counts."
    }
  },
  {
    "example_id": 1273,
    "prompt": "Update the temperature values to Celsius for all records in 'Germany' in the month of May.",
    "generated_sql": "UPDATE temperature SET temperature = 'Celsius' WHERE country = 'Germany' AND date BETWEEN '2022-05-01' AND '2022-06-30';",
    "reference_sql": "UPDATE temperature SET temperature = (temperature - 32) * 5/9 WHERE station_id IN (SELECT id FROM weather_stations WHERE country = 'Germany') AND EXTRACT(MONTH FROM timestamp) = 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Sets temperature to literal 'Celsius' rather than converting values; wrong date range includes June"
    }
  },
  {
    "example_id": 1274,
    "prompt": "What is the total number of clean energy policies in the 'policy_database' table for countries in the 'Europe' region?",
    "generated_sql": "SELECT COUNT(*) FROM policy_database WHERE region = 'Europe' AND policy_type = 'clean energy';",
    "reference_sql": "SELECT COUNT(*) FROM policy_database WHERE region = 'Europe';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1275,
    "prompt": "What is the percentage of security incidents resolved within SLA for each department in the last quarter?",
    "generated_sql": "SELECT department, SUM(status) as total_status FROM security_incidents WHERE resolution_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY department;",
    "reference_sql": "SELECT department, AVG(IF(resolved, 1, 0)) as resolved_within_sla FROM SecurityIncidents WHERE incident_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) GROUP BY department;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not compute resolution within SLA or percentage and uses incorrect aggregation"
    }
  },
  {
    "example_id": 1276,
    "prompt": "What is the number of shared electric scooters in Sao Paulo?",
    "generated_sql": "SELECT COUNT(*) FROM SharedScooters WHERE city = 'Sao Paulo';",
    "reference_sql": "SELECT COUNT(*) as num_scooters FROM shared_escooters WHERE city = 'Sao Paulo';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1277,
    "prompt": "How many policyholders from Brazil have an annual income greater than $50,000, and what is the average claim amount for this group?",
    "generated_sql": "SELECT COUNT(policyholders.id) as policyholders_count, AVG(AREA) as avg_claim_amount FROM policies INNER JOIN policyholders ON policies.policyholder_id = policyholders.policyholder_id WHERE policyholders.country = 'Brazil' AND policyholders.annual_income > 50000 GROUP BY policyholders_count HAVING policyholders_count = 1;",
    "reference_sql": "SELECT COUNT(*) AS HighIncomePolicyholders, AVG(ClaimAmount) AS AvgClaimAmount FROM Claims JOIN Policyholders ON Claims.PolicyholderID = Policyholders.PolicyholderID WHERE Policyholders.Country = 'Brazil' AND Policyholders.AnnualIncome > 50000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses incorrect column AVG(AREA), unnecessary GROUP BY and HAVING clause"
    }
  },
  {
    "example_id": 1278,
    "prompt": "What is the total number of policies for 'High-Risk' drivers?",
    "generated_sql": "SELECT SUM(PolicyCount) FROM Policy WHERE DriverType = 'High-Risk';",
    "reference_sql": "SELECT COUNT(*) FROM policies WHERE driver_risk = 'High-Risk';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Should use COUNT(*) to count policies rather than summing a non-existent PolicyCount column"
    }
  },
  {
    "example_id": 1279,
    "prompt": "Find the maximum safety rating for members in the 'Government_Employees_Union'.",
    "generated_sql": "SELECT MAX(safety_rating) FROM Government_Employees_Union;",
    "reference_sql": "SELECT MAX(safety_rating) FROM Government_Employees_Union;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1280,
    "prompt": "Delete all exhibitions with less than 500 visitors",
    "generated_sql": "DELETE FROM Exhibitions WHERE Visitors < 500;",
    "reference_sql": "DELETE FROM Exhibitions WHERE visitor_count < 500;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1281,
    "prompt": "Find the top 3 contributors with the lowest recycling rate in the 'waste_contributors' table.",
    "generated_sql": "SELECT name, recycling_rate FROM waste_contributors ORDER BY recycling_rate DESC LIMIT 3;",
    "reference_sql": "SELECT contributor FROM waste_contributors WHERE recycling_rate IN (SELECT MIN(recycling_rate) FROM waste_contributors) LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query orders by recycling_rate DESC (highest rates) but should use ASC to get the lowest rates."
    }
  },
  {
    "example_id": 1282,
    "prompt": "What is the maximum heart rate for users during morning workouts?",
    "generated_sql": "SELECT MAX(heart_rate) FROM workouts WHERE workout_type = 'Morning' AND workout_time = NOW();",
    "reference_sql": "SELECT MAX(heart_rate) FROM workouts WHERE workout_time BETWEEN '06:00:00' AND '11:59:59';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering workout_time = NOW() is incorrect; it should select all morning workouts rather than only those at the current timestamp"
    }
  },
  {
    "example_id": 1283,
    "prompt": "What is the average safety score for all creative AI applications in the 'AI_Fairness' schema?",
    "generated_sql": "SELECT AVG(score) FROM ai_fairness.creative_ai.applications WHERE schema = 'AI_Fairness';",
    "reference_sql": "SELECT AVG(safety_score) FROM AI_Fairness.Creative_AI;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on a schema column and uses score instead of the safety_score field."
    }
  },
  {
    "example_id": 1284,
    "prompt": "List all rural infrastructure projects in Nepal and their respective start dates.",
    "generated_sql": "SELECT project_name, start_date FROM rural_infrastructure WHERE country = 'Nepal';",
    "reference_sql": "SELECT project_name, start_date FROM rural_infrastructure_projects WHERE country = 'Nepal';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1285,
    "prompt": "What is the total number of locations in the fish_stock table?",
    "generated_sql": "SELECT COUNT(*) FROM fish_stock;",
    "reference_sql": "SELECT COUNT(DISTINCT location) FROM fish_stock;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts rows instead of distinct locations"
    }
  },
  {
    "example_id": 1286,
    "prompt": "Identify the top 3 countries with the highest percentage of attendees",
    "generated_sql": "SELECT country, COUNT(DISTINCT attendee_id) AS attendees FROM events GROUP BY country ORDER BY attendees DESC LIMIT 3;",
    "reference_sql": "SELECT country, (COUNT(attendee_id) OVER (PARTITION BY country) * 100.0 / (SELECT COUNT(attendee_id) FROM attendee_info)) AS percentage FROM attendee_info GROUP BY country ORDER BY percentage DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns raw attendee counts instead of percentages"
    }
  },
  {
    "example_id": 1287,
    "prompt": "What is the total revenue for the top 5 dispensaries in Michigan in the last year?",
    "generated_sql": "SELECT SUM(revenue) FROM dispensaries WHERE region = 'Michigan' AND sales_date >= DATEADD(year, -1, CURRENT_DATE) AND (SELECT MAX(revenue) FROM dispensaries WHERE region = 'Michigan') <= CURRENT_DATE",
    "reference_sql": "SELECT D.name, SUM(T.transaction_value) FROM Dispensaries D JOIN Transactions T ON D.id = T.dispensary_id WHERE D.state = 'Michigan' AND T.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY D.id ORDER BY SUM(T.transaction_value) DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not select top 5 dispensaries or sum their revenues correctly; includes an invalid subquery and date comparison."
    }
  },
  {
    "example_id": 1288,
    "prompt": "Which cultivators supply sativa strains to dispensaries in Oregon?",
    "generated_sql": "SELECT cultivator FROM cultivators WHERE type = 'Sativa' AND state = 'Oregon' AND dispensary_state = 'Oregon';",
    "reference_sql": "SELECT CultivatorName FROM CultivatorData WHERE State = 'Oregon' AND Strain = 'Sativa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters cultivator state and lacks join to supply and dispensary to ensure they supply sativa to Oregon dispensaries"
    }
  },
  {
    "example_id": 1289,
    "prompt": "Find the attorney who has billed the most hours in the 'billing' table?",
    "generated_sql": "SELECT AttorneyID, MAX(Hours) FROM Billing WHERE PaymentDate = '2022-06-01' GROUP BY AttorneyID;",
    "reference_sql": "SELECT attorney_id, SUM(hours) FROM billing GROUP BY attorney_id ORDER BY SUM(hours) DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters by PaymentDate and uses MAX(Hours) per attorney instead of summing total hours and selecting the top attorney"
    }
  },
  {
    "example_id": 1290,
    "prompt": "What is the total billing amount by practice area?",
    "generated_sql": "SELECT practice_area, SUM(billing_amount) FROM billing_exercises GROUP BY practice_area;",
    "reference_sql": "SELECT PA.PracticeArea, SUM(P.BillingAmount) AS Total_Billing_Amount FROM PracticeAreas PA INNER JOIN Precedents P ON PA.PracticeAreaID = P.PracticeAreaID GROUP BY PA.PracticeArea;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1291,
    "prompt": "Which clients from historically marginalized regions have paid less than the average billing rate?",
    "generated_sql": "SELECT c.name FROM clients c INNER JOIN billing b ON c.id = b.client_id WHERE b.region = 'Historically- marginalized';",
    "reference_sql": "SELECT Clients.name FROM Clients INNER JOIN Attorneys ON Clients.attorney_id = Attorneys.id WHERE Clients.paid < Attorneys.billing_rate AND Clients.region IN ('Historically Marginalized Region 1', 'Historically Marginalized Region 2');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not compare each client\u2019s billing rate to the average billing rate"
    }
  },
  {
    "example_id": 1292,
    "prompt": "Calculate the total quantity of chemicals that were produced in the first quarter of 2022 and display them in alphabetical order.",
    "generated_sql": "SELECT chemicals.chemical_name, chemicals.quantity FROM chemicals INNER JOIN production ON chemicals.chemical_id = production.chemical_id WHERE production.date >= '2022-01-01' AND production.date < '2022-06-01';",
    "reference_sql": "SELECT chemical_name, SUM(quantity) AS total_quantity FROM production_data WHERE production_date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY chemical_name ORDER BY chemical_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query lacks SUM aggregation and GROUP BY to calculate total quantities, sorts in wrong date range (up to June), and does not order results alphabetically."
    }
  },
  {
    "example_id": 1293,
    "prompt": "What is the total greenhouse gas emissions reduction due to climate finance projects in Central America?",
    "generated_sql": "SELECT SUM(reduction_amount) FROM climate_finance_projects WHERE location = 'Central America' AND type = 'Reduction';",
    "reference_sql": "SELECT total_reduction FROM v_ghg_reductions WHERE source_type = 'Greenhouse Gas';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary and incorrect filter on type = 'Reduction'; summing reduction_amount by location is sufficient"
    }
  },
  {
    "example_id": 1294,
    "prompt": "What is the market share of drug 'JKL-012' in India in Q3 2022?",
    "generated_sql": "SELECT market_share FROM drug_market_by_country WHERE drug_name = 'JKL-012' AND country = 'India' AND quarter = 3 AND year = 2022;",
    "reference_sql": "SELECT market_share FROM market_share WHERE drug_name = 'JKL-012' AND region = 'India' AND quarter = 3 AND year = 2022;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1295,
    "prompt": "Which drugs have been approved for pediatric use in the past 5 years?",
    "generated_sql": "SELECT drug_name, approval_date FROM approved_drugs WHERE approval_date >= '2018-01-01' AND approval_date < '2019-01-01';",
    "reference_sql": "SELECT drug_name FROM drug_approval WHERE approval_date >= DATE('now', '-5 year');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only 2018 and misses pediatric use filter and the full 5-year range"
    }
  },
  {
    "example_id": 1296,
    "prompt": "List all the public health policies for California and Texas.",
    "generated_sql": "SELECT * FROM public_health_policies WHERE state IN ('CA', 'TX');",
    "reference_sql": "SELECT * FROM HealthPolicies WHERE state IN ('California', 'Texas');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1297,
    "prompt": "List the number of founders for companies in the 'San Francisco' region",
    "generated_sql": "SELECT COUNT(*) FROM startups WHERE location = 'San Francisco';",
    "reference_sql": "SELECT region, COUNT(*) as num_companies FROM companies WHERE region = 'San Francisco';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts companies, not the number of founders per company"
    }
  },
  {
    "example_id": 1298,
    "prompt": "What is the average total funding for companies founded after 2010?",
    "generated_sql": "SELECT AVG(funding) FROM companies WHERE foundation_year < 2010;",
    "reference_sql": "SELECT AVG(f.total_funding) as avg_total_funding FROM company_funding_summary f JOIN company_founding c ON f.company_id = c.id WHERE c.founding_year > 2010;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses foundation_year < 2010 instead of > 2010"
    }
  },
  {
    "example_id": 1299,
    "prompt": "How many agroecology research projects have been completed in Colombia and Peru?",
    "generated_sql": "SELECT COUNT(*) FROM agroecology_pursuits WHERE country IN ('Colombia', 'Peru');",
    "reference_sql": "SELECT COUNT(DISTINCT country) FROM agroecology_research WHERE country IN ('CO', 'PE');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not filter for completed projects in the specified countries."
    }
  },
  {
    "example_id": 1300,
    "prompt": "Show the number of urban agriculture initiatives in each city and the average budget.",
    "generated_sql": "SELECT city, COUNT(*) as num_initiatives, AVG(budget) as avg_budget FROM urban_agriculture_initiatives GROUP BY city;",
    "reference_sql": "SELECT city, COUNT(initiative_name) as num_initiatives, AVG(budget) as avg_budget FROM urban_agriculture_city GROUP BY city;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1301,
    "prompt": "What is the total quantity of corn sold by farmers in 'Summerfield'?",
    "generated_sql": "SELECT SUM(quantity) FROM Farmers WHERE location = 'Summerfield' AND type = 'Corn';",
    "reference_sql": "SELECT SUM(quantity) FROM sales INNER JOIN farmers ON sales.farmer_id = farmers.id INNER JOIN crops ON sales.crop_name = crops.name WHERE farmers.location = 'Summerfield' AND crops.name = 'Corn';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses the Farmers table directly instead of joining to the table that records crop sales, so it may not retrieve the sold corn quantities."
    }
  },
  {
    "example_id": 1302,
    "prompt": "What is the total number of marine species in the 'Arctic' region that are threatened or endangered?'",
    "generated_sql": "SELECT SUM(species_count) FROM arctic_species WHERE region = 'Arctic';",
    "reference_sql": "SELECT region, COUNT(*) FROM marine_species WHERE region = 'Arctic' AND conservation_status IN ('Endangered', 'Threatened') GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for threatened or endangered species or for marine species."
    }
  },
  {
    "example_id": 1303,
    "prompt": "What is the average total value of transactions for the top 3 digital assets in the 'Binance Smart Chain' network?",
    "generated_sql": "SELECT AVG(total_value) FROM transactions WHERE network = 'Binance Smart Chain' AND asset_type = 'Digital Asset';",
    "reference_sql": "SELECT asset_name, network, AVG(transactions_value) FROM binance_transactions WHERE network = 'Binance Smart Chain' AND asset_name IN (SELECT asset_name FROM (SELECT asset_name, ROW_NUMBER() OVER (ORDER BY transactions_value DESC) as rn FROM binance_transactions WHERE network = 'Binance Smart Chain') x WHERE rn <= 3) GROUP BY asset_name, network;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not identify the top 3 digital assets and averages across all assets instead of the top three"
    }
  },
  {
    "example_id": 1304,
    "prompt": "What is the total value of transactions for a specific smart contract (e.g. '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D') on the 'Binance Smart Chain'?",
    "generated_sql": "SELECT SUM(value) FROM smart_contracts WHERE name = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D') AS total_value;",
    "reference_sql": "SELECT SUM(value) as total_value FROM contract_transactions WHERE contract_id = (SELECT contract_id FROM smart_contracts WHERE contract_address = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D' AND network = 'Binance Smart Chain');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses wrong table, has syntax error, and does not filter by chain network"
    }
  },
  {
    "example_id": 1305,
    "prompt": "What is the total area, in hectares, of wildlife habitats, broken down by habitat type, for habitats that have an area larger than 100000 hectares?",
    "generated_sql": "SELECT type, SUM(area) as total_area FROM WildlifeHabitat GROUP BY type ORDER BY total_area DESC LIMIT 10000;",
    "reference_sql": "SELECT habitat_type, SUM(area) FROM wildlife_habitat_4 WHERE area > 100000 GROUP BY habitat_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query is missing a WHERE clause to filter habitats with area > 100000"
    }
  },
  {
    "example_id": 1306,
    "prompt": "What is the total volume of timber sold in each region?",
    "generated_sql": "SELECT r.region_id, SUM(ts.volume) as total_volume FROM timber_sales ts JOIN regions r ON ts.region_id = r.region_id GROUP BY r.region_id;",
    "reference_sql": "SELECT Regions.RegionName, SUM(Transactions.Volume) as TotalVolume FROM Regions INNER JOIN Transactions ON Regions.RegionID = Transactions.RegionID GROUP BY Regions.RegionName;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1307,
    "prompt": "What is the most popular halal certified lipstick in France?",
    "generated_sql": "SELECT name, price FROM lipstick_prices WHERE country = 'France' ORDER BY price DESC LIMIT 1;",
    "reference_sql": "SELECT product_id, MAX(sale_quantity) FROM lipstick_sales WHERE is_halal_certified = true AND country = 'France' GROUP BY product_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters for halal certification and popularity metric are missing; query orders by price instead of popularity."
    }
  },
  {
    "example_id": 1308,
    "prompt": "Find the total revenue for events with an attendance over 200 in 2021.",
    "generated_sql": "SELECT SUM(revenue) FROM revenue_data WHERE event_type = 'Event' AND attendance > 200 AND year = 2021;",
    "reference_sql": "SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary event_type filter may exclude relevant events"
    }
  },
  {
    "example_id": 1309,
    "prompt": "What is the average ticket price for jazz concerts?",
    "generated_sql": "SELECT AVG(price) FROM Concerts WHERE genre = 'Jazz';",
    "reference_sql": "SELECT AVG(price) FROM concerts WHERE type = 'jazz';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1310,
    "prompt": "Create a view to display veterans with more than 5 years of service",
    "generated_sql": "CREATE VIEW veteran_service as select v.name FROM veteran_service v1 WHERE v1.service_type = 'Veteran' + 1;",
    "reference_sql": "CREATE VIEW veteran_long_service AS SELECT * FROM veteran_employment WHERE years_of_service > 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses incorrect table and filter, does not check years_of_service > 5"
    }
  },
  {
    "example_id": 1311,
    "prompt": "What is the total number of veteran job applications in Texas in the last year?",
    "generated_sql": "SELECT COUNT(*) FROM job_applications WHERE application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
    "reference_sql": "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filters for veteran status and Texas location"
    }
  },
  {
    "example_id": 1312,
    "prompt": "Insert new records into the 'humanitarian_assistance' table for assistance starting in 2022",
    "generated_sql": "INSERT INTO humanitarian_assistance (assistance_date, country, status) VALUES ('2022-01-01', 'Afghanistan', 'Inoperable'); INSERT INTO humanitarian_assistance (assistance_date, country, status) VALUES ('2022-02-01', 'Nepal', 'Inoperable'); INSERT INTO humanitarian_assistance (assistance_date, country, status) VALUES ('2022-03-01', 'Bangladesh', 'Inoperable'); INSERT INTO humanitarian_assistance (",
    "reference_sql": "INSERT INTO humanitarian_assistance (assistance_id, assistance_type, start_date, end_date) VALUES (10, 'food distribution', '2022-01-01', '2022-12-31'), (11, 'water purification', '2022-07-01', NULL);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Arbitrarily inserts only three records without specifying all required columns or criteria for assistance starting in 2022"
    }
  },
  {
    "example_id": 1313,
    "prompt": "What is the total number of defense diplomacy events held in Africa in 2021?",
    "generated_sql": "SELECT SUM(events) FROM defense_diplomacy_2021 WHERE region = 'Africa' AND event_year = 2021;",
    "reference_sql": "SELECT SUM(Events) FROM DefenseDiplomacyEvents WHERE Region = 'Africa' AND Year = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1314,
    "prompt": "Identify salespeople who have made transactions in the last 60 days",
    "generated_sql": "SELECT S.SalespersonName, S.TransactionDate FROM SalesPersonnel S INNER JOIN Transactions TR ON S.SalespersonId = TR.SalespersonId WHERE TR.TransactionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 60 DAY) GROUP BY S.SalespersonName;",
    "reference_sql": "SELECT * FROM salesperson_activity WHERE activity_date >= DATE_SUB(CURRENT_DATE, INTERVAL 60 DAY);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Selecting S.TransactionDate which does not exist and incorrectly using GROUP BY instead of DISTINCT or proper aggregation"
    }
  },
  {
    "example_id": 1315,
    "prompt": "List all the transactions made by clients living in New York with a transaction amount greater than $1000.",
    "generated_sql": "SELECT * FROM transactions WHERE region = 'New York' AND transaction_amount > 1000;",
    "reference_sql": "SELECT transactions.id, transactions.client_id, transactions.transaction_amount, transactions.transaction_date FROM transactions INNER JOIN clients ON transactions.client_id = clients.id WHERE clients.state = 'New York' AND transactions.transaction_amount > 1000.00;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters on region in transactions instead of joining with clients table to get clients living in New York"
    }
  },
  {
    "example_id": 1316,
    "prompt": "List the ports and their average cargo weight for company \"HarborLink\" in Q2 2017 and Q3 2017.",
    "generated_sql": "SELECT p.name, AVG(c.weight) as avg_weight FROM ports p INNER JOIN cargo c ON p.port_id = c.id WHERE c.location = 'HarborLink' AND c.quarter = 2 GROUP BY p.name;",
    "reference_sql": "SELECT port.name, AVG(cargo.weight) FROM port INNER JOIN cargo ON port.id = cargo.port_id AND cargo.quarter IN (2, 3) INNER JOIN company ON cargo.company_id = company.id WHERE company.name = 'HarborLink' GROUP BY port.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only returns Q2 data and omits Q3 2017 (and lacks a year filter)"
    }
  },
  {
    "example_id": 1317,
    "prompt": "What is the total number of containers handled by port 'LA'?",
    "generated_sql": "SELECT COUNT(*) FROM container_handling WHERE port_id = 100 AND port_name = 'LA';",
    "reference_sql": "SELECT SUM(container_count) FROM cargo WHERE port_id = (SELECT port_id FROM ports WHERE port_name = 'LA');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessarily filters by port_id = 100; only port_name = 'LA' should be used."
    }
  },
  {
    "example_id": 1318,
    "prompt": "List materials involved in recycling programs located in Africa.",
    "generated_sql": "SELECT material FROM recycling_programs WHERE location = 'Africa';",
    "reference_sql": "SELECT materials.name, recycling_programs.name AS program_name FROM materials INNER JOIN recycling_programs ON materials.recycling_program_id = recycling_programs.id WHERE recycling_programs.location LIKE '%Africa%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Should select the materials column (plural) and include DISTINCT to avoid duplicates"
    }
  },
  {
    "example_id": 1319,
    "prompt": "List the names of all materials that are not part of the 'recycling' program.",
    "generated_sql": "SELECT material FROM materials WHERE program ='recycling';",
    "reference_sql": "SELECT name FROM materials WHERE recycling_program = false;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query selects materials in the recycling program instead of those not in it."
    }
  },
  {
    "example_id": 1320,
    "prompt": "What is the average production output for each machine in the company's facility in Thailand?",
    "generated_sql": "SELECT company, AVG(production_output) as avg_production_output FROM factories WHERE country = 'Thailand' GROUP BY company;",
    "reference_sql": "SELECT machine_id, AVG(output_quantity) as avg_output FROM production_output po JOIN facilities f ON f.facility_name = 'Bangkok Plant' WHERE po.production_date BETWEEN '2022-04-01' AND '2022-12-31' GROUP BY machine_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by company instead of machine; should group by machine to get average output per machine"
    }
  },
  {
    "example_id": 1321,
    "prompt": "List the top 2 countries with the highest average artifact weight, along with the year and total weight of those artifacts.",
    "generated_sql": "SELECT country, AVG(weight) as avg_weight, year, SUM(weight) as total_weight FROM artifacts WHERE country IN ('USA', 'Canada', 'Japan', 'China') GROUP BY country, year, total_weight HAVING total_weight > 1000;",
    "reference_sql": "SELECT Country, Year, SUM(ArtifactWeight) AS TotalWeight, AVG(ArtifactWeight) OVER (PARTITION BY Country) AS AvgWeight FROM (SELECT Country, Year, ArtifactWeight, ROW_NUMBER() OVER (PARTITION BY Country ORDER BY ArtifactWeight DESC) rn FROM ExcavationSites) x WHERE rn <= 2 GROUP BY Country, Year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Arbitrarily filters countries, misuses GROUP BY including total_weight, and lacks ordering by average weight or LIMIT 2"
    }
  },
  {
    "example_id": 1322,
    "prompt": "What is the average number of hospital beds in rural areas of South Korea?",
    "generated_sql": "SELECT AVG(num_bed) FROM hospital_beds WHERE location = 'South Korea' AND country = 'South Korea' AND num_beds = (SELECT AVG(num_beds) FROM hospital_beds WHERE location = 'South Korea');",
    "reference_sql": "SELECT AVG(Beds) FROM HospitalBeds WHERE Rural = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter rural areas and incorrectly uses a subquery to match average num_beds"
    }
  },
  {
    "example_id": 1323,
    "prompt": "How many companies does 'Impact Fund 1' have investments in, and what's their average ESG rating?",
    "generated_sql": "SELECT COUNT(DISTINCT Investment.id) AS CompanyCount, AVG(ESG_rating.rating) AS AvgESGRating FROM Investment INNER JOIN ESG_rating ON Investment.id = ESG_rating.investment_id INNER JOIN Companies ON Investment.id = Companies.id WHERE Companies.name LIKE '%Impact Fund 1%' AND Companies.id IS NOT NULL GROUP BY Investment.id;",
    "reference_sql": "SELECT COUNT(DISTINCT companies.id), AVG(companies.ESG_rating) FROM investments INNER JOIN companies ON investments.company_id = companies.id WHERE investments.fund_name = 'Impact Fund 1';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Joins use wrong keys, filters company name instead of fund name, and groups by Investment.id instead of returning single aggregate"
    }
  },
  {
    "example_id": 1324,
    "prompt": "Identify the top 3 countries with the highest number of social impact projects in 2019.",
    "generated_sql": "SELECT country, COUNT(*) as projects_count FROM social_impact_projects WHERE year = 2019 GROUP BY country ORDER BY projects_count DESC LIMIT 3;",
    "reference_sql": "SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1325,
    "prompt": "Update the risk score to 7 for investments in the housing sector with an investment amount greater than 1,500,000.",
    "generated_sql": "UPDATE investments SET risk_score = 7 WHERE sector = 'housing' AND investment_amount > 1000000;",
    "reference_sql": "UPDATE investments SET risk_score = 7 WHERE sector = 'Housing' AND investment_amount > 1500000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The investment_amount threshold is 1,000,000 instead of the required 1,500,000."
    }
  },
  {
    "example_id": 1326,
    "prompt": "What is the maximum ESG score for companies in the education sector in Q3 2020?",
    "generated_sql": "SELECT MAX(esg_score) FROM companies WHERE sector = 'Education' AND quarter = 3 AND year = 2020;",
    "reference_sql": "SELECT MAX(esg_score) FROM companies WHERE sector = 'Education' AND quarter = 3 AND year = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1327,
    "prompt": "What is the average length (in minutes) of songs produced by female artists from Canada in the pop genre?",
    "generated_sql": "SELECT AVG(Length) FROM Songs INNER JOIN Artists ON Songs.ArtistID = Artists.ArtistID WHERE Artists.Country = 'Canada' AND Artists.Gender = 'Female' AND SongGenre = 'Pop';",
    "reference_sql": "SELECT AVG(length) FROM songs WHERE artist_gender = 'female' AND artist_country = 'Canada' AND genre = 'pop';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1328,
    "prompt": "What is the minimum budget for each program in Q4 2026, excluding any updates made to the budgets?",
    "generated_sql": "SELECT p.name, MIN(budget) AS min_budget FROM budget p WHERE p.year = 2026 AND p.year < 2027 GROUP BY p.name;",
    "reference_sql": "SELECT P.Name, MIN(P.InitialBudget) as MinBudget FROM Programs P LEFT JOIN BudgetUpdates BU ON P.ProgramID = BU.ProgramID WHERE BU.UpdateDate IS NULL GROUP BY P.ProgramID, P.Name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query does not filter for Q4 nor exclude updated budget entries"
    }
  },
  {
    "example_id": 1329,
    "prompt": "What is the average years of experience for teachers who have accessed mental health resources?",
    "generated_sql": "SELECT AVG(years_of_experience) FROM teachers WHERE mental_health_resource = 'yes';",
    "reference_sql": "SELECT AVG(years_of_experience) AS avg_experience FROM teachers WHERE mental_health_resource_access IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1330,
    "prompt": "List all employees who have changed departments in the 'hr' schema's 'employee_moves' table and the 'hr' schema's 'employee_details' table",
    "generated_sql": "SELECT * FROM employee_moves WHERE department IN ('HR', 'IT') AND department = 'H';",
    "reference_sql": "SELECT e.first_name, e.last_name FROM hr.employee_details e INNER JOIN hr.employee_moves m ON e.employee_id = m.employee_id WHERE m.old_dept != m.new_dept;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query only accesses employee_moves with incorrect filters and does not reference employee_details or list employees in both tables."
    }
  },
  {
    "example_id": 1331,
    "prompt": "How many renewable energy projects are in Country R?",
    "generated_sql": "SELECT COUNT(*) FROM renewable_projects WHERE country = 'Country R' AND project_type = 'Solar'",
    "reference_sql": "SELECT COUNT(*) FROM renewable_count WHERE location = 'Country R';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only solar projects instead of counting all renewable projects in Country R"
    }
  },
  {
    "example_id": 1332,
    "prompt": "List the top 3 countries with the highest solar energy production?",
    "generated_sql": "SELECT country, SUM(production) FROM country_solar_production GROUP BY country ORDER BY SUM(production) DESC LIMIT 3;",
    "reference_sql": "SELECT country, production_quantity FROM solar_energy ORDER BY production_quantity DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1333,
    "prompt": "What is the average energy consumption (in kWh) for households in Canada?",
    "generated_sql": "SELECT AVG(energy_consumption) FROM household_consumption INNER JOIN energy_consumption ON household_consumption.household_id = energy_consumption.household_id WHERE country = 'Canada';",
    "reference_sql": "SELECT AVG(EnergyConsumption) FROM HouseholdEnergyConsumption WHERE Country = 'Canada';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1334,
    "prompt": "Update the 'oil_market' table to set the crude_oil_price_usd to 70.50 for all records where the market_name is 'European Market'",
    "generated_sql": "UPDATE oil_market SET crude_oil_price_usd = 70.50 WHERE market_name = 'European Market';",
    "reference_sql": "UPDATE oil_market SET crude_oil_price_usd = 70.50 WHERE market_name = 'European Market';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1335,
    "prompt": "What was the average daily production of oil in Q4 2020 for wells in the North Sea?",
    "generated_sql": "SELECT AVG(production_volume) FROM oil_production WHERE company_name = 'PetroSofia' AND well_type = 'North Sea';",
    "reference_sql": "SELECT AVG(oil_production) FROM wells WHERE production_date BETWEEN '2020-10-01' AND '2020-12-31' AND location = 'North Sea';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing date filter for Q4 2020 and incorrectly filters by company_name"
    }
  },
  {
    "example_id": 1336,
    "prompt": "What is the average number of points scored by the 'Atlanta Dream' and 'Minnesota Lynx' in the 'WNBA'?",
    "generated_sql": "SELECT AVG(points) FROM atlanta_dream_wnba WHERE team_id IN (SELECT team_id FROM atlanta_team WHERE city = 'Atlanta'; SELECT team_id FROM atlanta_team WHERE city = 'Minnesota');",
    "reference_sql": "SELECT AVG(points) FROM games WHERE team_id IN (SELECT team_id FROM teams WHERE team_name IN ('Atlanta Dream', 'Minnesota Lynx')) AND league = 'WNBA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Invalid syntax and incorrect filtering logic; uses wrong tables and semicolons in IN clause"
    }
  },
  {
    "example_id": 1337,
    "prompt": "What is the average number of spectators in the last 3 home games for each team?",
    "generated_sql": "SELECT t.team_name, AVG(s.sales) as avg_sports_sales FROM teams t JOIN sales s ON t.team_id = s.team_id WHERE s.home_date >= DATEADD(day, -3, GETDATE()) GROUP BY t.team_name;",
    "reference_sql": "SELECT team, AVG(spectators) FROM games WHERE home = 1 GROUP BY team HAVING season >= 2017;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses sales table and date range instead of selecting the last three home games and averaging spectators"
    }
  },
  {
    "example_id": 1338,
    "prompt": "What are the total funds allocated for ethical AI initiatives in North America?",
    "generated_sql": "SELECT SUM(funds) FROM EthicalAIInitiatives WHERE region = 'North America';",
    "reference_sql": "SELECT SUM(funds) FROM ethical_ai_initiatives WHERE region = 'North America';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1339,
    "prompt": "Who is responsible for AI oversight in Canada?",
    "generated_sql": "SELECT name FROM ai_inspection WHERE country = 'Canada';",
    "reference_sql": "SELECT organization FROM ai_oversight WHERE region = 'Canada';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1340,
    "prompt": "What is the maximum fare for train and bus services?",
    "generated_sql": "SELECT MAX(fare) FROM services;",
    "reference_sql": "SELECT MAX(fare_amount) as max_fare FROM fares WHERE mode_id IN (1, 2);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for train and bus services nor provide separate maxima"
    }
  },
  {
    "example_id": 1341,
    "prompt": "Calculate the average quantity of sustainable materials used by each brand, excluding 'BrandA'?",
    "generated_sql": "SELECT brand, AVG(quantity) as avg_quantity FROM sustainable_materials GROUP BY brand;",
    "reference_sql": "SELECT BrandName, AVG(Quantity) as AvgQuantity FROM Brands WHERE BrandName != 'BrandA' GROUP BY BrandName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing exclusion of 'BrandA' in WHERE clause"
    }
  },
  {
    "example_id": 1342,
    "prompt": "Find the daily new user registrations in 'data_privacy' table for the last week?",
    "generated_sql": "SELECT DATE(regist_date) AS registration_date, COUNT(DISTINCT user_id) AS num_new_users FROM data_privacy WHERE registration_date >= DATEADD(day, -7, GETDATE()) GROUP BY registration_date;",
    "reference_sql": "SELECT registration_date, COUNT(*) FROM data_privacy WHERE registration_date >= CURDATE() - INTERVAL 7 DAY GROUP BY registration_date;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses the alias registration_date instead of the actual regist_date column"
    }
  },
  {
    "example_id": 1343,
    "prompt": "Show the number of unique users who engaged with posts about renewable energy in the past month.",
    "generated_sql": "SELECT COUNT(DISTINCT user_id) FROM posts WHERE technology_topic ='renewable energy' AND post_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "reference_sql": "SELECT COUNT(DISTINCT e.user_id) AS unique_users FROM posts p JOIN engagements e ON p.id = e.post_id WHERE p.post_text LIKE '%renewable energy%' AND DATE(p.post_date) > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts authors of posts instead of users who engaged; engagement requires a join with an engagement table"
    }
  },
  {
    "example_id": 1344,
    "prompt": "What is the average fabric cost for t-shirts?",
    "generated_sql": "SELECT AVG(cost) FROM fabric_costs WHERE material = 't-shirt';",
    "reference_sql": "SELECT AVG(Fabrics.cost) FROM Fabrics INNER JOIN Products ON Fabrics.id = Products.fabric_id WHERE Products.product_name = 'T-Shirt';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1345,
    "prompt": "What is the average price of cotton textiles sourced from the USA?",
    "generated_sql": "SELECT AVG(price) FROM textile_sourcing WHERE country = 'USA';",
    "reference_sql": "SELECT AVG(price) FROM sourcing WHERE material = 'cotton' AND country = 'USA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not filter for cotton textiles"
    }
  },
  {
    "example_id": 1346,
    "prompt": "What is the minimum donation amount for the 'Environmental Conservation' program in '2021'?",
    "generated_sql": "SELECT MIN(amount) FROM Donations WHERE program = 'Environmental Conservation' AND year = 2021;",
    "reference_sql": "SELECT MIN(donation_amount) FROM environmental_donations WHERE program = 'Environmental Conservation' AND YEAR(donation_date) = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1347,
    "prompt": "List all food recalls in the food_recalls table for the year 2020.",
    "generated_sql": "SELECT * FROM food_recalls WHERE year = 2020;",
    "reference_sql": "SELECT recall_id, recall_date, food_item FROM food_recalls WHERE EXTRACT(YEAR FROM recall_date) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a 'year' column; should filter by extracting the year from the recall date"
    }
  },
  {
    "example_id": 1348,
    "prompt": "What is the average weight of all shipments that originated from the United Kingdom in January 2022?",
    "generated_sql": "SELECT AVG(weight) FROM shipments WHERE origin_country = 'United Kingdom' AND shipment_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT AVG(weight) FROM Shipments WHERE origin_country = 'UK' AND shipment_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1349,
    "prompt": "How many genetic research projects were conducted in Africa?",
    "generated_sql": "SELECT COUNT(*) FROM projects WHERE location LIKE 'Africa%';",
    "reference_sql": "SELECT COUNT(*) FROM projects WHERE location = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for genetic research projects"
    }
  },
  {
    "example_id": 1350,
    "prompt": "What is the total funding for biotech startups in Texas?",
    "generated_sql": "SELECT SUM(funding_amount) FROM biotech_startups WHERE location = 'Texas';",
    "reference_sql": "SELECT SUM(funding) FROM biotech.startups WHERE location = 'Texas';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1351,
    "prompt": "What is the total budget and number of departments for each manager?",
    "generated_sql": "SELECT manager_id, SUM(budget) as total_budget, COUNT(DISTINCT department) as departments FROM budgets GROUP BY manager_id;",
    "reference_sql": "SELECT m.Name AS ManagerName, SUM(d.Budget) AS TotalBudget, COUNT(d.id) AS NumberOfDepartments FROM Manager m JOIN Department d ON m.id = d.ManagerID GROUP BY m.Name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1352,
    "prompt": "How many graduate students are enrolled in the Computer Science program?",
    "generated_sql": "SELECT COUNT(*) FROM student WHERE program = 'Computer Science';",
    "reference_sql": "SELECT COUNT(*) FROM GraduateStudents WHERE Department = 'Computer Science' AND StudentID IN (SELECT StudentID FROM Enrollment);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for graduate students"
    }
  },
  {
    "example_id": 1353,
    "prompt": "Which community health workers have served the most patients from underrepresented communities in the last year?",
    "generated_sql": "SELECT name FROM community_health_workers WHERE last_service_date >= DATEADD(year, -1, GETDATE()) AND community_population_under_representation > 0;",
    "reference_sql": "SELECT community_type, worker_name, SUM(patients_served) as total_patients_served FROM community_workers WHERE year = 2021 AND community_type IN ('African American', 'Hispanic', 'LGBTQ+') GROUP BY community_type, worker_name ORDER BY total_patients_served DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not count or rank workers by number of underrepresented patients served"
    }
  },
  {
    "example_id": 1354,
    "prompt": "How many sustainable tourism initiatives were implemented in South America in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM sustainable_tourism_initiatives WHERE country = 'South America' AND year = 2021;",
    "reference_sql": "SELECT SUM(num_initiatives) FROM sustainable_tourism_initiatives WHERE country IN ('Argentina', 'Colombia', 'Peru') AND year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on country = 'South America' misuses the country field instead of filtering by region"
    }
  },
  {
    "example_id": 1355,
    "prompt": "What are the average virtual tour engagement statistics for hotels in the APAC region in Q1 2022?",
    "generated_sql": "SELECT AVG(engagement_metrics.engagement_score) FROM engagement_metrics INNER JOIN hotels ON engagement_metrics.hotel_id = hotels.id WHERE engagement_metrics.region = 'APAC' AND engagement_metrics.quarter = 'Q1 2022';",
    "reference_sql": "SELECT region, AVG(q1_2022_views) AS avg_views, AVG(q1_2022_clicks) AS avg_clicks FROM avg_virtual_tour_stats WHERE region = 'APAC' GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on region should use hotels.region, not engagement_metrics.region"
    }
  },
  {
    "example_id": 1356,
    "prompt": "Which OTA websites have the highest revenue from hotel bookings in Asia?",
    "generated_sql": "SELECT ota_website, SUM(revenue) as total_revenue FROM bookings JOIN hotels ON bookings.hotel_id = hotels.hotel_id WHERE countries IN ('China', 'Japan','Korea', 'Vietnam','Thailand') GROUP BY ota_website ORDER BY total_revenue DESC;",
    "reference_sql": "SELECT ota_website, SUM(revenue) FROM ota_bookings INNER JOIN hotels ON ota_bookings.hotel_name = hotels.hotel_name WHERE country = 'Asia' GROUP BY ota_website ORDER BY SUM(revenue) DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on a hardcoded subset of countries and incorrect column name instead of all Asian countries or region indicator"
    }
  },
  {
    "example_id": 1357,
    "prompt": "What resources are managed by the Inuit community and in what quantities?",
    "generated_sql": "SELECT name, quantity FROM resources WHERE community = 'Inuit' AND quantity = (SELECT quantity FROM resources WHERE community = 'Inuit')",
    "reference_sql": "SELECT Indigenous_Communities.community_name, Resource_Management.resource_type, Resource_Management.quantity FROM Indigenous_Communities INNER JOIN Resource_Management ON Indigenous_Communities.id = Resource_Management.community_id WHERE Indigenous_Communities.community_name = 'Inuit';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query adds an unnecessary quantity filter with a subquery, which incorrectly restricts results instead of returning all Inuit resources"
    }
  },
  {
    "example_id": 1358,
    "prompt": "What's the name and category of art performed at community events in Seattle?",
    "generated_sql": "SELECT name, category FROM CommunityEvents WHERE event_location = 'Seattle' AND event_type = 'Performance';",
    "reference_sql": "SELECT e.City, e.EventName, a.ArtName FROM CommunityEvents e JOIN Arts a ON e.ArtCategory = a.ArtCategory;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering by event_type = 'Performance' does not ensure art performances specifically and may use incorrect column"
    }
  },
  {
    "example_id": 1359,
    "prompt": "Total number of therapy sessions in each region?",
    "generated_sql": "SELECT region, SUM(sessions) as total_sessions FROM therapy_sessions GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(*) as total_sessions FROM therapy_sessions GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1360,
    "prompt": "What is the most common mental health condition treated in France?",
    "generated_sql": "SELECT condition, COUNT(*) AS treatment_count FROM mental_health_treatment WHERE country = 'France' AND condition = 'Mental Health' GROUP BY condition ORDER BY treatment_count DESC;",
    "reference_sql": "SELECT treatment_type, COUNT(*) AS treatment_count FROM treatments JOIN patients ON patients.patient_id = treatments.patient_id WHERE patients.country = 'France' GROUP BY treatment_type ORDER BY treatment_count DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query restricts to condition = 'Mental Health' and lacks LIMIT 1, so it does not find the most common condition"
    }
  },
  {
    "example_id": 1361,
    "prompt": "List all destinations with a travel advisory level of 3 or lower",
    "generated_sql": "SELECT destination_id, name FROM travel_advisory WHERE advisory_level = '3' OR advisory_level = '3';",
    "reference_sql": "SELECT name FROM destinations WHERE travel_advisory_level <= 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Only selects advisory_level = 3 and duplicates condition; does not include levels 1 and 2"
    }
  },
  {
    "example_id": 1362,
    "prompt": "What is the total number of luxury hotel rooms in Japan?",
    "generated_sql": "SELECT COUNT(*) FROM LuxuryHotels WHERE country = 'Japan';",
    "reference_sql": "SELECT SUM(rooms) FROM hotels WHERE country = 'Japan' AND stars = 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) to count hotels instead of summing room counts"
    }
  },
  {
    "example_id": 1363,
    "prompt": "What is the total number of tourists who visited Australia and New Zealand in 2021, grouped by month?",
    "generated_sql": "SELECT MONTH(visit_date) as month, SUM(num_tourists) as total_tourists FROM tourism_data WHERE country IN ('Australia', 'New Zealand') AND visit_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month;",
    "reference_sql": "SELECT country, SUM(visitors) as total_visitors FROM tourism_stats WHERE country IN ('Australia', 'New Zealand') AND year = 2021 GROUP BY country, month;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1364,
    "prompt": "What are the different types of crimes committed in the urban and rural areas?",
    "generated_sql": "SELECT type, location FROM crimes WHERE type IN ('Crime in the rural area', 'Crime in the urban area') GROUP BY type;",
    "reference_sql": "SELECT Type FROM Crimes WHERE Area = 'Urban' UNION SELECT Type FROM Crimes WHERE Area = 'Rural';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on type instead of location and uses incorrect type values, not listing crime types by rural/urban areas"
    }
  },
  {
    "example_id": 1365,
    "prompt": "What is the percentage of legal aid clients in Los Angeles who have been homeless in the past year?",
    "generated_sql": "SELECT (COUNT(*) FILTER (WHERE homelessness = true) OVER (PARTITION BY state ORDER BY year)) * 100.0 / COUNT(*) FROM legal_aid WHERE state = 'Los Angeles' AND year = 2021;",
    "reference_sql": "SELECT (SUM(has_been_homeless) * 100.0 / COUNT(*)) AS percentage FROM legal_aid_clients WHERE city = 'Los Angeles';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters by state instead of city, hard-codes year, and misuses window functions instead of a simple aggregate to compute the percentage"
    }
  },
  {
    "example_id": 1366,
    "prompt": "What is the total number of cases heard by each judge in the 'criminal_cases' table, grouped by judge name?",
    "generated_sql": "SELECT judge_name, COUNT(*) as total_cases FROM criminal_cases GROUP BY judge_name;",
    "reference_sql": "SELECT judge_name, COUNT(*) as total_cases FROM criminal_cases GROUP BY judge_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1367,
    "prompt": "Calculate the percentage of vessels in each ocean basin that have outdated engine technology.",
    "generated_sql": "SELECT ocean_basin, AVG(engines.engines_in_use) AS avg_engines_in_use, PERCENTILE(avg_engines_in_use / (SELECT SUM(avg_engines_in_use)) FROM fleets WHERE fleets.vessel_id IN (SELECT vessel_id FROM fleet_engines WHERE fleet_id NOT IN (SELECT fleet_id FROM fleet_engines WHERE fleet_id = 2)) GROUP BY ocean_basin ORDER BY avg_engines_in_use DESC;",
    "reference_sql": "SELECT ocean_basin, PERCENTAGE_RANK() OVER (ORDER BY outdated_engine_count) FROM (SELECT ocean_basin, COUNT(*) FILTER (WHERE engine_technology < '2010-01-01') AS outdated_engine_count FROM fleet_information GROUP BY ocean_basin);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses AVG and PERCENTILE incorrectly and does not count vessels with outdated engine technology to compute their percentage per ocean basin."
    }
  },
  {
    "example_id": 1368,
    "prompt": "How many marine species are present in each type of marine life zone?",
    "generated_sql": "SELECT zone, COUNT(*) FROM marine_life_zones GROUP BY zone;",
    "reference_sql": "SELECT type, COUNT(DISTINCT name) species_count FROM species GROUP BY type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts entries in marine_life_zones, not species; missing join to species table"
    }
  },
  {
    "example_id": 1369,
    "prompt": "How many marine species are recorded in the Indian Ocean according to the species_inventory table?",
    "generated_sql": "SELECT COUNT(*) FROM marine_species_inventory WHERE region = 'Indian Ocean' AND name IN ('Spotted Eagle Owl', 'S Pacific Octopus', 'Pacific Octopus');",
    "reference_sql": "SELECT COUNT(*) FROM species_inventory WHERE region = 'Indian Ocean';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by specific species names instead of counting all species in the Indian Ocean"
    }
  },
  {
    "example_id": 1370,
    "prompt": "Identify the top 3 most preferred dishes among customers by rating?",
    "generated_sql": "SELECT DISTINCT dishes.dish_name, RANK() OVER (ORDER BY rating ASC) AS dish_rank FROM dishes;",
    "reference_sql": "SELECT dish_id, AVG(rating) as avg_rating FROM orders GROUP BY dish_id ORDER BY avg_rating DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses ascending order instead of descending and does not limit to top 3 results"
    }
  },
  {
    "example_id": 1371,
    "prompt": "Update military equipment sales records in the Pacific with a 10% increase.",
    "generated_sql": "UPDATE military_sales SET sales_increase = 10.0 WHERE product_id = 1;",
    "reference_sql": "UPDATE MilitaryEquipmentSales SET amount = amount * 1.1 WHERE region = 'Pacific';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Updates only product_id 1 and wrong column without filtering Pacific region or applying percentage increase"
    }
  },
  {
    "example_id": 1372,
    "prompt": "What is the geopolitical risk assessment score for each country in 2020?",
    "generated_sql": "SELECT country, assessment_score FROM geopolitical_risk_assessment WHERE year = 2020;",
    "reference_sql": "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1373,
    "prompt": "What is the total value of military equipment sales to Africa in the last 12 months?",
    "generated_sql": "SELECT SUM(Sales) FROM MilitaryEquipmentSales WHERE Country = 'Africa' AND SaleDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH);",
    "reference_sql": "SELECT SUM(sale_value) FROM Military_Equipment_Sales WHERE country IN (SELECT country FROM World_Countries WHERE continent = 'Africa') AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on Country = 'Africa' is incorrect; should filter by continent or region rather than country."
    }
  },
  {
    "example_id": 1374,
    "prompt": "Which air defense system contractor had the most contracts?",
    "generated_sql": "SELECT contractor, COUNT(*) FROM contract_details WHERE contractor = 'Air Defense Contractor' GROUP BY contractor HAVING COUNT(*) > 1;",
    "reference_sql": "SELECT contractor_name, COUNT(*) FROM Contractors WHERE system_type = 'air defense' GROUP BY contractor_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters for a specific contractor and does not compute the contractor with the highest contract count"
    }
  },
  {
    "example_id": 1375,
    "prompt": "Delete all records of workers who were employed in the 'survey' department in the year 2019.",
    "generated_sql": "DELETE FROM workers WHERE department ='survey' AND year = 2019;",
    "reference_sql": "DELETE FROM workers WHERE department = 'survey' AND year = 2019;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1376,
    "prompt": "Identify the mining methods used for each mineral in the \"mining_methods\" table.",
    "generated_sql": "SELECT mining_method FROM mining_methods;",
    "reference_sql": "SELECT mineral, method FROM mining_methods;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only selects mining_method and omits the mineral column required by the question"
    }
  },
  {
    "example_id": 1377,
    "prompt": "Update the \"production_data\" table to set the \"productivity_score\" to 95 for all records where the \"mine_name\" is 'Golden Hills'",
    "generated_sql": "UPDATE production_data SET productivity_score = 95 WHERE mine_name = 'Golden Hills';",
    "reference_sql": "UPDATE production_data SET productivity_score = 95 WHERE mine_name = 'Golden Hills';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1378,
    "prompt": "Count the number of mining incidents per month in 2021.",
    "generated_sql": "SELECT EXTRACT(MONTH FROM incident_date) AS month_index, COUNT(*) FROM incidents WHERE EXTRACT(YEAR FROM incident_date) = 2021 GROUP BY month_index;",
    "reference_sql": "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1379,
    "prompt": "What is the percentage of women in the Mining department?",
    "generated_sql": "SELECT (COUNT(CASE WHEN gender = 'female' THEN 1 END) * 100.0 / COUNT(*)) as pct FROM departments WHERE department_name = 'Mining';",
    "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Employees WHERE Department = 'Mining')) AS Percentage FROM Employees WHERE Department = 'Mining' AND Gender = 'Female';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts from departments table instead of employees; needs to filter employee records in Mining department"
    }
  },
  {
    "example_id": 1380,
    "prompt": "Delete broadband subscribers who have used more than 200GB of data in the last month.",
    "generated_sql": "DELETE FROM broadband_subscribers WHERE data_usage > 200 AND usage_date >= DATEADD(month, -1, GETDATE());",
    "reference_sql": "DELETE FROM broadband_subscribers WHERE subscriber_id IN (SELECT subscriber_id FROM excessive_data_users WHERE data_usage_gb > 200);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters individual usage records rather than summing total monthly usage per subscriber"
    }
  },
  {
    "example_id": 1381,
    "prompt": "Update the investment type for a record in the network_investments table",
    "generated_sql": "UPDATE network_investments SET investment_type = 'Investment Type B' WHERE asset_id = 1;",
    "reference_sql": "UPDATE network_investments SET investment_type = 'Fiber Expansion' WHERE investment_id = 67890;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1382,
    "prompt": "Which broadband subscribers have a download speed greater than 300 Mbps?",
    "generated_sql": "SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;",
    "reference_sql": "SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1383,
    "prompt": "Who is the oldest artist from the United States?",
    "generated_sql": "SELECT artists.name FROM artists INNER JOIN artists ON artists.id = artists.artist_id WHERE artists.country = 'USA';",
    "reference_sql": "SELECT name, MAX(age) FROM artists WHERE country = 'United States';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not compute or filter for the oldest artist and uses an incorrect self-join"
    }
  },
  {
    "example_id": 1384,
    "prompt": "Find the number of articles published by each author in the 'investigative_reports' table.",
    "generated_sql": "SELECT author_name, COUNT(*) as article_count FROM investigative_reports GROUP BY author_name;",
    "reference_sql": "SELECT author, COUNT(*) FROM investigative_reports GROUP BY author;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1385,
    "prompt": "How many articles were published by each author in the 'reports' table, broken down by topic?",
    "generated_sql": "SELECT author_id, topic, COUNT(*) as num_articles FROM reports GROUP BY author_id, topic;",
    "reference_sql": "SELECT author, topic, COUNT(*) as articles_count FROM reports GROUP BY author, topic;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1386,
    "prompt": "How many donations were made in each country, based on the 'donations' and 'countries' tables?",
    "generated_sql": "SELECT country, COUNT(*) FROM donations GROUP BY country;",
    "reference_sql": "SELECT countries.country_name, COUNT(donations.id) FROM countries INNER JOIN donations ON countries.id = donations.donor_country_id GROUP BY countries.country_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not join donations with countries to retrieve country names"
    }
  },
  {
    "example_id": 1387,
    "prompt": "What is the total number of grants given per city?",
    "generated_sql": "SELECT city, COUNT(*) FROM grants GROUP BY city;",
    "reference_sql": "SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1388,
    "prompt": "What was the total donation amount by each organization in the last 30 days?",
    "generated_sql": "SELECT o.org_name, SUM(o.donation_amount) as total_donation_amount FROM organizations o JOIN donations d ON o.org_id = d.org_id WHERE d.event_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY o.org_name;",
    "reference_sql": "SELECT organization, SUM(donation_amount) FROM organization_donations WHERE donation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY organization;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "SUM is applied to o.donation_amount instead of d.donation_amount"
    }
  },
  {
    "example_id": 1389,
    "prompt": "Add a new 'underwater_camera' record to the 'equipment' table for 'GoPro' with 'status' 'inactive'.",
    "generated_sql": "INSERT INTO equipment (id, name, status) VALUES (4, 'GoPro', 'inactive');",
    "reference_sql": "INSERT INTO equipment (equipment_id, equipment_name, manufacturer, status) VALUES (6, 'underwater_camera', 'GoPro', 'inactive');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing column for equipment type ('underwater_camera')"
    }
  },
  {
    "example_id": 1390,
    "prompt": "Find ship incidents involving oil tankers in the North Sea",
    "generated_sql": "SELECT * FROM Ship_Incidents WHERE Ship_Name LIKE 'Oil_Tankers%' AND Country = 'North Sea';",
    "reference_sql": "SELECT ship_name, incident_type FROM Ship_Incidents WHERE ship_type = 'oil tanker' AND location IN ('North Sea');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on Ship_Name with LIKE and Country='North Sea' instead of filtering by ship type='Oil Tanker' and region='North Sea' fields."
    }
  },
  {
    "example_id": 1391,
    "prompt": "How many species are there in each ocean basin?",
    "generated_sql": "SELECT ocean, COUNT(*) FROM ocean_bodies GROUP BY ocean;",
    "reference_sql": "SELECT ocean_basin, species_number FROM species_count;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts rows in ocean_bodies table instead of counting species per basin; missing species data and join"
    }
  },
  {
    "example_id": 1392,
    "prompt": "What is the maximum year a deep-sea exploration was conducted?",
    "generated_sql": "SELECT MAX(year) FROM deep_sea_exploration;",
    "reference_sql": "SELECT MAX(year) FROM deep_sea_exploration;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1393,
    "prompt": "What is the total amount donated by new and returning donors?",
    "generated_sql": "SELECT SUM(amount_donated) FROM donations WHERE donor_id IN (SELECT donor_id FROM new_donors) AND donor_id IN (SELECT donor_id FROM returning_donors);",
    "reference_sql": "SELECT DonorType, SUM(DonationAmount) AS TotalDonation FROM DonorTypes GROUP BY DonorType;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses AND, returning only donors in both new and returning groups instead of OR for both"
    }
  },
  {
    "example_id": 1394,
    "prompt": "What is the total donation amount for each year?",
    "generated_sql": "SELECT year, SUM(donation_amount) FROM Donations WHERE donation_date >= '2018-01-01' AND donation_date < '2021-01-01' GROUP BY year;",
    "reference_sql": "SELECT * FROM yearly_donations;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly restricts donations to 2018\u20132020, but the question asks for totals for each year without such a filter."
    }
  },
  {
    "example_id": 1395,
    "prompt": "How many users have adopted VR technology in India?",
    "generated_sql": "SELECT SUM(CASE WHEN is_VR_adopted THEN 1 ELSE 0 END) as num_user_adoption FROM user_data WHERE region = 'India';",
    "reference_sql": "SELECT COUNT(DISTINCT user_id) FROM users_technology WHERE has_vr = TRUE",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1396,
    "prompt": "What is the maximum number of games played concurrently by a player, for each platform?",
    "generated_sql": "SELECT platform, MAX(games_played) FROM Players GROUP BY platform;",
    "reference_sql": "SELECT Platform, MAX(MaxGames) as MaxConcurrentGames FROM PlayerGames GROUP BY Platform;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1397,
    "prompt": "What is the average temperature in region 'Northwest' for the past week, grouped by day?",
    "generated_sql": "SELECT region, DATE_FORMAT(temp, '%H') AS hour, AVG(temp) FROM temperature WHERE timestamp >= DATEADD(day, -6, GETDATE()) GROUP BY region, hour;",
    "reference_sql": "SELECT DATE(time) as date, AVG(temperature) as avg_temp FROM weather_data WHERE region = 'Northwest' AND time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY DATE(time)",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for region 'Northwest', grouping by hour instead of day, and formatting the temp column instead of the timestamp"
    }
  },
  {
    "example_id": 1398,
    "prompt": "What is the total number of IoT sensors in Brazil as of today?",
    "generated_sql": "SELECT COUNT(*) FROM sensor_data WHERE country = 'Brazil' AND timestamp >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY) AND sensor_type = 'IoT';",
    "reference_sql": "SELECT COUNT(id) FROM iot_sensors WHERE location = 'Brazil' AND installed_date <= CURDATE();",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts recent readings instead of the total number of distinct IoT sensors registered in Brazil as of today."
    }
  },
  {
    "example_id": 1399,
    "prompt": "Add a new record to the \"PolicyImpact\" table",
    "generated_sql": "INSERT INTO PolicyImpact (id, policy_id, impact) VALUES (1, 1, 'Low Impact');",
    "reference_sql": "INSERT INTO PolicyImpact (ID, Policy, Impact, StartDate, EndDate) VALUES (3002, 'Community Policing', 'Increase in community trust by 30%', '2021-01-01', '2022-12-31');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1400,
    "prompt": "What is the maximum co-ownership duration for properties in the neighborhood of 'Chinatown' in San Francisco?'",
    "generated_sql": "SELECT MAX(co_ownership_duration) FROM co_ownership_data WHERE property_location = 'Chinatown' AND neighborhood = 'San Francisco';",
    "reference_sql": "SELECT MAX(DATEDIFF(end_date, start_date)) as max_duration FROM co_ownership JOIN properties ON co_ownership.property_id = properties.property_id WHERE properties.city = 'San Francisco' AND name = 'Chinatown';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters are swapped; should use neighborhood = 'Chinatown' and city = 'San Francisco' instead of property_location and neighborhood."
    }
  },
  {
    "example_id": 1401,
    "prompt": "Show the total energy efficiency improvement (in %) for each energy policy in India since 2015",
    "generated_sql": "SELECT PolicyName, SUM(ImprovedEnergyWattage) FROM EnergyPolicyHistory WHERE PolicyID = (SELECT PolicyID FROM EnergyPolicyHistory WHERE Country = 'India') AND Year BETWEEN 2015 AND 2021 GROUP BY PolicyName;",
    "reference_sql": "SELECT policy_name, improvement_percentage FROM india_energy_policies WHERE enactment_date <= '2015-01-01' AND country = 'India';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Wrong filtering by PolicyID subquery instead of Country and wrong aggregation column; does not compute percentage improvement"
    }
  },
  {
    "example_id": 1402,
    "prompt": "What is the combined energy output of all hydro power projects in South America?",
    "generated_sql": "SELECT energy_output FROM hydro_projects WHERE region = 'South America';",
    "reference_sql": "SELECT SUM(capacity) FROM project_south_america WHERE type = 'Hydro';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not sum energy_output; it returns individual values instead of a combined total."
    }
  },
  {
    "example_id": 1403,
    "prompt": "What is the total installed capacity of renewable energy projects in the state of Florida, grouped by project type and project location?",
    "generated_sql": "SELECT project_type, project_location, SUM(capacity) FROM renewable_projects WHERE state = 'Florida' GROUP BY project_type;",
    "reference_sql": "SELECT project_type, project_location, SUM(installed_capacity) FROM fl_projects WHERE state = 'Florida' GROUP BY project_type, project_location;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups only by project_type and not by project_location, missing project_location in GROUP BY"
    }
  },
  {
    "example_id": 1404,
    "prompt": "How many restaurants serve Mexican food and have a revenue greater than $8000?",
    "generated_sql": "SELECT COUNT(*) FROM RestaurantSales WHERE cuisine = 'Mexican' AND revenue > 8000;",
    "reference_sql": "SELECT COUNT(*) FROM Restaurants WHERE type = 'Mexican' AND revenue > 8000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1405,
    "prompt": "What is the total cost of ingredients for each menu item, including their organic premium?",
    "generated_sql": "SELECT menu_item, SUM(cost) FROM ingredients JOIN menu_items ON ingredients.menu_item_id = menu_items.menu_item_id WHERE cost_organic = true GROUP BY menu_item;",
    "reference_sql": "SELECT item_name, base_cost + organic_premium as total_cost FROM menu_items;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query only sums costs for organic ingredients and omits non-organic ones and the organic premium calculation."
    }
  },
  {
    "example_id": 1406,
    "prompt": "Find the number of operational spacecraft manufactured by SpaceX.",
    "generated_sql": "SELECT COUNT(*) FROM Spacecraft WHERE Manufacturer = 'SpaceX';",
    "reference_sql": "SELECT COUNT(*) FROM Spacecrafts WHERE Manufacturer = 'SpaceX' AND Operational = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for operational spacecraft, only filters by manufacturer"
    }
  },
  {
    "example_id": 1407,
    "prompt": "What are the names of space telescopes launched by NASA between 1990 and 2010?",
    "generated_sql": "SELECT name FROM telescopes WHERE launch_date BETWEEN '1990-01-01' AND '2010-12-31';",
    "reference_sql": "SELECT name FROM SpaceTelescopes WHERE country = 'United States' AND launch_date BETWEEN '1990-01-01' AND '2010-12-31' AND type = 'Space Telescope'",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to restrict telescopes to those launched by NASA"
    }
  },
  {
    "example_id": 1408,
    "prompt": "What is the earliest launch date of a spacecraft by any agency?",
    "generated_sql": "SELECT agency, MIN(launch_date) FROM Spacecraft_Launches GROUP BY agency;",
    "reference_sql": "SELECT MIN(launch_date) FROM space_missions;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query returns the earliest launch per agency instead of the single overall earliest launch"
    }
  },
  {
    "example_id": 1409,
    "prompt": "What is the maximum height of an astronaut?",
    "generated_sql": "SELECT MAX(max_height) FROM Astronaut;",
    "reference_sql": "SELECT MAX(height) FROM MedicalProfiles;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MAX(max_height) instead of MAX(height)"
    }
  },
  {
    "example_id": 1410,
    "prompt": "update the age of the athlete with id 100 in the athletes table",
    "generated_sql": "UPDATE athletes SET age = 25 WHERE id = 100;",
    "reference_sql": "UPDATE athletes SET age = 26 WHERE id = 100;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1411,
    "prompt": "Delete all records from the 'routes' table where the 'route_name' is 'Green Line'",
    "generated_sql": "DELETE FROM routes WHERE route_name = 'Green Line';",
    "reference_sql": "DELETE FROM routes WHERE route_name = 'Green Line';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1412,
    "prompt": "Find the top 3 most popular garment types sold in the European market.",
    "generated_sql": "SELECT type, COUNT(*) as count FROM garment_sales WHERE country = 'Europe' GROUP BY type ORDER BY count DESC LIMIT 3;",
    "reference_sql": "SELECT garment_type, SUM(quantity) as total_quantity FROM garment_sales WHERE region = 'Europe' GROUP BY garment_type ORDER BY total_quantity DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters country = 'Europe' instead of region or market and counts rows rather than summing quantities"
    }
  },
  {
    "example_id": 1413,
    "prompt": "Identify the top 3 garments by total sales in each region.",
    "generated_sql": "SELECT r.region, SUM(s.sales) AS total_sales, r.value FROM garments g INNER JOIN sales s ON g.id = s.garment_id GROUP BY r.region ORDER BY total_sales DESC LIMIT 3;",
    "reference_sql": "SELECT region, garment_id, total_sold, RANK() OVER (PARTITION BY region ORDER BY total_sold DESC) as sales_rank FROM top_selling_garments_by_region WHERE sales_rank <= 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups only by region and does not select garments or compute top 3 per region; also references undefined alias r."
    }
  },
  {
    "example_id": 1414,
    "prompt": "Update the sustainability_metrics table to reflect the latest CO2 emissions data for garment production in Asia.",
    "generated_sql": "UPDATE sustainability_metrics SET CO2_emissions = 1555 WHERE region = 'Asia' AND sustainability = true;",
    "reference_sql": "UPDATE sustainability_metrics SET co2_emissions = 160 WHERE region = 'Asia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for garment production and uses an arbitrary CO2 value without specification."
    }
  },
  {
    "example_id": 1415,
    "prompt": "How many claims were processed for each policy type in the Underwriting department in Q3 2022?",
    "generated_sql": "SELECT policy_type, COUNT(claim_id) as claim_count FROM Underwriting WHERE claim_date BETWEEN '2022-07-01' AND '2022-09-30' GROUP BY policy_type;",
    "reference_sql": "SELECT PolicyType, COUNT(*) as TotalClaims FROM Claims WHERE ProcessingDepartment = 'Underwriting' AND ProcessingDate BETWEEN '2022-07-01' AND '2022-09-30' GROUP BY PolicyType;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for the Underwriting department; query uses the Underwriting table instead of filtering a department column"
    }
  },
  {
    "example_id": 1416,
    "prompt": "What is the average claim amount for policyholders with multiple claims in the last 6 months?",
    "generated_sql": "SELECT AVG(claim_amount) FROM claims WHERE claim_date >= DATEADD(month, -6, GETDATE());",
    "reference_sql": "SELECT PolicyholderID, AVG(ClaimAmount) AS AvgClaimAmount FROM (SELECT PolicyholderID, ClaimAmount FROM Claims WHERE ClaimDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY PolicyholderID, ClaimAmount HAVING COUNT(DISTINCT PolicyholderID) > 1) AS Subquery GROUP BY PolicyholderID;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not restrict to policyholders with multiple claims in the last 6 months"
    }
  },
  {
    "example_id": 1417,
    "prompt": "What is the maximum claim amount for pet insurance policies?",
    "generated_sql": "SELECT MAX(claim_amount) FROM Claims WHERE policy_type = 'Pet Insurance';",
    "reference_sql": "SELECT MAX(ClaimAmount) FROM PetPolicies;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1418,
    "prompt": "Delete all records of workplaces in the state of Georgia.",
    "generated_sql": "DELETE FROM work_parks WHERE state = 'Georgia';",
    "reference_sql": "DELETE FROM workplaces WHERE state = 'Georgia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "wrong table name (should delete from workplaces, not work_parks)"
    }
  },
  {
    "example_id": 1419,
    "prompt": "List unions with more than 3 workplaces and their average rates.",
    "generated_sql": "SELECT unions.name, AVG(workers.rate) FROM workers JOIN unions ON workers.unite_id = unions.id GROUP BY unions.name ORDER BY AVG(workers.rate) DESC LIMIT 3;",
    "reference_sql": "SELECT union_id, AVG(injury_rate) as avg_injury_rate FROM union_workplaces GROUP BY union_id HAVING COUNT(*) > 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter unions by count of workplaces > 3 and incorrectly uses workers table instead of workplaces"
    }
  },
  {
    "example_id": 1420,
    "prompt": "What is the maximum number of union members in workplaces that have successful collective bargaining in the tech sector?",
    "generated_sql": "SELECT MAX(num_members) FROM workplaces WHERE union_status ='successful' AND sector = 'tech';",
    "reference_sql": "SELECT MAX(union_members) FROM workplaces WHERE successful_cb = TRUE AND sector = 'tech';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1421,
    "prompt": "What is the percentage of union members in the construction sector who are people of color?",
    "generated_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM union_membership WHERE sector = 'Construction') AS percentage FROM union_membership WHERE ethnicity IN ('Black', 'Hispanic', 'Asian', 'Pacific Islander');",
    "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM construction WHERE union_member = TRUE)) FROM construction WHERE race IN ('Black', 'Hispanic', 'Asian');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Numerator does not filter for sector = 'Construction', so counts POC across all sectors instead of just construction"
    }
  },
  {
    "example_id": 1422,
    "prompt": "Delete all vehicles with a safety rating below 4.0 in the \"vehicle_safety\" table.",
    "generated_sql": "DELETE FROM vehicle_safety WHERE safety_rating < 4.0;",
    "reference_sql": "DELETE FROM vehicle_safety WHERE safety_rating < 4.0;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1423,
    "prompt": "Delete records from the safety_records table where the status is 'Failed' and the inspection_date is after '2022-06-01'",
    "generated_sql": "DELETE FROM safety_records WHERE inspection_date > '2022-06-01';",
    "reference_sql": "DELETE FROM safety_records WHERE status = 'Failed' AND inspection_date > '2022-06-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing status = 'Failed' condition"
    }
  },
  {
    "example_id": 1424,
    "prompt": "Which vessels have traveled between the Port of Santos and the Port of Hong Kong, and what is the median travel time (in days)?",
    "generated_sql": "SELECT vessel_name, MIN(travel_time) as median_travel_time FROM Vessel WHERE port_id IN (SELECT port_id FROM Port WHERE country = 'Port of Santos') AND port_id IN (SELECT port_id FROM Port WHERE country = 'Port of Hong Kong');",
    "reference_sql": "SELECT vessel_id, MEDIAN(travel_time) as median_travel_time FROM VesselTravel WHERE route = 3 GROUP BY vessel_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MIN instead of median and filters port_id incorrectly without identifying voyages between the two specific ports"
    }
  },
  {
    "example_id": 1425,
    "prompt": "What is the distribution of visitor age groups across museums?",
    "generated_sql": "SELECT m.museum_name, COUNT(v.visitor_id) AS num_visitors, (COUNT(DISTINCT m.visitor_age) * 100.0/COUNT(DISTINCT v.visitor_id)) / SUM(DISTINCT v.visitor_age) AS age_distribution FROM museum_visitors m JOIN museums mv ON m.museum_id = mv.museum_id GROUP BY m.museum_name;",
    "reference_sql": "SELECT museum_id, CASE WHEN age BETWEEN 0 AND 17 THEN 'Children' WHEN age BETWEEN 18 AND 35 THEN 'Young Adults' WHEN age BETWEEN 36 AND 55 THEN 'Adults' ELSE 'Seniors' END as age_group, COUNT(*) as visitor_count FROM MuseumVisitors GROUP BY museum_id, age_group;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not define or group visitor age groups and uses incorrect aggregation for age distribution"
    }
  },
  {
    "example_id": 1426,
    "prompt": "Update recycling initiative records in Paris in 2022",
    "generated_sql": "UPDATE Recycling_Initiatives SET Recycling_Amount = 3000000 WHERE City = 'Paris' AND Year = 2022;",
    "reference_sql": "UPDATE recycling_initiatives SET initiative_type = 'Composting' WHERE year = 2022 AND city = 'Paris';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query arbitrarily sets Recycling_Amount to 3000000 without specification from the question"
    }
  },
  {
    "example_id": 1427,
    "prompt": "What is the total landfill capacity in Japan and China?",
    "generated_sql": "SELECT SUM(capacity) FROM landfill_capacity WHERE country IN ('Japan', 'China');",
    "reference_sql": "SELECT SUM(capacity) FROM LandfillCapacity WHERE country IN ('Japan', 'China')",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1428,
    "prompt": "Find the number of wastewater treatment plants in California and Texas.",
    "generated_sql": "SELECT plant_count, COUNT(*) FROM wastewater_plants WHERE state IN ('California', 'Texas') GROUP BY plant_count;",
    "reference_sql": "SELECT num_plants FROM treatment_plants WHERE state IN ('California', 'Texas')",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by plant_count instead of state and selects incorrect column"
    }
  },
  {
    "example_id": 1429,
    "prompt": "Show the water usage distribution by city in 'RegionE'",
    "generated_sql": "SELECT city, water_usage FROM RegionE;",
    "reference_sql": "SELECT city, water_usage FROM City_Water_Usage WHERE region = 'RegionE' ORDER BY water_usage;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not aggregate water usage by city; needs GROUP BY and SUM"
    }
  },
  {
    "example_id": 1430,
    "prompt": "Calculate the maximum duration of any workout for users aged 40-50.",
    "generated_sql": "SELECT MAX(Duration) FROM UserPlayers WHERE Age BETWEEN 40 AND 50;",
    "reference_sql": "SELECT MAX(duration) FROM workouts w JOIN users u ON w.user_id = u.id WHERE u.age BETWEEN 40 AND 50;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses UserPlayers table instead of workouts table; missing workout join"
    }
  },
  {
    "example_id": 1431,
    "prompt": "What is the average safety score for AI models in the healthcare industry?",
    "generated_sql": "SELECT AVG(safety_score) FROM ai_models_healthcare;",
    "reference_sql": "SELECT industry, AVG(safety_score) FROM ai_models WHERE industry = 'Healthcare' GROUP BY industry;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses a separate table ai_models_healthcare instead of filtering ai_models by industry='healthcare'"
    }
  },
  {
    "example_id": 1432,
    "prompt": "How many community development initiatives were started but not completed in Rwanda between 2017 and 2019?",
    "generated_sql": "SELECT COUNT(*) FROM community_development_initiatives WHERE country = 'Rwanda' AND start_year BETWEEN 2017 AND 2019;",
    "reference_sql": "SELECT COUNT(*) FROM CommunityDevelopment WHERE country = 'Rwanda' AND start_date BETWEEN '2017-01-01' AND '2019-12-31' AND completion_date IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing condition to filter for initiatives not completed"
    }
  },
  {
    "example_id": 1433,
    "prompt": "Insert new records into the 'rural_infrastructure' table for a new water supply project in Kenya",
    "generated_sql": "INSERT INTO rural_infrastructure (id, location, project_name, size, start_date, end_date, status) VALUES (1, 'Kenya', 'Water Supply Project', 30, '2022-01-01', '2023-01-01', 'pending');",
    "reference_sql": "INSERT INTO rural_infrastructure (id, project_name, country, sector) VALUES (1, 'Water Supply Project', 'Kenya', 'Water & Sanitation');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1434,
    "prompt": "What is the total number of agricultural innovation metrics reported in Brazil?",
    "generated_sql": "SELECT SUM(metric_count) FROM agricultural_metrics WHERE country = 'Brazil';",
    "reference_sql": "SELECT COUNT(*) FROM Metrics WHERE metric_type = 'Agricultural Innovation' AND country = 'Brazil';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It sums a non-existent metric_count field instead of counting the metric records for Brazil"
    }
  },
  {
    "example_id": 1435,
    "prompt": "Which rural infrastructure projects were completed before 2020 and their respective completion dates in the 'rural_infrastructure' table?",
    "generated_sql": "SELECT DATE_TRUNC('year', project_end) as year, project_name FROM rural_infrastructure WHERE project_end < '2020-01-01' UNION ALL SELECT DATE_TRUNC('year', project_start) as year, project_name FROM rural_infrastructure WHERE project_start < '2020-01-01' UNION ALL SELECT DATE_TRUNC('year', project_start) as year, project_name FROM rural_infrastructure WHERE project_start < '2020-01-01",
    "reference_sql": "SELECT project_name, completion_date FROM rural_infrastructure WHERE completion_date < '2020-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query includes project_start and uses DATE_TRUNC on year instead of returning actual completion dates; it also repeats unnecessary unions"
    }
  },
  {
    "example_id": 1436,
    "prompt": "How many times did the program \"Dance Performances\" occur in each borough of New York City in 2019?",
    "generated_sql": "SELECT borough, COUNT(*) FROM dance_performances WHERE year = 2019 GROUP BY borough;",
    "reference_sql": "SELECT Borough, COUNT(*) as EventCount FROM Events WHERE EventName = 'Dance Performances' AND Year = 2019 GROUP BY Borough;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter WHERE program = 'Dance Performances'"
    }
  },
  {
    "example_id": 1437,
    "prompt": "Insert a new record for a TV show with title \"ShowC\", genre \"Drama\", and release year 2020.",
    "generated_sql": "INSERT INTO shows (title, genre, release_year) VALUES ('ShowC', 'Drama', 2020);",
    "reference_sql": "INSERT INTO tv_shows (title, genre, release_year) VALUES ('ShowC', 'Drama', 2020);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1438,
    "prompt": "What is the minimum rating for movies released in 2021 and rated PG-13?",
    "generated_sql": "SELECT MIN(rating) FROM movies WHERE release_year = 2021 AND rating = (SELECT MIN(rating) FROM movies WHERE release_year = 2021);",
    "reference_sql": "SELECT MIN(rating) FROM MovieRatings WHERE release_date >= '2021-01-01' AND release_date < '2022-01-01' AND rating_category = 'PG-13';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not filter for PG-13 and incorrectly uses a subquery instead of directly filtering on rating = 'PG-13'"
    }
  },
  {
    "example_id": 1439,
    "prompt": "List the approved clinical trials for drug 'DrugX' in 2019?",
    "generated_sql": "SELECT approved_trials.id FROM approved_trials INNER JOIN drug_approval ON approved_trials.drug_id = drug_approval.drug_id WHERE approved_trials.drug_name = 'DrugX' AND approved_trials.approval_date BETWEEN '2019-01-01' AND '2019-12-31';",
    "reference_sql": "SELECT drug_name FROM clinical_trials_data WHERE drug_name = 'DrugX' AND approval_year = 2019 AND approval_status = 'Approved';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only returns trial IDs and omits other trial details"
    }
  },
  {
    "example_id": 1440,
    "prompt": "What is the average duration of clinical trials for a specific drug category?",
    "generated_sql": "SELECT DrugCategory, AVG(Duration) FROM ClinicalTrials WHERE DrugCategory = 'Drug1' GROUP BY DrugCategory;",
    "reference_sql": "SELECT AVG(trial_duration) FROM trial_duration WHERE drug_category = 'CategoryZ';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query uses hardcoded 'Drug1' instead of a parameter for the specific drug category"
    }
  },
  {
    "example_id": 1441,
    "prompt": "What is the most common age range for HIV patients in South Africa?",
    "generated_sql": "SELECT country, SUM(age) as total_age FROM patients WHERE status = 'HIV' GROUP BY country ORDER BY total_age DESC LIMIT 1;",
    "reference_sql": "SELECT age DIV 10 * 10 AS age_range, COUNT(*) FROM hiv_patients WHERE location = 'South Africa' GROUP BY age_range ORDER BY COUNT(*) DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums ages by country instead of counting patients per age range for South Africa"
    }
  },
  {
    "example_id": 1442,
    "prompt": "Calculate the percentage of inclusion efforts in the \"Midwest\" region.",
    "generated_sql": "SELECT (COUNT(*) FILTER (WHERE is_inclusion_effort = true) * 100.0 / COUNT(*)) FROM inclusion_efforts WHERE region = 'Midwest';",
    "reference_sql": "SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM inclusion_efforts) AS percentage FROM inclusion_efforts WHERE region = 'Midwest';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1443,
    "prompt": "What is the maximum depth of any trench in the Southern Ocean?",
    "generated_sql": "SELECT MAX(depth) FROM trench_depth WHERE location = 'Southern Ocean';",
    "reference_sql": "SELECT MAX(depth) FROM oceanography WHERE location = 'Southern Ocean Trench';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1444,
    "prompt": "Which ingredients are used in products that are not cruelty-free?",
    "generated_sql": "SELECT product_id FROM ingredient_usage WHERE ingredient LIKE '%%s%' OR ingredient LIKE '%s%' AND is_cruelty_free = false;",
    "reference_sql": "SELECT ingredient_name FROM ingredients JOIN product_ingredients ON ingredients.ingredient_id = product_ingredients.ingredient_id JOIN products ON product_ingredients.product_id = products.product_id WHERE products.cruelty_free = false;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query selects product_id instead of ingredients, has incorrect LIKE conditions, and does not join to the products table to filter non-cruelty-free products."
    }
  },
  {
    "example_id": 1445,
    "prompt": "How many veterans are employed by ABC company in California?",
    "generated_sql": "SELECT COUNT(*) FROM employee_count WHERE company = 'ABC' AND state = 'California';",
    "reference_sql": "SELECT SUM(num_veterans) FROM veteran_employment WHERE company = 'ABC' AND state = 'California';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing condition to filter only veteran employees"
    }
  },
  {
    "example_id": 1446,
    "prompt": "What is the average balance for customers in the West region?",
    "generated_sql": "SELECT AVG(balance) FROM customers WHERE region = 'West';",
    "reference_sql": "SELECT AVG(balance) FROM customers WHERE region = 'West';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1447,
    "prompt": "What is the maximum transaction amount for clients in the Americas region?",
    "generated_sql": "SELECT MAX(amount) FROM transactions WHERE region = 'Americas';",
    "reference_sql": "SELECT MAX(amount) FROM transactions JOIN clients ON transactions.client_id = clients.client_id WHERE clients.region = 'North America';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1448,
    "prompt": "Update the compliance status for a specific regulatory compliance record in the \"regulatory_compliance\" table",
    "generated_sql": "UPDATE regulatory_compliance SET compliance_status = 'Compliant' WHERE compliance_id = 1;",
    "reference_sql": "UPDATE regulatory_compliance SET is_compliant = false WHERE id = 2;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1449,
    "prompt": "How many employees have completed workforce development training in the textile sector in Bangladesh?",
    "generated_sql": "SELECT COUNT(*) FROM workforce_development WHERE country = 'Bangladesh' AND training_type = 'Workforce Development';",
    "reference_sql": "SELECT COUNT(DISTINCT e.employee_id) as num_employees FROM employees e JOIN trainings t ON e.sector = t.sector WHERE e.country = 'Bangladesh' AND t.training_name = 'Weaving Training';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query lacks filter for the textile sector and the completion status of the training."
    }
  },
  {
    "example_id": 1450,
    "prompt": "What is the average salary of workers in the 'manufacturing' industry across all regions?",
    "generated_sql": "SELECT AVG(salary) FROM (SELECT a.industry, a.region, a.salary FROM employees a JOIN jobs j ON a.id = j.id WHERE a.industry ='manufacturing' GROUP BY a.industry, a.region) as avg_salary;",
    "reference_sql": "SELECT AVG(salary) FROM workers INNER JOIN industries ON workers.region_id = regions.region_id WHERE industries.industry_name = 'manufacturing';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query unnecessarily groups by region and selects non-aggregated salary, yielding incorrect averages instead of the overall average"
    }
  },
  {
    "example_id": 1451,
    "prompt": "What is the average budget allocated for cybersecurity operations in the last 3 years?",
    "generated_sql": "SELECT AVG(budget) FROM (SELECT budget FROM cybersecurity_operations WHERE date >= DATEADD(year, -3, GETDATE()) GROUP BY budget DESC LIMIT 1) AS subquery WHERE budget IS NOT NULL;",
    "reference_sql": "SELECT AVG(amount) FROM budget WHERE category = 'Cybersecurity' AND fiscal_year BETWEEN 2019 AND 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query wrongly limits to one budget value and uses GROUP BY incorrectly, instead of averaging all budgets over the last 3 years."
    }
  },
  {
    "example_id": 1452,
    "prompt": "What is the distribution of lifelong learning course enrollments by age group, in total?",
    "generated_sql": "SELECT o.age_group, SUM(o.enrollment_count) FROM lifelong_learning.enrollments o GROUP BY o.age_group;",
    "reference_sql": "SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1453,
    "prompt": "Which students have improved their mental health score the most?",
    "generated_sql": "SELECT student_id, mental_health_score FROM student_mental_health GROUP BY student_id ORDER BY mental_health_score DESC LIMIT 1;",
    "reference_sql": "SELECT student_id, MAX(score) - MIN(score) as score_improvement FROM student_mental_health GROUP BY student_id ORDER BY score_improvement DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query orders by current score not improvement; does not compute difference between scores"
    }
  },
  {
    "example_id": 1454,
    "prompt": "What is the average salary of employees in each position?",
    "generated_sql": "SELECT EmployeeID, AVG(Salary) as AvgSalary FROM Employees GROUP BY EmployeeID;",
    "reference_sql": "SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by EmployeeID instead of Position"
    }
  },
  {
    "example_id": 1455,
    "prompt": "What is the total energy produced by renewable sources in Germany for the year 2020?",
    "generated_sql": "SELECT SUM(energy_produced) FROM (SELECT energy_produced FROM energy_production WHERE country = 'Germany' AND year = 2020) as total_energy_produced FROM energy_production WHERE country = 'Germany' AND year = 2020;",
    "reference_sql": "SELECT SUM(energy_produced) FROM renewable_energy WHERE country = 'Germany' AND year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query omits filtering for renewable sources and has incorrect subquery syntax"
    }
  },
  {
    "example_id": 1456,
    "prompt": "How many games have been played in the 'NHL' league since the year 2000?",
    "generated_sql": "SELECT COUNT(*) FROM NHL_games WHERE league = 'NHL' AND year BETWEEN 2000 AND 2020;",
    "reference_sql": "SELECT COUNT(*) FROM games WHERE league = 'NHL' AND year >= 2000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly restricts the end year to 2020 instead of including all years since 2000"
    }
  },
  {
    "example_id": 1457,
    "prompt": "What is the number of fans engaging with each team's social media on a daily basis?",
    "generated_sql": "SELECT teams.team_name, COUNT(DISTINCT fans.id) AS daily_fans_count FROM fans INNER JOIN teams ON fans.team_id = teams.team_id GROUP BY teams.team_name;",
    "reference_sql": "SELECT team, AVG(engagement) FROM social_media GROUP BY team;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not group by date for daily counts and uses distinct fans instead of daily engagement records"
    }
  },
  {
    "example_id": 1458,
    "prompt": "What is the minimum number of team members in 'disaster_response_teams' table?",
    "generated_sql": "SELECT MIN(team_members) FROM disaster_response_teams;",
    "reference_sql": "SELECT MIN(team_size) as min_team_size FROM disaster_response_teams;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1459,
    "prompt": "What is the total amount of funds raised by NGOs for disaster relief efforts in Africa in the year 2019?",
    "generated_sql": "SELECT SUM(fund_raised) FROM FundRevenue WHERE country = 'Africa' AND year = 2019;",
    "reference_sql": "SELECT SUM(amount) FROM ngo_funds WHERE region = 'Africa' AND year = 2019;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for NGO-funded disaster relief efforts and misuses country filter for continent"
    }
  },
  {
    "example_id": 1460,
    "prompt": "Which region has the highest average shelter capacity?",
    "generated_sql": "SELECT region, AVG(capacity) as avg_capacity FROM shelters GROUP BY region ORDER BY avg_capacity DESC;",
    "reference_sql": "SELECT region_id, AVG(capacity) as avg_capacity FROM shelter GROUP BY region_id ORDER BY avg_capacity DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing LIMIT 1 to return only the top region"
    }
  },
  {
    "example_id": 1461,
    "prompt": "What is the minimum price of devices produced by companies located in underrepresented communities?",
    "generated_sql": "SELECT MIN(price) FROM devices WHERE production_community = 'Underrepresented Community';",
    "reference_sql": "SELECT MIN(price) FROM Devices WHERE community IN ('Minority Owned Business', 'Women Owned Business', 'Non-Profit');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "No join to companies table to filter by company location; assumes incorrect column"
    }
  },
  {
    "example_id": 1462,
    "prompt": "What is the maximum number of likes received by a single post in India?",
    "generated_sql": "SELECT MAX(likes) FROM post_likes WHERE country = 'India';",
    "reference_sql": "SELECT MAX(likes) FROM (SELECT post_id, COUNT(*) AS likes FROM post_likes WHERE country = 'IN' GROUP BY post_id) AS post_likes_in;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1463,
    "prompt": "How many size 16 customers have made a purchase in the last month?",
    "generated_sql": "SELECT COUNT(*) FROM size_3_customers WHERE SUM(quantity_sold) > 0 AND EXTRACT(MONTH FROM purchase_date) = 1 AND EXTRACT(YEAR FROM purchase_date) = 2022;",
    "reference_sql": "SELECT COUNT(*) FROM customers WHERE size = 16 AND last_purchase >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses wrong table, misuses SUM in WHERE, and hard-codes month/year instead of last month"
    }
  },
  {
    "example_id": 1464,
    "prompt": "What is the total quantity of sustainable fabric used by each supplier?",
    "generated_sql": "SELECT supplier_id, SUM(quantity) FROM suppliers GROUP BY supplier_id;",
    "reference_sql": "SELECT SupplierName, SUM(Quantity) as TotalQuantity FROM FabricSuppliers WHERE IsSustainable = true GROUP BY SupplierName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for sustainable fabric and uses quantities from the suppliers table instead of joining with fabric usage data."
    }
  },
  {
    "example_id": 1465,
    "prompt": "Insert new socially responsible lending data into SociallyResponsibleLending table.",
    "generated_sql": "INSERT INTO SociallyResponsibleLending (id, institution, category, loan_amount, interest_rate, loan_type, funding_amount, loan_date) VALUES (1, 'SociallyResponsible Lending Institution', 'SociallyResponsible Lending', 1000000.00, 1.5, 'APR', '2022-01-01', 0.0125);",
    "reference_sql": "INSERT INTO SociallyResponsibleLending (lendingID, lenderName, borrowerName, amountLent, interestRate, lendingDate) VALUES (3, 'CommunityBank', 'LocalCharity', 15000.00, 1.50, '2022-02-03');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Values for funding_amount and loan_date are swapped"
    }
  },
  {
    "example_id": 1466,
    "prompt": "Identify bioprocess engineering papers published in 2021",
    "generated_sql": "SELECT paper_name FROM bioprocess_engineering.bioprocess_engineering_papers WHERE publication_year = 2021;",
    "reference_sql": "SELECT * FROM papers WHERE year = 2021 AND domain = 'Bioprocess Engineering';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1467,
    "prompt": "What is the minimum salary of city council members in the city of Chicago?",
    "generated_sql": "SELECT MIN(salary) FROM CityCouncil WHERE city = 'Chicago';",
    "reference_sql": "SELECT MIN(salary) FROM council_members WHERE city = 'Chicago' AND job_title = 'City Council Member';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1468,
    "prompt": "What is the total revenue generated from virtual tours in the United Kingdom?",
    "generated_sql": "SELECT SUM(revenue) FROM virtual_tours WHERE country = 'United Kingdom';",
    "reference_sql": "SELECT SUM(revenue) FROM virtual_tours WHERE country = 'United Kingdom';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1469,
    "prompt": "What is the average number of listings per hotel in 'Americas'?",
    "generated_sql": "SELECT AVG(num_ listings) FROM hotels WHERE region = 'Americas';",
    "reference_sql": "SELECT region, AVG(listings) FROM ota_hotels WHERE region = 'Americas' GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Column name is incorrect ('num_ listings' with a space)"
    }
  },
  {
    "example_id": 1470,
    "prompt": "What is the percentage of hotels in Europe that offer virtual tours?",
    "generated_sql": "SELECT (SUM(CASE WHEN virtual_tour_country = 'Europe' THEN 1 ELSE 0 END) / COUNT(*)) * 100.0 FROM hotels_virtual_tours;",
    "reference_sql": "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query divides European virtual tour hotels by all hotels instead of dividing by only European hotels and uses an incorrect column for filtering."
    }
  },
  {
    "example_id": 1471,
    "prompt": "What is the percentage of hotels in Paris that have adopted AI technology?",
    "generated_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM hotels WHERE city = 'Paris')) AS percentage FROM hotels WHERE city = 'Paris' AND technology = 'AI';",
    "reference_sql": "SELECT (COUNT(CASE WHEN ai_adoption = TRUE THEN 1 END) * 100.0 / COUNT(ai_adoption)) AS percentage FROM hotels WHERE city = 'Paris';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1472,
    "prompt": "What is the species name and corresponding management location for species with a population between 300 and 600?",
    "generated_sql": "SELECT species_name, location FROM species_population WHERE population < 300 AND population > 600;",
    "reference_sql": "SELECT Species.name, ResourceManagement.location FROM Species INNER JOIN ResourceManagement ON 1=1 WHERE Species.population BETWEEN 300 AND 600;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses incompatible conditions (population < 300 AND population > 600) instead of filtering for population between 300 and 600."
    }
  },
  {
    "example_id": 1473,
    "prompt": "What is the maximum age of patients who have a primary diagnosis of PTSD and have attended at least one therapy session?",
    "generated_sql": "SELECT MAX(age) FROM patients INNER JOIN therapy_sessions ON patients.patient_id = therapy_sessions.patient_id WHERE patients.primary_diagnosis = 'PTSD' AND therapy_sessions.session_date >= DATEADD(year, -4, GETDATE());",
    "reference_sql": "SELECT MAX(age) FROM patients WHERE condition = 'PTSD' AND therapy_sessions > 0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary date filter on therapy sessions not required by the question"
    }
  },
  {
    "example_id": 1474,
    "prompt": "What is the total cost of projects with 'Solar' as project_name in the 'renewable_energy' table?",
    "generated_sql": "SELECT SUM(cost) FROM renewable_energy WHERE is_solar = true;",
    "reference_sql": "SELECT SUM(cost) FROM renewable_energy WHERE project_name LIKE '%Solar%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses is_solar boolean instead of filtering project_name = 'Solar'"
    }
  },
  {
    "example_id": 1475,
    "prompt": "Show travel advisory updates for Southeast Asian countries in the last month",
    "generated_sql": "SELECT * FROM Travel_Advisory WHERE country = 'ASE' AND update_date >= DATEADD(month, -1, GETDATE()) GROUP BY country;",
    "reference_sql": "SELECT country, advisory_update FROM travel_advisories WHERE country IN ('Thailand', 'Vietnam', 'Cambodia', 'Indonesia', 'Laos', 'Malaysia', 'Myanmar', 'Philippines', 'Singapore', 'Brunei') AND advisory_date >= DATEADD(day, -30, CURRENT_DATE);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on a single country code 'ASE' and uses GROUP BY incorrectly instead of selecting updates for all Southeast Asian countries"
    }
  },
  {
    "example_id": 1476,
    "prompt": "What is the average hotel price for beachfront hotels in Mexico?",
    "generated_sql": "SELECT AVG(price) FROM hotel_data WHERE country = 'Mexico' AND hotel_type = 'Beco Beachfront';",
    "reference_sql": "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The filter uses hotel_type = 'Beco Beachfront' instead of selecting all beachfront hotels (e.g., hotel_type = 'Beachfront')"
    }
  },
  {
    "example_id": 1477,
    "prompt": "What was the total number of tourists who visited Asian museums in 2019 and 2020?",
    "generated_sql": "SELECT SUM(tourist_count) FROM museums WHERE country IN ('China', 'Japan', 'India', 'Indonesia', 'South Korea', 'Japan', 'North Korea') AND year IN (2019, 2020);",
    "reference_sql": "SELECT year, SUM(visitors) as total_visitors FROM museum_visitors WHERE country IN ('Japan', 'China') GROUP BY year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query lists only a few countries (with a duplicate 'Japan') rather than all Asian museums; it fails to include all Asian countries."
    }
  },
  {
    "example_id": 1478,
    "prompt": "What is the total population of marine species in the Southern hemisphere?",
    "generated_sql": "SELECT SUM(population) FROM marine_species WHERE region IN ('Southern', 'Northern');",
    "reference_sql": "SELECT SUM(population) FROM marine_species WHERE location LIKE 'S%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters both Southern and Northern hemispheres instead of only Southern."
    }
  },
  {
    "example_id": 1479,
    "prompt": "What is the average salary of full-time employees in the Mining department?",
    "generated_sql": "SELECT AVG(salary) FROM Employees WHERE department = 'Mining';",
    "reference_sql": "SELECT AVG(salary) FROM Employees WHERE department = 'Mining' AND employment_status = 'Full-time';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for full-time employees"
    }
  },
  {
    "example_id": 1480,
    "prompt": "What is the percentage of female workers in the mining industry by role?",
    "generated_sql": "SELECT role, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM workers GROUP BY role) as percentage FROM workers WHERE gender = 'Female' AND industry = 'Mining' GROUP BY role;",
    "reference_sql": "SELECT role, (COUNT(*) FILTER (WHERE gender = 'Female')) * 100.0 / COUNT(*) FROM workers GROUP BY role;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Denominator subquery incorrectly groups without industry filter and returns multiple rows; percentage not computed per role within mining"
    }
  },
  {
    "example_id": 1481,
    "prompt": "How many unique volunteers worked on projects in each cause area?",
    "generated_sql": "SELECT C.CauseAreaName, COUNT(DISTINCT V.ProjectID) FROM VOLUNTEERS v JOIN COURSE_PARTs cs ON v.ProjectID = cs.ProjectID GROUP BY COURSE_PARTs.CauseAreaName;",
    "reference_sql": "SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts distinct ProjectID instead of distinct VolunteerID and uses incorrect join/table for cause area"
    }
  },
  {
    "example_id": 1482,
    "prompt": "Insert a new record for a volunteer who has provided their email address",
    "generated_sql": "INSERT INTO volunteers (name, email) VALUES ('Jane Smith', 'jane@example.com');",
    "reference_sql": "INSERT INTO volunteer (vol_id, vol_name, org_id, vol_email) VALUES (4, 'David', 1, 'david@example.com');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Requires specifying actual volunteer details or only email as provided; adding a hardcoded name is not supported by request."
    }
  },
  {
    "example_id": 1483,
    "prompt": "What is the total amount donated by small donors in the 'animals' cause area?",
    "generated_sql": "SELECT SUM(DonationAmount) FROM Donations WHERE Cause = 'animals';",
    "reference_sql": "SELECT SUM(amount) FROM donations WHERE donor_size = 'small' AND cause_area = 'animals';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for small donors"
    }
  },
  {
    "example_id": 1484,
    "prompt": "What is the total donation amount for the 'Food' department in the 'Donations' table?",
    "generated_sql": "SELECT SUM(DonationAmount) FROM Donations WHERE Department = 'Food';",
    "reference_sql": "SELECT SUM(amount) FROM Donations WHERE department = 'Food'",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1485,
    "prompt": "How many public schools and public libraries exist in total, in the 'CityData' schema's 'CityEducation' and 'CityLibrary' tables?",
    "generated_sql": "SELECT COUNT(*) FROM CityData.CityEducation WHERE CityID = (SELECT CityID FROM CityData.CityCity WHERE CityID IN (SELECT CityID FROM CityData.CityCity WHERE CityID = 5));",
    "reference_sql": "SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query only counts CityEducation for a specific CityID and ignores public filtering and the CityLibrary table"
    }
  },
  {
    "example_id": 1486,
    "prompt": "List all public transportation routes in the city of San Francisco and their respective budgets for 2023, ordered by budget amount in ascending order.",
    "generated_sql": "SELECT route_name, budget, budget_year, budget_month, budget_month FROM public_transportation WHERE city = 'San Francisco' AND year = 2023;",
    "reference_sql": "SELECT route, budget FROM routes WHERE city = 'San Francisco' AND year = 2023 ORDER BY budget ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing ORDER BY budget and selects irrelevant columns (budget_month twice)"
    }
  },
  {
    "example_id": 1487,
    "prompt": "What is the ratio of affordable to total housing units for each community type?",
    "generated_sql": "SELECT community_type, COUNT(*) AS total_units, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS unique_community_type FROM housing GROUP BY community_type, ROUND(COUNT(*) / SUM(COUNT(*)) * 100.0, 2) AS affordable_to_total_units FROM housing GROUP BY community_type, ROUND(COUNT(*) / SUM(COUNT(*)) * 100.0, 2) ORDER BY community_type;",
    "reference_sql": "SELECT name, affordable_housing/total_housing AS ratio FROM Community_Types;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query is malformed and does not calculate the ratio of affordable units to total units per community type"
    }
  },
  {
    "example_id": 1488,
    "prompt": "What is the maximum CO2 emission reduction achieved by any carbon offset program in the industry sector?",
    "generated_sql": "SELECT MAX(reduction_percentage) FROM carbon_offset_programs WHERE industry = 'industry';",
    "reference_sql": "SELECT MAX(co2_emission_reduction_tonnes) FROM co2_emission_reduction WHERE sector = 'Industry';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause filters industry = 'industry' instead of the industry sector value, and it uses reduction_percentage rather than the CO2 emission reduction field."
    }
  },
  {
    "example_id": 1489,
    "prompt": "Count the number of restaurants with sustainable sourcing practices",
    "generated_sql": "SELECT COUNT(DISTINCT r.restaurant_id) FROM restaurants r JOIN sourcing_practices s ON r.restaurant_id = s.restaurant_id WHERE s.sustainable = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM restaurants WHERE sustainable_sourcing = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1490,
    "prompt": "What is the total revenue for each restaurant in the 'fine_dining' category?",
    "generated_sql": "SELECT restaurant_name, SUM(revenue) as total_revenue FROM fine_dining GROUP BY restaurant_name ORDER BY total_revenue DESC;",
    "reference_sql": "SELECT r.name, SUM(re.revenue) as total_revenue FROM restaurants r JOIN revenue re ON r.id = re.restaurant_id WHERE r.category = 'fine_dining' GROUP BY r.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a table named fine_dining instead of filtering a restaurants table by category"
    }
  },
  {
    "example_id": 1491,
    "prompt": "Which menu items have had their prices changed more than once?",
    "generated_sql": "SELECT menu_item_name, COUNT(*) as total_cost FROM menu_items_updated WHERE price_change > 1 AND total_cost > 0 GROUP BY menu_item_name HAVING total_cost > 0 GROUP BY menu_item_name ORDER BY total_cost DESC LIMIT 1;",
    "reference_sql": "SELECT item_name FROM menu_items GROUP BY item_name HAVING COUNT(DISTINCT last_updated) > 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query misuses price_change filter, alias in WHERE, duplicates GROUP BY, and limits results; it does not correctly count and list all items with more than one price change."
    }
  },
  {
    "example_id": 1492,
    "prompt": "Update 'payment_status' in 'payments' table for payment_id '12345' to 'Completed'",
    "generated_sql": "UPDATE payments SET payment_status = 'Completed' WHERE payment_id = 12345;",
    "reference_sql": "UPDATE payments SET payment_status = 'Completed' WHERE payment_id = 12345;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1493,
    "prompt": "What is the total quantity of items produced in the 'Ethical Clothing' category in 2021 and 2022?",
    "generated_sql": "SELECT SUM(quantity) FROM inventory WHERE category = 'Ethical Clothing' AND year IN (2021, 2022);",
    "reference_sql": "SELECT category, SUM(quantity) as total_quantity FROM production WHERE category = 'Ethical Clothing' AND year IN (2021, 2022) GROUP BY category;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1494,
    "prompt": "Find the astronauts who have had medical procedures performed in space and the name of the medical procedure.",
    "generated_sql": "SELECT astronauts.name FROM astronauts INNER JOIN medical_procedures ON astronauts.id = medical_procedures.astronaut_id WHERE astronauts.id = 1 AND medical_procedures.medical_operation = 'Space-Based Medical';",
    "reference_sql": "SELECT astronaut_name, medical_procedure FROM Astronaut_Medical_Data WHERE location = 'Space';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only astronaut id=1 and a specific medical_operation, and does not select the procedure name"
    }
  },
  {
    "example_id": 1495,
    "prompt": "What is the average age of athletes for each sport in the 'athletes' table?",
    "generated_sql": "SELECT sport, AVG(age) FROM athletes GROUP BY sport;",
    "reference_sql": "SELECT sport, AVG(age) FROM athletes GROUP BY sport;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1496,
    "prompt": "Which regions have the most fans who have attended wellbeing programs?",
    "generated_sql": "SELECT region_name, COUNT(*) AS num_fans FROM (SELECT region_name, COUNT(*) AS num_fans FROM wellbeing_programs GROUP BY region_name) subquery GROUP BY region_name;",
    "reference_sql": "SELECT region, COUNT(fan_id) FROM wellbeing JOIN fans ON wellbeing.fan_id = fans.fan_id WHERE fans.game_type IN ('Wellbeing Program 1', 'Wellbeing Program 2') GROUP BY region ORDER BY COUNT(fan_id) DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query groups wellbeing_programs twice and simply counts rows, not unique fans, and fails to join an attendee or fans table, yielding incorrect counts."
    }
  },
  {
    "example_id": 1497,
    "prompt": "Find the top 5 autonomous vehicles with the lowest price increase per mile compared to their first model year",
    "generated_sql": "SELECT AVG(Price / (SELECT COUNT(*) FROM VEhicles WHERE Model = VEhicles.Model) AS PricePerMile, AVG(Price / (SELECT COUNT(*) FROM VEhicles WHERE Model = VEhicles.Model) AS PricePerYear) AS YearPerPrice, AVG(Price / (SELECT COUNT(*) FROM VEhicles WHERE Model = VEhicles.Model) AS YearPerYear) AS YearPerPricePerMile FROM VEhicles WHERE Year = 2022 ORDER BY PricePerMile ASC, YearPerPrice ASC LIMIT",
    "reference_sql": "SELECT vehicle_name, price_per_mile, model_year, (price_per_mile - t2.price_per_mile) / t2.price_per_mile * 100 as price_increase_percentage FROM autonomous_vehicles_3 t1 JOIN autonomous_vehicles_3 t2 ON t1.vehicle_name = t2.vehicle_name AND t1.model_year = t2.model_year + 1 WHERE t2.model_year = (SELECT MIN(model_year) FROM autonomous_vehicles_3 WHERE vehicle_name = vehicle_name) ORDER BY price_increase_percentage ASC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not compute price increase per mile relative to first model year and is syntactically incorrect"
    }
  },
  {
    "example_id": 1498,
    "prompt": "Which vessels have a max speed greater than 25 knots and are registered in the USA?",
    "generated_sql": "SELECT V.Name, MAX(MS.MaxSpeed) as MaxSpeed FROM Vessel V INNER JOIN ShipAccommodations H ON V.VesselID = H.VesselID WHERE H.Country = 'USA' AND V.Name IN (SELECT V.Name FROM Vessel V WHERE V.Name = 'Merrimac' AND V.MaxSpeed > 25.00) GROUP BY V.Name;",
    "reference_sql": "SELECT vessel_id, name FROM Vessels WHERE max_speed > 25 AND country = 'USA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect subquery limits to 'Merrimac', wrong table join and undefined alias MS"
    }
  },
  {
    "example_id": 1499,
    "prompt": "What is the average age of visitors who attended family workshops?",
    "generated_sql": "SELECT AVG(age) FROM FamilyWorkshops GROUP BY age;",
    "reference_sql": "SELECT AVG(age) FROM attendees WHERE event_id IN (SELECT id FROM events WHERE type = 'Workshop');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by age returns an average for each age rather than the overall average"
    }
  },
  {
    "example_id": 1500,
    "prompt": "Add recycling rate data to the 'RecyclingRates' table for facility ID 1 in the years 2018, 2019, 2020 with rates 0.75, 0.78, 0.81",
    "generated_sql": "INSERT INTO RecyclingRates (FacilityID, Year, Rate) VALUES ('FacilityID', 2018, 0.75), ('FacilityID', 2019, 0.78), ('FacilityID', 2020, 0.81);",
    "reference_sql": "INSERT INTO RecyclingRates (rate_id, facility_id, year, rate) VALUES (1, 1, 2018, 0.75), (2, 1, 2019, 0.78), (3, 1, 2020, 0.81);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Used string 'FacilityID' instead of the numeric value 1 for FacilityID"
    }
  },
  {
    "example_id": 1501,
    "prompt": "What is the maximum recycling rate for any material?",
    "generated_sql": "SELECT MAX(recycling_rate) FROM material_recycling;",
    "reference_sql": "SELECT MAX(recycling_rate) FROM Recycling_Rates_All;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1502,
    "prompt": "Update the water_usage of the customer with the highest water_usage in the month of May 2022 to 1000 in the residential table.",
    "generated_sql": "UPDATE residential SET water_usage = 1000 WHERE customer_id = (SELECT id FROM customers WHERE customer_name = 'John Doe' AND year = 2022);",
    "reference_sql": "UPDATE residential SET water_usage = 1000 WHERE customer_id = (SELECT customer_id FROM residential WHERE usage_date BETWEEN '2022-05-01' AND '2022-05-31' ORDER BY water_usage DESC LIMIT 1);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "The query does not identify the highest usage in May 2022 and uses customer_name filter instead of matching water_usage max in residential"
    }
  },
  {
    "example_id": 1503,
    "prompt": "What is the average explainability score for models trained on the 'south_american_education' dataset?",
    "generated_sql": "SELECT AVG(score) FROM explainability_scores WHERE dataset ='south_american_education';",
    "reference_sql": "SELECT AVG(explainability_score) FROM south_american_education;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1504,
    "prompt": "What is the distribution of AI models across different countries?",
    "generated_sql": "SELECT country, COUNT(model_id) as model_count FROM ai_models GROUP BY country;",
    "reference_sql": "SELECT model_country, COUNT(*) FROM ai_models GROUP BY model_country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1505,
    "prompt": "What is the average age of all astronauts who have flown missions to the International Space Station?",
    "generated_sql": "SELECT AVG(Age) FROM Astronauts WHERE Spacecraft = 'ISS' AND Age > 13;",
    "reference_sql": "SELECT AVG(Age) FROM Astronauts WHERE SpaceStation = 'International Space Station';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters Age > 13 and uses a Spacecraft field instead of joining to missions to identify ISS flights."
    }
  },
  {
    "example_id": 1506,
    "prompt": "How many habitats are in the 'animal_habitats' table?",
    "generated_sql": "SELECT COUNT(*) FROM animal_habitats;",
    "reference_sql": "SELECT COUNT(*) FROM animal_habitats;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1507,
    "prompt": "What is the total number of community education programs held in Texas and California?",
    "generated_sql": "SELECT COUNT(*) FROM CommunityEducation WHERE Location IN ('Texas', 'California');",
    "reference_sql": "SELECT COUNT(*) FROM community_ed WHERE location IN ('Texas', 'California');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1508,
    "prompt": "How many farms in Region3 have a harvest yield above the average for that region?",
    "generated_sql": "SELECT SUM(harvest_yield) FROM Region3 WHERE region = 'Region3' AND harvest_yield > (SELECT AVG(harvest_yield) FROM Region3);",
    "reference_sql": "SELECT farm_id FROM FarmsRegion WHERE region = 'Region3' GROUP BY farm_id HAVING AVG(harvest_yield) < harvest_yield;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses SUM(harvest_yield) instead of COUNT(*) to count farms above the region\u2019s average"
    }
  },
  {
    "example_id": 1509,
    "prompt": "What is the average biomass of Cuttlefish and Squid in Mediterranean marine farms?",
    "generated_sql": "SELECT AVG(biomass) FROM animals JOIN farms ON animals.id = farms.id JOIN farm_species ON farms.id = farm_species.id WHERE farm_species.id IN (SELECT farm_species.species_id FROM animal_species WHERE animal_species.name = farm_species.name);",
    "reference_sql": "SELECT AVG(biomass) average_biomass FROM mediterranean_marine_farms WHERE species IN ('Cuttlefish', 'Squid');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by species names or Mediterranean farms and uses incorrect joins"
    }
  },
  {
    "example_id": 1510,
    "prompt": "What is the total number of visitors from African countries who attended events in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM Events WHERE Country = 'Africa' AND Attendance = (SELECT SUM(Attendance) FROM Events WHERE EventDate BETWEEN '2021-01-01' AND '2021-06-30') AND EventType = 'African';",
    "reference_sql": "SELECT COUNT(*) FROM attendees JOIN events ON attendees.event_id = events.event_id JOIN countries ON attendees.country_id = countries.country_id WHERE events.event_year = 2021 AND countries.continent = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) instead of SUM(Attendance) and incorrect filters on Country, Attendance, date range, and EventType"
    }
  },
  {
    "example_id": 1511,
    "prompt": "Find TV shows with a higher IMDb rating than the average movie rating.",
    "generated_sql": "SELECT shows.title FROM shows INNER JOIN movies ON shows.id = movies.id WHERE movies.rating > (SELECT AVG(movies.rating) FROM movies WHERE movies.id = shows.id);",
    "reference_sql": "SELECT title FROM tv_show WHERE rating > (SELECT AVG(rating) FROM movie);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It incorrectly joins shows and movies by id and computes the average per id instead of comparing show rating to the overall average movie rating."
    }
  },
  {
    "example_id": 1512,
    "prompt": "What is the average cost of sustainable building materials used in green projects in the city of Seattle?",
    "generated_sql": "SELECT AVG(cost) FROM sustainable_buildings WHERE city = 'Seattle' AND material ='recycled material';",
    "reference_sql": "SELECT AVG(Cost) FROM Green_Projects WHERE City = 'Seattle' AND Building_Material IN ('Recycled Steel', 'Insulated Concrete Forms');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only 'recycled material' and omits filter for green projects"
    }
  },
  {
    "example_id": 1513,
    "prompt": "What is the total cost of permits for projects with permit numbers greater than 700?",
    "generated_sql": "SELECT SUM(approval_cost) FROM ProjectRequirements WHERE permit_number > 700;",
    "reference_sql": "SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses approval_cost instead of permit cost and may reference the wrong table"
    }
  },
  {
    "example_id": 1514,
    "prompt": "List all cases where the client is from 'California' and the attorney is 'Smith'",
    "generated_sql": "SELECT * FROM cases WHERE client_state = 'California' AND attorney = 'Smith';",
    "reference_sql": "SELECT * FROM cases WHERE client_state = 'CA' AND attorney_name = 'Smith';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1515,
    "prompt": "What is the average age of clients who lost cases in the 'personal injury' category?",
    "generated_sql": "SELECT AVG(age) FROM client_losses WHERE category = 'personal injury';",
    "reference_sql": "SELECT AVG(C.Age) as AvgAge FROM Clients C INNER JOIN Cases CA ON C.ClientID = CA.ClientID INNER JOIN CaseOutcomes CO ON CA.CaseID = CO.CaseID WHERE CA.Category = 'Personal Injury' AND CO.Outcome = 'Lost';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not explicitly filter for lost cases and may use incorrect table structure"
    }
  },
  {
    "example_id": 1516,
    "prompt": "Calculate the average environmental impact score of production sites in Australia, partitioned by state in ascending order.",
    "generated_sql": "SELECT state, AVG(score) FROM environmental_impact_score WHERE site LIKE '%Australia%' ORDER BY state ASC;",
    "reference_sql": "SELECT state, AVG(environmental_score) as avg_environmental_score, RANK() OVER (PARTITION BY state ORDER BY AVG(environmental_score)) as rank FROM australian_sites GROUP BY state ORDER BY rank;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY state and incorrect filter for Australian production sites"
    }
  },
  {
    "example_id": 1517,
    "prompt": "How many new drugs were approved by the EMA in 2020?",
    "generated_sql": "SELECT COUNT(*) FROM drug_approval WHERE EMA_Year = 2020 AND Approved = TRUE;",
    "reference_sql": "SELECT COUNT(*) as new_drugs_approved FROM drug_approval WHERE agency = 'EMA' AND YEAR(approval_date) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to include only new drugs"
    }
  },
  {
    "example_id": 1518,
    "prompt": "What is the market access strategy for the drug 'Nexo' in South America?",
    "generated_sql": "SELECT strategy FROM market_access WHERE drug_name = 'Nexo' AND region = 'South America';",
    "reference_sql": "SELECT strategy FROM market_access WHERE drug_name = 'Nexo' AND region = 'South America';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1519,
    "prompt": "What is the total revenue for 'HealthCo' from drug sales in 2018?",
    "generated_sql": "SELECT SUM(price) FROM sales WHERE drug_name = 'HealthCo' AND sale_year = 2018;",
    "reference_sql": "SELECT SUM(revenue) FROM HealthCo_DrugSales WHERE company = 'HealthCo' AND year = 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering by drug_name instead of company and not accounting for quantity in revenue calculation"
    }
  },
  {
    "example_id": 1520,
    "prompt": "Which countries have the highest R&D expenditures in the pharmaceuticals industry?",
    "generated_sql": "SELECT country, COUNT(*) as expenditure_count FROM drug_expenditure GROUP BY country ORDER BY expenditure_count DESC LIMIT 1;",
    "reference_sql": "SELECT c.country_name, rd.amount FROM country c INNER JOIN rd_expenditure rd ON c.country_code = rd.country_code ORDER BY rd.amount DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) instead of summing R&D expenditure and limits to one country"
    }
  },
  {
    "example_id": 1521,
    "prompt": "Which drugs were approved by the FDA in 2020?",
    "generated_sql": "SELECT name FROM drugs WHERE approval_year = 2020;",
    "reference_sql": "SELECT drug FROM fda_approval WHERE year = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1522,
    "prompt": "What are the policies related to mobility and communication accommodations that were effective on or before January 1, 2022?",
    "generated_sql": "SELECT policy FROM Accessibility_Assessments WHERE policy_type = 'Mobility' AND policy_date >= '2022-01-01' AND policy_date < '2022-01-01' GROUP BY policy ORDER BY policy DESC;",
    "reference_sql": "SELECT p.policy_type, p.policy_text, YEAR(p.policy_effective_date) as year FROM policies p WHERE p.policy_type IN ('Mobility accommodations', 'Communication accommodations') AND p.policy_effective_date <= '2022-01-01' ORDER BY year DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only mobility, omits communication, and date conditions are contradictory"
    }
  },
  {
    "example_id": 1523,
    "prompt": "How many marine species are affected by ocean acidification?",
    "generated_sql": "SELECT COUNT(*) FROM marine_species WHERE ocean_acidification = true;",
    "reference_sql": "SELECT COUNT(*) FROM species_impact WHERE affected_by_acidification = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1524,
    "prompt": "List all the wildlife species that inhabit coniferous forests.",
    "generated_sql": "SELECT species_name FROM wildlife_species WHERE habitat LIKE '%coniferous%' GROUP BY species_name;",
    "reference_sql": "SELECT species FROM wildlife_habitat WHERE forest_type = 'coniferous';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1525,
    "prompt": "Which countries source more than 5 ingredients?",
    "generated_sql": "SELECT country FROM ingredients WHERE ingredients.quantity > 5;",
    "reference_sql": "SELECT country, COUNT(*) FROM ingredients GROUP BY country HAVING COUNT(*) > 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by ingredient quantity rather than counting ingredients per country and using HAVING count > 5"
    }
  },
  {
    "example_id": 1526,
    "prompt": "Find the cosmetics with the lowest sales in each category, for the past 9 months, in Asia.",
    "generated_sql": "SELECT name, sales_area, region, SUM(sales_amount) as total_sales FROM sales JOIN sales_categories ON sales.category = sales_categories.category WHERE sale_date >= DATE_SUB(CURDATE(), INTERVAL 9 MONTH) GROUP BY name, sales_area, region ORDER BY total_sales, region, sales_area;",
    "reference_sql": "SELECT product_category, product_id, MIN(sales) AS min_sales FROM sales_by_month WHERE sale_date >= DATEADD(month, -9, CURRENT_DATE) AND region = 'Asia' GROUP BY product_category, product_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for Asia region and does not select the lowest sales per category, it just lists and sorts totals"
    }
  },
  {
    "example_id": 1527,
    "prompt": "What is the average number of artworks donated by artists per year, for artists who have donated artworks for at least 5 years?",
    "generated_sql": "SELECT AVG(DATEDIFF(year, donation_date, donation_date + 1)) FROM Artists WHERE donation_year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE);",
    "reference_sql": "SELECT AVG(NumberOfArtworks) FROM Artists WHERE FirstDonationYear <= YEAR(CURRENT_DATE) - 5 AND NumberOfArtworks > 0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not count artworks or group by artist, and misuses DATEDIFF instead of filtering artists with at least 5 years of donations"
    }
  },
  {
    "example_id": 1528,
    "prompt": "What is the veteran employment rate in Texas as of December 2021?",
    "generated_sql": "SELECT v.veteran_count, v.employment_rate FROM veteran_employment v WHERE v.state = 'Texas' AND v.year = 2021;",
    "reference_sql": "SELECT employment_rate FROM veteran_employment WHERE state = 'Texas' AND MONTH(employment_date) = 12 AND YEAR(employment_date) = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for December; only filters on year 2021"
    }
  },
  {
    "example_id": 1529,
    "prompt": "How many peacekeeping operations were conducted by each regional command in the 'peacekeeping_operations' and 'regional_commands' tables?",
    "generated_sql": "SELECT r.name, COUNT(p.id) AS num_operations FROM peacekeeping_operations p INNER JOIN regional_commands rc ON p.region_id = rc.id GROUP BY r.name;",
    "reference_sql": "SELECT r.command_name, COUNT(p.operation_id) as operations_conducted FROM regional_commands r JOIN peacekeeping_operations p ON r.command_id = p.command_id GROUP BY r.command_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses undefined alias 'r' instead of 'rc' for regional_commands"
    }
  },
  {
    "example_id": 1530,
    "prompt": "Find the top 5 salespeople by total sales",
    "generated_sql": "SELECT s.name, SUM(s.sale_amount) as total_sales FROM sales s GROUP BY s.name ORDER BY total_sales DESC LIMIT 5;",
    "reference_sql": "SELECT salesperson_id, SUM(amount) as total_sales FROM salesperson_sales GROUP BY salesperson_id ORDER BY total_sales DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1531,
    "prompt": "How many transactions were made in each region for the 'Credit Cards' product type?",
    "generated_sql": "SELECT region, transaction_type, COUNT(*) as total_transactions FROM transactions WHERE type = 'Credit Cards' GROUP BY region, transaction_type;",
    "reference_sql": "SELECT r.region_name, p.product_type, SUM(t.transaction_count) as total_transactions FROM regions r JOIN transactions t ON r.id = t.region_id JOIN product_types p ON t.product_type_id = p.id WHERE p.product_type = 'Credit Cards' GROUP BY r.region_name, p.product_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by transaction_type yields counts per region and transaction type instead of just per region as requested."
    }
  },
  {
    "example_id": 1532,
    "prompt": "What is the average donation amount for the 'Education' program?",
    "generated_sql": "SELECT AVG(donation_amount) FROM donations WHERE program = 'Education';",
    "reference_sql": "SELECT AVG(amount) FROM Donations WHERE program = 'Education';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1533,
    "prompt": "Which programs had the highest volunteer participation rate in the last quarter?",
    "generated_sql": "SELECT program_name, participation_rate FROM volunteer_participation WHERE participation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
    "reference_sql": "SELECT p.ProgramName, COUNT(v.EventID) / (SELECT COUNT(*) FROM VolunteerEvents WHERE EventDate >= DATEADD(quarter, -1, GETDATE())) * 100.0 AS VolunteerParticipationRate FROM Programs p INNER JOIN VolunteerEvents v ON p.ProgramID = v.ProgramID WHERE v.EventDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.ProgramName ORDER BY VolunteerParticipationRate DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not select the maximum participation rate or filter to only the top program(s)"
    }
  },
  {
    "example_id": 1534,
    "prompt": "How many professional development courses did teachers complete in each institution?",
    "generated_sql": "SELECT institution, COUNT(*) FROM teachers WHERE completion = 'Professional Development' GROUP BY institution;",
    "reference_sql": "SELECT institution_id, SUM(course_count) as total_courses FROM teacher_professional_development GROUP BY institution_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts teacher records instead of course completions; should count courses, not teachers"
    }
  },
  {
    "example_id": 1535,
    "prompt": "What is the average number of professional development courses taken by teachers in each school district, grouped by district and ordered by the average number in descending order?",
    "generated_sql": "SELECT d.name, ag.district, AVG(dd.course_count) as avg_course_count FROM districts d JOIN teachers t ON d.school_id = t.id JOIN professional_development_courses dd ON t.teacher_id = dd.teacher_id GROUP BY d.name, ag.district ORDER BY avg_course_count DESC;",
    "reference_sql": "SELECT sd.district_name, AVG(t.num_courses) as avg_num_courses FROM teachers t JOIN school_districts sd ON t.district_id = sd.district_id GROUP BY sd.district_name ORDER BY avg_num_courses DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Invalid join conditions and undefined alias 'ag'; grouping and column references do not match schema"
    }
  },
  {
    "example_id": 1536,
    "prompt": "What is the average open pedagogy participation score for students in each grade level?",
    "generated_sql": "SELECT grade_level, AVG(open_pedagogy_score) as avg_open_pedagogy_score FROM students GROUP BY grade_level;",
    "reference_sql": "SELECT grade_level, AVG(participation_score) as avg_participation_score FROM student_open_pedagogy GROUP BY grade_level;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1537,
    "prompt": "List the ethnicity and number of employees in management positions from the \"diversity\" and \"positions\" tables",
    "generated_sql": "SELECT ethnicity, employee_count FROM (SELECT ethnicity, employee_count, ROW_NUMBER() OVER (ORDER BY employee_count DESC) as rank FROM diversity_positions) AS rank WHERE rank = 1;",
    "reference_sql": "SELECT diversity.ethnicity, positions.position_title, COUNT(*) as count  FROM diversity JOIN positions ON diversity.employee_id = positions.employee_id WHERE positions.is_management = TRUE GROUP BY diversity.ethnicity, positions.position_title;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects only the top rank and uses a non-existent table instead of joining diversity and positions and grouping management roles"
    }
  },
  {
    "example_id": 1538,
    "prompt": "What is the number of new hires by quarter?",
    "generated_sql": "SELECT quarter, COUNT(*) as new_hires FROM hire_data WHERE hire_date >= '2019-01-01' AND hire_date < '2021-01-01' GROUP BY quarter;",
    "reference_sql": "SELECT DATE_PART('quarter', HireDate) as Quarter, COUNT(*) as NewHires FROM Employees GROUP BY Quarter;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary date filter limits results to 2019-2020 and doesn\u2019t compute quarter from hire_date"
    }
  },
  {
    "example_id": 1539,
    "prompt": "What is the total number of job applications received per month in 2021?",
    "generated_sql": "SELECT EXTRACT(MONTH FROM date) as month, COUNT(*) as total_applications FROM application_requests WHERE YEAR(request_date) = 2021 GROUP BY month;",
    "reference_sql": "SELECT DATE_FORMAT(application_date, '%Y-%m') as month, COUNT(id) as applications_received FROM job_applications WHERE YEAR(application_date) = 2021 GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Extracting month from 'date' column instead of 'request_date'"
    }
  },
  {
    "example_id": 1540,
    "prompt": "What is the number of renewable energy patents issued per year for the top 3 countries?",
    "generated_sql": "SELECT country, SUM(patents) as total_patents FROM patents_by_country GROUP BY country ORDER BY total_patents DESC;",
    "reference_sql": "SELECT Year, Country, COUNT(*) AS RenewableEnergyPatents FROM Patent WHERE Type = 'Renewable' GROUP BY Year, Country ORDER BY Year, COUNT(*) DESC FETCH FIRST 3 ROWS ONLY;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for renewable energy patents, does not group by year, nor limits to top 3 countries"
    }
  },
  {
    "example_id": 1541,
    "prompt": "Calculate the total gas consumption for Nigeria in 2019",
    "generated_sql": "SELECT SUM(gas_consumption) FROM Nigeria_gas_consumption WHERE year = 2019;",
    "reference_sql": "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1542,
    "prompt": "What is the total production of oil from the North Sea field in 2020?",
    "generated_sql": "SELECT SUM(quantity) FROM field_production WHERE field = 'North Sea' AND year = 2020 AND year = 2020 AND start_date = '2020-01-01';",
    "reference_sql": "SELECT SUM(oil_production) FROM north_sea_fields WHERE field_name = 'North Sea Field A' AND YEAR(datetime) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query unnecessarily filters by start_date and repeats the year condition, which restricts results to a single date instead of summing production for the entire year."
    }
  },
  {
    "example_id": 1543,
    "prompt": "How many healthcare facilities are there in the 'africa' region?",
    "generated_sql": "SELECT COUNT(*) FROM healthcare_facilities WHERE region = 'africa';",
    "reference_sql": "SELECT COUNT(*) FROM healthcare WHERE region_id = 2;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1544,
    "prompt": "List all the unique sectors in which projects have been funded in Asia.",
    "generated_sql": "SELECT sectors.sector_name FROM sectors JOIN (SELECT sector_name FROM funding WHERE country IN ('India', 'China', 'Japan') AND year BETWEEN 2019 AND 2021) AS subquery ON sectors.sector_name = subquery.sector_name WHERE subquery.year BETWEEN 2019 AND 2021;",
    "reference_sql": "SELECT DISTINCT sector FROM projects WHERE location = 'Asia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Includes an unrelated year filter, references subquery.year not selected, and misses DISTINCT for unique sectors"
    }
  },
  {
    "example_id": 1545,
    "prompt": "Find the number of available parking spots at each station on the Orange Line.",
    "generated_sql": "SELECT station_id, available_pens FROM (SELECT station_id, available_pens, SUM(available_pens) as available_parks FROM oll_lines GROUP BY station_id) sub JOIN oll_lines ON sub.sub_id = oll_lines.sub_id GROUP BY station_id;",
    "reference_sql": "SELECT station, spots FROM Parking WHERE line = 'Orange Line';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses incorrect column names, lacks filter for Orange Line, and misuses join and aggregation"
    }
  },
  {
    "example_id": 1546,
    "prompt": "What are the unique vehicle types and their respective total fares collected?",
    "generated_sql": "SELECT vehicles.vehicle_type, SUM(fares.fare_amount) FROM vehicles LEFT JOIN fares ON vehicles.vehicle_id = fares.vehicle_id GROUP BY vehicles.vehicle_type;",
    "reference_sql": "SELECT vehicle_type, SUM(fare) FROM Fares GROUP BY vehicle_type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1547,
    "prompt": "What is the earliest and latest time that a vehicle has operated on each route?",
    "generated_sql": "SELECT Route, MIN(DATEDIFF(date, start_time, end_time)), MAX(DATEDIFF(date, start_time, end_time)) FROM Vehicles;",
    "reference_sql": "SELECT routes.route_name, MIN(vehicles.operation_time) as earliest_time, MAX(vehicles.operation_time) as latest_time FROM routes INNER JOIN vehicles ON routes.route_id = vehicles.route_id GROUP BY routes.route_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses DATEDIFF on times instead of selecting MIN(start_time) and MAX(end_time), and lacks GROUP BY Route"
    }
  },
  {
    "example_id": 1548,
    "prompt": "How many units of each product were sold in the last quarter, by salesperson?",
    "generated_sql": "SELECT salesperson, COUNT(DISTINCT sale_person) as num_sold FROM sales_data WHERE sale_date >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY salesperson;",
    "reference_sql": "SELECT salesperson, product, SUM(quantity) AS qty_sold, DATE_TRUNC('quarter', sale_date) AS sale_quarter FROM sales WHERE sale_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 year') GROUP BY salesperson, product, sale_quarter;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups only by salesperson and counts distinct sale_person instead of grouping by product and summing units sold per product"
    }
  },
  {
    "example_id": 1549,
    "prompt": "Which factories in Colombia have a production cost between 100 and 200?",
    "generated_sql": "SELECT name FROM factories WHERE location = 'Colombia' AND production_cost > 1000000.00;",
    "reference_sql": "SELECT name, cost FROM producers WHERE location = 'Colombia' AND cost BETWEEN 100 AND 200;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses incorrect cost range and scale and lacks upper bound"
    }
  },
  {
    "example_id": 1550,
    "prompt": "How many users have more than 1000 followers and have posted at least once in the past week?",
    "generated_sql": "SELECT COUNT(*) FROM users JOIN posts ON users.user_id = posts.user_id WHERE followers > 1000 AND posts.post_date >= DATE_SUB(NOW(), INTERVAL 1 WEEK) AND posts.post_date < CURRENT_DATE AND followers > 1000;",
    "reference_sql": "SELECT COUNT(*) as user_count FROM users WHERE users.followers > 1000 AND users.timestamp >= DATE_SUB(NOW(), INTERVAL 1 WEEK);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts each post instead of distinct users and misuses date filter excluding posts from today"
    }
  },
  {
    "example_id": 1551,
    "prompt": "How many unique donors made donations in the healthcare industry in Q3 2022?",
    "generated_sql": "SELECT COUNT(DISTINCT DonorID) AS UniqueDonors FROM Donors WHERE Industry = 'Healthcare' AND DonationDate BETWEEN '2022-07-01' AND '2022-09-30';",
    "reference_sql": "SELECT COUNT(DISTINCT donor_id) FROM donations d JOIN donors don ON d.donor_id = don.id WHERE industry = 'Healthcare' AND donation_date BETWEEN '2022-07-01' AND '2022-09-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Donor table likely does not record donation dates; should query the Donations table and join to filter healthcare donors in Q3 2022"
    }
  },
  {
    "example_id": 1552,
    "prompt": "How many biosensors were developed in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM biosensors WHERE EXTRACT(YEAR FROM test_date) = 2021;",
    "reference_sql": "SELECT COUNT(*) FROM biosensor_development WHERE year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters by test_date instead of the development date column"
    }
  },
  {
    "example_id": 1553,
    "prompt": "What is the average salary of male and female employees in the 'employees' table, grouped by job title?",
    "generated_sql": "SELECT job_title, AVG(salary) as avg_salary FROM employees WHERE gender = 'Male' GROUP BY job_title;",
    "reference_sql": "SELECT job_title, AVG(salary) as avg_salary FROM employees GROUP BY job_title, gender;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query only calculates average salary for male employees and does not include female employees or group by gender"
    }
  },
  {
    "example_id": 1554,
    "prompt": "How many users engaged with virtual tours in 'Europe' during each month of 2022?",
    "generated_sql": "SELECT location, LAG(user_count) OVER (PARTITION BY location ORDER BY start_date) as num_users FROM user_engagement WHERE location = 'Europe' AND start_date BETWEEN '2022-01-01' AND '2022-12-31' ORDER BY start_date;",
    "reference_sql": "SELECT country, EXTRACT(MONTH FROM tour_date) AS month, COUNT(DISTINCT user_id) FROM virtual_tours WHERE country = 'Europe' AND tour_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY country, month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses LAG instead of aggregating user engagement by month and does not group results by month"
    }
  },
  {
    "example_id": 1555,
    "prompt": "What is the minimum and maximum age of patients by condition?",
    "generated_sql": "SELECT condition, MIN(age) as min_age, MAX(age) as max_age FROM patients GROUP BY condition;",
    "reference_sql": "SELECT Conditions.Condition, MIN(PatientAges.Age), MAX(PatientAges.Age) FROM PatientAges JOIN Conditions ON PatientAges.ConditionID = Conditions.ConditionID GROUP BY Conditions.Condition;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1556,
    "prompt": "How many tunnels are there in New York with a length greater than 5 miles?",
    "generated_sql": "SELECT COUNT(*) FROM tunnels WHERE state = 'New York' AND length > 5;",
    "reference_sql": "SELECT COUNT(*) FROM Tunnels WHERE state = 'New York' AND length > 5;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1557,
    "prompt": "List the dams in California",
    "generated_sql": "SELECT name FROM dams WHERE state = 'California';",
    "reference_sql": "SELECT name FROM Dams WHERE state = 'California';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1558,
    "prompt": "Delete all records in the sustainable_tourism_campaigns table where the campaign_name is 'Green Tourism Initiative'",
    "generated_sql": "DELETE FROM sustainable_tourism_campaigns WHERE campaign_name = 'Green Tourism Initiative';",
    "reference_sql": "DELETE FROM sustainable_tourism_campaigns WHERE campaign_name = 'Green Tourism Initiative';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1559,
    "prompt": "How many legal tech events have taken place in New York and California?",
    "generated_sql": "SELECT COUNT(*) FROM LegalTechEvents WHERE location IN ('New York', 'California') GROUP BY location;",
    "reference_sql": "SELECT COUNT(*) FROM legal_tech_events WHERE location IN ('New York', 'California');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing location column in SELECT for grouping"
    }
  },
  {
    "example_id": 1560,
    "prompt": "What is the average media literacy score for users in the 'Young Adult' age group who have completed at least one disinformation detection course?",
    "generated_sql": "SELECT AVG(media_literacy_score) FROM media_literacy WHERE age BETWEEN 18 AND 25;",
    "reference_sql": "SELECT AVG(media_literacy_score) FROM users WHERE age = 'Young Adult' AND courses_completed > 0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for users who have completed at least one disinformation detection course"
    }
  },
  {
    "example_id": 1561,
    "prompt": "Increase the price of all vegetarian menu items by 10%",
    "generated_sql": "UPDATE menu_items SET price = price*1.1 WHERE category = 'Vegetarian';",
    "reference_sql": "UPDATE menu_items SET price = price * 1.10 WHERE is_vegetarian = true;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1562,
    "prompt": "What is the total CO2 emission of each menu item, considering its ingredients and their origin?",
    "generated_sql": "SELECT m.menu_item, m.ingredients, m.origin, SUM(m.co2_emission) FROM MenuItems m GROUP BY m.menu_item, m.ingredients, m.origin;",
    "reference_sql": "SELECT m.name, SUM(i.co2_emission_per_kg * r.quantity) as total_co2_emission FROM menu_items m JOIN recipe r ON m.menu_id = r.menu_id JOIN ingredients i ON r.ingredient_id = i.ingredient_id GROUP BY m.menu_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by ingredients and origin returns multiple rows per menu item instead of summing emissions across all ingredients for each menu item"
    }
  },
  {
    "example_id": 1563,
    "prompt": "Which defense projects had a delay of more than 30 days in their timelines in the last 6 months?",
    "generated_sql": "SELECT name FROM defense_projects WHERE delay >= (SELECT MAX(delay) FROM defense_projects WHERE project_name IN ('Airbus', 'Alenia') GROUP BY project_name HAVING ROW_NUMBER() OVER (ORDER BY delay DESC) = 1);",
    "reference_sql": "SELECT project_id, project_start_date, project_end_date, DATEDIFF(day, project_start_date, project_end_date) as project_duration FROM Defense_Projects WHERE project_end_date BETWEEN DATEADD(month, -6, GETDATE()) AND GETDATE() AND DATEDIFF(day, project_start_date, project_end_date) > 30;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query does not filter by the last 6 months and incorrectly uses project_name IN ('Airbus', 'Alenia') and an unrelated subquery"
    }
  },
  {
    "example_id": 1564,
    "prompt": "Determine the number of mines in Colombia with environmental impact assessments that exceed 80 points.",
    "generated_sql": "SELECT COUNT(*) FROM mining_sites WHERE environmental_impact_assessment > 80 AND country = 'Colombia';",
    "reference_sql": "SELECT COUNT(*) FROM mines WHERE location = 'Colombia' AND eia_score > 80;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1565,
    "prompt": "List the labor productivity metrics for each mine, including the total amount of minerals extracted and the number of employees, and calculate the productivity metric for each mine.",
    "generated_sql": "SELECT mine_name, mining_location, productivity, SUM(mined_amount) FROM mining_data GROUP BY mine_name, mining_location, productivity ORDER BY productivity DESC;",
    "reference_sql": "SELECT m.mine_name, AVG(lp.amount_extracted / lp.num_employees) AS productivity_metric FROM labor_productivity lp JOIN mines m ON lp.mine_id = m.mine_id GROUP BY m.mine_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing number of employees and on-the-fly calculation of productivity"
    }
  },
  {
    "example_id": 1566,
    "prompt": "What is the total amount of mineral extraction by type?",
    "generated_sql": "SELECT type, SUM(amount) FROM mineral_extraction;",
    "reference_sql": "SELECT mineral, SUM(quantity) FROM extraction GROUP BY mineral;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY type to aggregate amounts by type"
    }
  },
  {
    "example_id": 1567,
    "prompt": "Display the names and total donation amounts for nonprofits that offer programs in both the Education and Health categories, excluding any duplicate records.",
    "generated_sql": "SELECT Name, SUM(TotalDonation) FROM Donations JOIN Donors ON Donations.DonorID = Donors.DonorID JOIN Donors ON Donations.DonorID = Donors.DonorID WHERE Donors.Category IN ('Education', 'Health') GROUP BY Name HAVING COUNT(DISTINCT DonorID) = 2;",
    "reference_sql": "SELECT name, SUM(donation_amount) as total_donation FROM nonprofits WHERE category IN ('Education', 'Health') GROUP BY name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Duplicate JOIN on Donors, incorrect table usage, and counts distinct DonorID instead of distinct categories"
    }
  },
  {
    "example_id": 1568,
    "prompt": "List all eSports tournaments that don't have a winner yet.",
    "generated_sql": "SELECT tournament_name FROM eSports_Tournaments WHERE tournament_name IS NULL ORDER BY tournament_name LIMIT 1;",
    "reference_sql": "SELECT * FROM Tournaments WHERE Winner IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on tournament_name instead of winner and uses LIMIT 1"
    }
  },
  {
    "example_id": 1569,
    "prompt": "What is the average playtime in minutes for players who have achieved a rank of Gold or higher in the game \"Galactic Conquest\"?",
    "generated_sql": "SELECT AVG(Playtime) FROM GamePlayers WHERE GameName = 'Galactic Conquest' AND Rank = 'Gold' GROUP BY Playtime HAVING Score > 70;",
    "reference_sql": "SELECT AVG(PlaytimeMinutes) FROM GalacticConquestPlayers WHERE Rank IN ('Gold', 'Platinum');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters only Gold, ignores higher ranks, misuses GROUP BY Playtime, and adds an unrelated HAVING clause."
    }
  },
  {
    "example_id": 1570,
    "prompt": "Update the \"city_budget_summary\" table to mark the \"Education\" budget as approved",
    "generated_sql": "UPDATE city_budget_summary SET budget_approved = 1 WHERE city = 'London' AND budget_approved = 1;",
    "reference_sql": "UPDATE city_budget_summary SET budget_status = 'approved' WHERE budget_category = 'Education';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause is incorrect; it filters on city and already approved status instead of selecting the Education budget."
    }
  },
  {
    "example_id": 1571,
    "prompt": "List the co-owners and their shared property addresses in Portland, OR.",
    "generated_sql": "SELECT co_owner, shared_address FROM co_owners WHERE location = 'Portland, OR';",
    "reference_sql": "SELECT co_owners.name, properties.address FROM co_owners INNER JOIN properties ON co_owners.property_id = properties.id WHERE properties.city = 'Portland';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a single table with combined location field and misses potential joins or separate city/state columns"
    }
  },
  {
    "example_id": 1572,
    "prompt": "Which cuisine type has the highest average food safety score?",
    "generated_sql": "SELECT cuisine_type, AVG(safety_score) OVER (PARTITION BY cuisine_type ORDER BY AVG(safety_score) DESC) as avg_safety_score FROM food_safety_score GROUP BY cuisine_type HAVING avg_safety_score > 30;",
    "reference_sql": "SELECT cuisine, AVG(score) as avg_score FROM inspections GROUP BY cuisine ORDER BY avg_score DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Window function and HAVING are misused; it filters by >30 instead of selecting the top cuisine by average score"
    }
  },
  {
    "example_id": 1573,
    "prompt": "How many satellites have been launched by SpaceX each year?",
    "generated_sql": "SELECT Year, SUM(Number_of_Satellites) FROM SpaceShipMissions GROUP BY Year;",
    "reference_sql": "SELECT EXTRACT(YEAR FROM launch_date) as launch_year, COUNT(*) as num_satellites FROM satellites WHERE launch_company = 'SpaceX' GROUP BY launch_year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to select only SpaceX missions"
    }
  },
  {
    "example_id": 1574,
    "prompt": "Insert a new spacecraft with ID 6, name 'Spacecraft F', manufacturing date '2022-03-01', country 'Canada', and duration in space 0.",
    "generated_sql": "INSERT INTO Spacecraft (id, name, manufacturing_date, country, duration) VALUES (6, 'Spacecraft F', '2022-03-01', 'Canada', '0.00');",
    "reference_sql": "INSERT INTO Spacecraft (ID, Name, ManufacturingDate, Country, DurationInSpace) VALUES (6, 'Spacecraft F', '2022-03-01', 'Canada', 0);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1575,
    "prompt": "What is the minimum launch cost for SpaceX missions?",
    "generated_sql": "SELECT MIN(launch_cost) FROM SpaceX_Missions;",
    "reference_sql": "SELECT MIN(launch_cost) FROM SpaceXMissions;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1576,
    "prompt": "What is the total mass of spacecraft launched by ESA before 2010?",
    "generated_sql": "SELECT SUM(mass) FROM spacecraft WHERE launch_date > '2010-01-01';",
    "reference_sql": "SELECT SUM(mass) FROM SpacecraftManufacturing WHERE manufacturer = 'ESA' AND launch_date < '2010-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on launch_date are reversed and missing ESA agency filter"
    }
  },
  {
    "example_id": 1577,
    "prompt": "Which player has the highest batting average?",
    "generated_sql": "SELECT PlayerName FROM PlayerBats WHERE PlayerName = 'Aaron Rodgers' OR PlayerName = 'Dustin Johnson' OR PlayerName = 'Jimmy Carter';",
    "reference_sql": "SELECT Player, AVG(Hits / GamesPlayed) AS BattingAverage FROM Players GROUP BY Player ORDER BY BattingAverage DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query does not compute or select the player with the highest batting average"
    }
  },
  {
    "example_id": 1578,
    "prompt": "Find the total number of vulnerabilities for each asset in the 'vulnerabilities' and 'assets' tables",
    "generated_sql": "SELECT asset_name, COUNT(*) FROM vulnerabilities GROUP BY asset_name;",
    "reference_sql": "SELECT a.asset_name, COUNT(v.vulnerability_id) as total_vulnerabilities FROM assets a INNER JOIN vulnerabilities v ON a.asset_id = v.asset_id GROUP BY a.asset_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing join with assets table to count vulnerabilities per asset name"
    }
  },
  {
    "example_id": 1579,
    "prompt": "What is the maximum number of passengers for autonomous ferries in New York City?",
    "generated_sql": "SELECT MAX(num_passengers) FROM ferries WHERE city = 'New York' AND can_automate = true;",
    "reference_sql": "SELECT MAX(passengers) FROM autonomous_ferries WHERE city = 'New York City';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1580,
    "prompt": "Find the top 3 policy types with the highest number of claims in Canada, ordered by the total claim amount in descending order.",
    "generated_sql": "SELECT PolicyType, COUNT(*) AS ClaimCount FROM Claims JOIN ClaimsDates ON Claims.Date = ClaimsDates.Date WHERE Country = 'Canada' GROUP BY PolicyType ORDER BY ClaimCount DESC;",
    "reference_sql": "SELECT PolicyType, COUNT(*) AS ClaimCount, SUM(ClaimAmount) AS TotalClaimAmount FROM Claims WHERE PolicyholderCountry = 'Canada' GROUP BY PolicyType ORDER BY TotalClaimAmount DESC, ClaimCount DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not calculate total claim amount, lacks LIMIT 3, and orders by count instead of total claim amount"
    }
  },
  {
    "example_id": 1581,
    "prompt": "What is the average number of safety issues in workplaces per city?",
    "generated_sql": "SELECT city, AVG(num_issues) FROM workplace_safety GROUP BY city;",
    "reference_sql": "SELECT w.city, AVG(w.safety_issues) OVER (PARTITION BY w.city) AS avg_safety_issues FROM workplaces w INNER JOIN cities c ON w.city = c.city;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1582,
    "prompt": "What is the number of workers represented by the 'Teamsters' and 'UAW' unions?",
    "generated_sql": "SELECT union_name, COUNT(*) FROM union_representations JOIN unions ON union_representations.union_id = unions.union_id WHERE union_name = 'Teamsters' AND union_name = 'UAW' GROUP BY union_name HAVING COUNT(*) >= 1;",
    "reference_sql": "SELECT COUNT(DISTINCT union_membership.worker_id) FROM union_membership INNER JOIN unions ON union_membership.union_id = unions.union_id WHERE unions.union_name IN ('Teamsters', 'UAW');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering uses AND instead of OR/IN, so no union satisfies both names simultaneously"
    }
  },
  {
    "example_id": 1583,
    "prompt": "What is the average safety rating for electric vehicles in each country?",
    "generated_sql": "SELECT country, AVG(safety_rating) FROM vehicle_safety GROUP BY country;",
    "reference_sql": "SELECT Country, AVG(SafetyRating) FROM Vehicles WHERE Type = 'Electric' GROUP BY Country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for electric vehicles"
    }
  },
  {
    "example_id": 1584,
    "prompt": "What are the names of the vessels with the highest average speed that arrived in Busan?",
    "generated_sql": "SELECT vessel_name, AVG(avg_speed) AS avg_speed FROM vessels WHERE port = 'Busan' GROUP BY vessel_name;",
    "reference_sql": "SELECT VesselName FROM (SELECT VesselName, ROW_NUMBER() OVER (ORDER BY AverageSpeed DESC) AS rn FROM VesselArrivals WHERE ArrivalPort = 'Busan') t WHERE rn = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query calculates average speeds but does not select only the vessel(s) with the highest average speed."
    }
  },
  {
    "example_id": 1585,
    "prompt": "What are the names of vessels that have never had safety incidents in North America?",
    "generated_sql": "SELECT name FROM Vessels WHERE state NOT IN ('CA', 'NV', 'MA', 'MT', 'NY', 'FL', 'CA', 'NYC', 'FL', 'MD', 'MA', 'NV', 'MA', 'NYC', 'MA', 'MD', 'MA', 'NYC', 'MA');",
    "reference_sql": "SELECT Vessels.VesselName FROM Vessels LEFT JOIN SafetyIncidents ON Vessels.VesselID = SafetyIncidents.VesselID WHERE SafetyIncidents.IncidentLocation IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query filters by state codes instead of checking incident records for North America"
    }
  },
  {
    "example_id": 1586,
    "prompt": "List all circular economy initiatives from 'initiatives' table",
    "generated_sql": "SELECT id, initiative FROM initiatives;",
    "reference_sql": "SELECT * FROM initiatives WHERE type = 'circular_economy';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to select only circular economy initiatives"
    }
  },
  {
    "example_id": 1587,
    "prompt": "What is the total landfill capacity in Europe as of 2021, separated by region?",
    "generated_sql": "SELECT region, SUM(capacity) FROM landfill_capacity WHERE year = 2021 AND year = (SELECT MAX(year) FROM landfill_capacity WHERE country = 'Europe') GROUP BY region;",
    "reference_sql": "SELECT region, SUM(capacity) FROM LandfillCapacityEurope WHERE year = 2021 GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on country = 'Europe' is incorrect and the redundant MAX(year) subquery misapplies the year filter"
    }
  },
  {
    "example_id": 1588,
    "prompt": "List the names of all sensors and their respective locations from the 'sensor_data' and 'sensor_location' tables",
    "generated_sql": "SELECT name, location FROM sensor_data;",
    "reference_sql": "SELECT sensor_data.sensor_id, sensor_location.location FROM sensor_data INNER JOIN sensor_location ON sensor_data.sensor_id = sensor_location.sensor_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing join with sensor_location table to retrieve locations"
    }
  },
  {
    "example_id": 1589,
    "prompt": "What is the average daily water consumption per capita for the past year?",
    "generated_sql": "SELECT AVG(daily_water_consumption) FROM (SELECT daily_water_consumption FROM water_consumption_by_city WHERE year = YEAR(CURRENT_DATE) - 1 AND city_id = 1) AS city_consumption;",
    "reference_sql": "SELECT c.country_name, AVG(w.consumption_gallons / c.population) as avg_daily_water_consumption_per_capita FROM water_consumption w JOIN countries c ON w.country_abbr = c.country_abbr WHERE w.consumption_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.country_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only city_id=1 and does not compute per capita across all cities"
    }
  },
  {
    "example_id": 1590,
    "prompt": "What is the maximum water consumption in the agricultural sector in Mexico for the year 2020?",
    "generated_sql": "SELECT MAX(water_consumption) FROM water_consumption WHERE country = 'Mexico' AND year = 2020 AND year < 2021;",
    "reference_sql": "SELECT MAX(value) FROM water_consumption_m3 WHERE sector = 'Agricultural' AND region = 'Mexico' AND year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for the agricultural sector"
    }
  },
  {
    "example_id": 1591,
    "prompt": "Find the number of new members acquired each month in 2021, excluding the members who canceled their membership.",
    "generated_sql": "SELECT month, COUNT(DISTINCT member_id) AS new_members FROM members WHERE subscription_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month;",
    "reference_sql": "SELECT MONTH(member_start_date) AS month, COUNT(*) - SUM(CASE WHEN MONTH(member_end_date) < MONTH(member_start_date) THEN 1 ELSE 0 END) AS new_members FROM membership WHERE YEAR(member_start_date) = 2021 GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It does not exclude canceled members and does not extract or alias the month from subscription_date"
    }
  },
  {
    "example_id": 1592,
    "prompt": "Find the algorithm names and their corresponding risk_level in the ai_safety table where the risk_level is 'medium' or 'high'",
    "generated_sql": "SELECT algorithm_name, risk_level FROM ai_safety WHERE risk_level ='medium' OR risk_level = 'high';",
    "reference_sql": "SELECT algorithm, risk_level FROM ai_safety WHERE risk_level IN ('medium', 'high');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1593,
    "prompt": "What is the total number of participants in community development initiatives in rural Africa?",
    "generated_sql": "SELECT COUNT(DISTINCT participant_id) FROM community_development_initiatives_rural_africa;",
    "reference_sql": "SELECT SUM(participants) FROM Community_Development_Initiatives WHERE location = 'Rural Africa';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1594,
    "prompt": "Which habitats have seen a decrease in preservation efforts from 2017 to 2018?",
    "generated_sql": "SELECT h.id, h.name, e.effort, h.effort, e.year, s.name FROM habitats h LEFT JOIN conservation_efforts e ON h.id = e.habitat_id LEFT JOIN conservation_efforts s ON e.id = s.habitat_id WHERE e.year < 2017 AND e.year > 2018 UNION SELECT h.id, h.name, e.effort, h.effort, e.year, s.name FROM habitats h LEFT JOIN conservation",
    "reference_sql": "SELECT Habitat, (Efforts2018 - Efforts2017) AS DecreaseInEfforts FROM (SELECT Habitat, MAX(CASE WHEN Year = 2017 THEN Efforts END) AS Efforts2017, MAX(CASE WHEN Year = 2018 THEN Efforts END) AS Efforts2018 FROM PreservationTrends GROUP BY Habitat) AS Subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Conditions e.year < 2017 AND e.year > 2018 are impossible and query does not compare efforts between 2017 and 2018"
    }
  },
  {
    "example_id": 1595,
    "prompt": "List the species and their average weight in the Mediterranean region?",
    "generated_sql": "SELECT Species, AVG(Weight) FROM SeaLifeOfMediterranean WHERE Region = 'Mediterranean' GROUP BY Species;",
    "reference_sql": "SELECT species_name, avg_weight FROM Species WHERE region = 'Mediterranean';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1596,
    "prompt": "What is the biomass of seafood species at risk in the Mediterranean Sea?",
    "generated_sql": "SELECT species, biomass FROM seafood_species WHERE region = 'Mediterranean Sea' GROUP BY species;",
    "reference_sql": "SELECT biomass FROM seafoodspecies WHERE species IN ('Tuna', 'Sardines') AND location = 'Mediterranean Sea';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for at-risk species and misuses GROUP BY without aggregation"
    }
  },
  {
    "example_id": 1597,
    "prompt": "What is the total production (production) of seafood (product) with organic certification (is_organic) for each country (country) in the 'seafood_production_v3' table, where the total production exceeds 20000 tons?",
    "generated_sql": "SELECT country, SUM(production) as total_production FROM seafood_production_v3 WHERE is_organic = TRUE GROUP BY country;",
    "reference_sql": "SELECT country, SUM(production) FROM seafood_production_v3 WHERE is_organic = TRUE GROUP BY country HAVING SUM(production) > 20000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing HAVING clause to filter total production exceeding 20000"
    }
  },
  {
    "example_id": 1598,
    "prompt": "How many funding sources have contributed to theatre-related productions?",
    "generated_sql": "SELECT COUNT(*) FROM Fundings WHERE Production IN (SELECT Name FROM Theatre_Reality_Studios WHERE Funding_Amount > 0);",
    "reference_sql": "SELECT COUNT(DISTINCT source) FROM TheatreFunding WHERE type = 'Play';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses incorrect table and filters productions by funding_amount rather than theatre-related, and fails to count distinct funding sources"
    }
  },
  {
    "example_id": 1599,
    "prompt": "Number of awards won by female directors?",
    "generated_sql": "SELECT COUNT(*) FROM Directors WHERE gender = 'Female' AND award_won = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM Awards WHERE director_gender = 'female';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts female directors with awards rather than summing the number of awards they have won"
    }
  },
  {
    "example_id": 1600,
    "prompt": "What is the \"license_number\" for the contractor with \"contractor_id\" 1001 in the \"Contractors\" table?",
    "generated_sql": "SELECT contract_id, name FROM Contractors WHERE id = 1001 AND contract_number = 'license_number';",
    "reference_sql": "SELECT license_number FROM Contractors WHERE contractor_id = 1001;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects wrong columns and uses incorrect filter instead of retrieving license_number for contractor_id 1001"
    }
  },
  {
    "example_id": 1601,
    "prompt": "Determine the difference in average retail price between Indica and Sativa strains in California.",
    "generated_sql": "SELECT AVG(price) - (SELECT AVG(price) FROM Indica_Sales WHERE strain_name = 'Indica' AND state_id = 1) AS avg_price FROM Indica_Sales WHERE state_id = 1;",
    "reference_sql": "SELECT AVG(CASE WHEN strain_type = 'Indica' THEN retail_price ELSE NULL END) - AVG(CASE WHEN strain_type = 'Sativa' THEN retail_price ELSE NULL END) as price_difference FROM DispensarySales WHERE state = 'California';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query computes the overall average price instead of Sativa average in the outer query and compares it only to Indica."
    }
  },
  {
    "example_id": 1602,
    "prompt": "What was the total revenue by week for a specific dispensary in Colorado in 2021?",
    "generated_sql": "SELECT DISTINCT DispensaryName, SUM(Revenue) as TotalRevenueByWeek FROM DispensaryRevenue WHERE State = 'Colorado' AND Year = 2021 GROUP BY DispensaryName, SUM(Revenue) ORDER BY TotalRevenueByWeek;",
    "reference_sql": "SELECT d.name, WEEK(s.date) as week, SUM(s.revenue) as total_revenue FROM Dispensaries d JOIN Sales s ON d.id = s.dispid WHERE d.state = 'Colorado' AND d.name = 'Dispensary A' AND YEAR(s.date) = 2021 GROUP BY d.name, week;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing week grouping, no specific dispensary filter, and incorrect GROUP BY usage"
    }
  },
  {
    "example_id": 1603,
    "prompt": "What is the total pro bono hours for attorneys who work on civil cases, ordered by hours?",
    "generated_sql": "SELECT attorneys.attorney_id, SUM(pro_bono_hours.hours) as total_hours FROM attorneys INNER JOIN (SELECT attorneys.id AS attorney_id, COUNT(*) AS pro_bono_hours FROM pro_bono_hours GROUP BY attorneys.id) AS pro_bono_hours ON attorneys.id = pro_bono_hours.attorney_id GROUP BY attorneys.id ORDER BY total_hours DESC;",
    "reference_sql": "SELECT case_type, SUM(hours) as total_hours FROM case_outcomes WHERE case_type = 'Civil' GROUP BY case_type ORDER BY total_hours DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for civil cases and uses COUNT instead of summing hours"
    }
  },
  {
    "example_id": 1604,
    "prompt": "Update the 'production_schedule' table and set 'production_status' to 'completed' for all records where 'shift_time' is '06:00-14:00'",
    "generated_sql": "UPDATE production_schedule SET production_status = 'completed' WHERE shift_time = '06:00-14:00';",
    "reference_sql": "UPDATE production_schedule SET production_status = 'completed' WHERE shift_time = '06:00-14:00';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1605,
    "prompt": "What is the maximum emission level for each chemical compound in the West region in Q2 2021?",
    "generated_sql": "SELECT compound_name, MAX(emission_level) AS max_emission_level FROM chemical_emissions WHERE region = 'West' AND quarter = 2 AND year = 2021 GROUP BY compound_name;",
    "reference_sql": "SELECT chemical_compound, MAX(emission_level) AS max_emission_q2_2021 FROM chemical_emissions WHERE region = 'West' AND emission_date BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY chemical_compound;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1606,
    "prompt": "List all climate communication campaigns in South America and their budgets, sorted by campaign name.",
    "generated_sql": "SELECT campaigns.campaign_name, campaigns.budget FROM campaigns INNER JOIN budget ON campaigns.campaign_id = budget.campaign_id WHERE campaigns.country = 'South America' AND campaigns.budget = (SELECT MAX(budget) FROM budget WHERE campaign_id IN (SELECT campaign_id FROM campaigns WHERE country = 'South America'));",
    "reference_sql": "SELECT campaign_name, country, budget FROM climate_communication_sa WHERE country IN ('South America') ORDER BY campaign_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query restricts results to only the maximum budget campaign instead of listing all campaigns in South America"
    }
  },
  {
    "example_id": 1607,
    "prompt": "What is the maximum investment in climate finance for a single project in Europe?",
    "generated_sql": "SELECT MAX(investment) FROM climate_finance WHERE region = 'Europe';",
    "reference_sql": "SELECT MAX(investment) FROM climate_finance_projects WHERE country IN ('Germany', 'France', 'UK', 'Italy', 'Spain');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1608,
    "prompt": "What was the total R&D expenditure for 'DrugA'?",
    "generated_sql": "SELECT SUM(amount) FROM R&D WHERE drug_name = 'DrugA';",
    "reference_sql": "SELECT SUM(amount) FROM rd_expenditure WHERE drug_name = 'DrugA';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1609,
    "prompt": "What was the total sales revenue of all drugs in Q4 2020 in Mexico?",
    "generated_sql": "SELECT SUM(sales_revenue) FROM drug_sales WHERE drug_name IN ('Steroid', 'Eskalith') AND quarter = 4 AND country = 'Mexico';",
    "reference_sql": "SELECT SUM(revenue) FROM sales WHERE quarter = 'Q4' AND year = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters only two drugs and omits the year condition for 2020"
    }
  },
  {
    "example_id": 1610,
    "prompt": "What is the number of primary care physicians per capita in each state of the United States?",
    "generated_sql": "SELECT State, (COUNT(*) OVER (PARTITION BY State) * 100.0 / SUM(COUNT(*))) AS Primary_Care_Physicians_Per_Capita FROM States;",
    "reference_sql": "SELECT s.name, pc.count / p.total_population AS physicians_per_capita FROM primary_care_physicians pc JOIN us_states s ON pc.state_id = s.id JOIN population p ON pc.state_id = p.state_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses only a States table and aggregates incorrectly; missing primary care physicians and state population data for per capita calculation"
    }
  },
  {
    "example_id": 1611,
    "prompt": "What is the maximum and minimum funding amount by quarter for companies founded in the US?",
    "generated_sql": "SELECT company_name, MIN(funding_amount) as min_funding, MAX(funding_amount) as max_funding FROM company_founding WHERE country = 'USA' GROUP BY company_name;",
    "reference_sql": "SELECT companies.country, funding.quarter, MAX(funding.amount) as max_funding, MIN(funding.amount) as min_funding FROM funding JOIN companies ON funding.company_id = companies.company_id WHERE companies.country = 'USA' GROUP BY companies.country, funding.quarter;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by company_name instead of quarter and does not compute min/max by quarter"
    }
  },
  {
    "example_id": 1612,
    "prompt": "Create a table named \"indigenous_farms\" with columns \"id\", \"name\", \"community\", and \"hectares\" where \"id\" is the primary key",
    "generated_sql": "CREATE TABLE indigenous_farms (id INT PRIMARY KEY, name VARCHAR(255), community VARCHAR(255), hectares INT);",
    "reference_sql": "CREATE TABLE indigenous_farms (id SERIAL PRIMARY KEY, name TEXT, community TEXT, hectares INT);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1613,
    "prompt": "Identify the most common disability-related complaints in each of the last 3 months, and the total number of complaints in each of those months?",
    "generated_sql": "SELECT m.complaint_month, COUNT(c.complaint_id) AS total_complaints FROM complaints c JOIN complaints_month m ON c.complaint_id = m.complaint_id WHERE m.complaint_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY m.complaint_month;",
    "reference_sql": "SELECT MONTH(date) as month, complaint_type, COUNT(*) as num_complaints FROM complaints WHERE date BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW() GROUP BY month, complaint_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "query does not filter for disability-related complaints and does not identify the most common complaint type per month"
    }
  },
  {
    "example_id": 1614,
    "prompt": "What is the percentage of students who received accommodations for mobility impairments?",
    "generated_sql": "SELECT (SUM(CASE WHEN accessibility_ability = 'Mobility' THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN accessibility_ability = 'Mobility' THEN 1 ELSE 0 END)) as accommodations_per_student FROM students;",
    "reference_sql": "SELECT (COUNT(DISTINCT student_id) * 100.0 / (SELECT COUNT(DISTINCT student_id) FROM Students)) as percentage FROM Accommodations WHERE student_id IN ( SELECT student_id FROM DisabilityTypes WHERE disability_type = 'Mobility Impairment');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Denominator divides by mobility count instead of total students"
    }
  },
  {
    "example_id": 1615,
    "prompt": "What is the total budget allocated for physical disability accommodations in South America?",
    "generated_sql": "SELECT SUM(budget) FROM South_Agency WHERE region IN ('Central America', 'Latin America') AND disability_type IN ('Physical Disability', 'Assistive Technology');",
    "reference_sql": "SELECT SUM(Budget) FROM Accommodations WHERE Type LIKE 'Physical%' AND Region = 'South America';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters include incorrect regions and extra disability type instead of only South America and Physical Disability"
    }
  },
  {
    "example_id": 1616,
    "prompt": "What is the average depth of all trenches in the Southern Ocean?",
    "generated_sql": "SELECT AVG(depth) FROM trenches WHERE location = 'Southern Ocean';",
    "reference_sql": "SELECT AVG(depth) FROM oceanography WHERE location = 'Southern Ocean Trench';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1617,
    "prompt": "What are the total unit sales of cosmetics products that are free from parabens and sulfates?",
    "generated_sql": "SELECT SUM(unit_sales) FROM cosmetic_products WHERE is_free_from_parabens = true AND is_free_from_sulfates = true;",
    "reference_sql": "SELECT SUM(product_sales.unit_sales) FROM product_sales JOIN product_safety ON product_sales.product_name = product_safety.product_name WHERE product_safety.is_paraben_free = true AND product_safety.is_sulfate_free = true;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1618,
    "prompt": "What is the total revenue of organic cosmetics sold in the UK in the past month?",
    "generated_sql": "SELECT SUM(sales) FROM sales WHERE is_organic = TRUE AND sale_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND country = 'UK';",
    "reference_sql": "SELECT SUM(revenue) FROM OrganicSales WHERE is_organic = TRUE AND country = 'UK' AND date >= DATEADD(month, -1, GETDATE());",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for product category = cosmetics"
    }
  },
  {
    "example_id": 1619,
    "prompt": "What is the total number of artworks in the 'Artworks' table, grouped by art category?",
    "generated_sql": "SELECT a.Art_Category, COUNT(a.Art_ID) FROM Artworks a GROUP BY a.Art_Category;",
    "reference_sql": "SELECT art_category, COUNT(*) as total FROM Artworks GROUP BY art_category;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1620,
    "prompt": "What is the total number of threat intelligence incidents by day for the last week?",
    "generated_sql": "SELECT EXTRACT(DAY FROM timestamp) AS day, COUNT(*) FROM threat_intelligence WHERE timestamp >= CURRENT_TIMESTAMP() GROUP BY day;",
    "reference_sql": "SELECT IncidentDate, COUNT(*) as NumIncidents FROM ThreatIntelligence WHERE IncidentDate >= DATEADD(day, -7, CURRENT_DATE) GROUP BY IncidentDate;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for the last week and groups by day of month rather than by full date"
    }
  },
  {
    "example_id": 1621,
    "prompt": "What is the total number of military equipment in the 'naval' category, by country?",
    "generated_sql": "SELECT country, SUM(quantity) as total_quantity FROM military_equipment GROUP BY country;",
    "reference_sql": "SELECT country, SUM(number) as total_naval FROM military_equipment_2 WHERE category = 'Naval' GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing WHERE clause to filter for category = 'naval'"
    }
  },
  {
    "example_id": 1622,
    "prompt": "Update the destination to 'Cape Town' for all records with cargo_id 103 in table fleet_management",
    "generated_sql": "UPDATE fleet_management SET destination = 'Cape Town' WHERE cargo_id = 103;",
    "reference_sql": "UPDATE fleet_management SET destination = 'Cape Town' WHERE cargo_id = 103;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1623,
    "prompt": "What is the average gross tonnage of container vessels in each port?",
    "generated_sql": "SELECT port_id, AVG(container_size) as avg_tonnage FROM ports GROUP BY port_id;",
    "reference_sql": "SELECT PortName, AVG(GrossTonnage) AS AvgGrossTonnage FROM Vessel v JOIN Port p ON v.PortID = p.PortID WHERE VesselType = 'Container' GROUP BY PortName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses container_size from ports table instead of gross_tonnage of container vessels and lacks filter for container vessels"
    }
  },
  {
    "example_id": 1624,
    "prompt": "Identify the total number of machines in the 'Circular Economy' category that were manufactured before 2010.",
    "generated_sql": "SELECT COUNT(*) FROM machines WHERE category = 'Circular Economy' AND production_date < '2010-01-01';",
    "reference_sql": "SELECT COUNT(*) FROM Machines WHERE Category = 'Circular Economy' AND ManufacturingYear < 2010;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1625,
    "prompt": "Show the total number of artifacts excavated from site 'Timgad'.",
    "generated_sql": "SELECT COUNT(*) as total_artifacts FROM artifacts WHERE site_id = 10000;",
    "reference_sql": "SELECT COUNT(*) FROM artifact_timgad WHERE site_name = 'Timgad';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses a hard-coded site_id instead of filtering artifacts for site name 'Timgad'"
    }
  },
  {
    "example_id": 1626,
    "prompt": "Find the total value of social impact bonds issued by each organization.",
    "generated_sql": "SELECT org_name, SUM(bonds_amount) as total_value FROM social_impact_bonds GROUP BY org_name;",
    "reference_sql": "SELECT organization_name, SUM(value) as total_value FROM social_impact_bonds GROUP BY organization_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1627,
    "prompt": "List all social impact investments in the Healthcare sector with ESG scores above 80, ordered by investment date and ESGScore, including only investments made by investors from the United Kingdom.",
    "generated_sql": "SELECT InvestmentID, InvestorID, InvestorName, Year, SUM(ESGScore) as ESGScore FROM SocialImpactInvestments WHERE Sector = 'Healthcare' AND ESGScore > 80 GROUP BY InvestmentID, InvestorID, InvestorName, Year ORDER BY InvestmentDate;",
    "reference_sql": "SELECT * FROM SocialImpactInvestments WHERE Sector = 'Healthcare' AND ESGScore > 80 AND InvestorCountry = 'UK' ORDER BY InvestmentDate, ESGScore DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for UK investors, incorrect aggregation of ESGScore, and missing ordering by ESGScore"
    }
  },
  {
    "example_id": 1628,
    "prompt": "What is the ranking of national security measures for Russia based on the publication date?",
    "generated_sql": "SELECT country, MAX(measure_rank) OVER (ORDER BY publication_date DESC) as max_rank FROM national_security_measure_preparations;",
    "reference_sql": "SELECT title, description, agency, date, ROW_NUMBER() OVER (PARTITION BY agency ORDER BY date DESC) as ranking FROM national_security WHERE agency = 'Russian Government';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for Russia, misuses MAX window and does not list measure rankings ordered by publication_date"
    }
  },
  {
    "example_id": 1629,
    "prompt": "Update the genre for a specific song",
    "generated_sql": "UPDATE songs SET genre = 'Pop' OR genre = 'Rock' WHERE artist_id = 1 AND song_id = 1;",
    "reference_sql": "UPDATE songs SET genre = 'rock' WHERE id = 456 AND title = 'Bohemian Rhapsody';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Invalid use of OR in SET clause; should assign a single genre."
    }
  },
  {
    "example_id": 1630,
    "prompt": "What are the total views for all open education resources in each language and format, ordered by views?",
    "generated_sql": "SELECT languages.name, languages.format, SUM(views.views) FROM (SELECT languages.name, languages.format, views.views FROM languages JOIN views ON languages.language_id = views.language_id) AS total_views WHERE languages.name IN (SELECT languages.name FROM languages WHERE languages.format = 'HTML') OR languages.name IN (SELECT languages.name FROM languages WHERE languages.format = 'CSS') OR languages.name IN (SELECT languages.name FROM languages WHERE languages.format = 'JavaScript');",
    "reference_sql": "SELECT language, format, SUM(views) as total_views FROM open_education_resources GROUP BY language, format ORDER BY total_views DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing GROUP BY and ORDER BY clauses and incorrect filtering logic with unnecessary subqueries"
    }
  },
  {
    "example_id": 1631,
    "prompt": "What is the average salary for employees who identify as female or non-binary, grouped by their department?",
    "generated_sql": "SELECT department, AVG(salary) FROM employees WHERE gender IS NOT NULL AND gender IS NOT NULL AND gender IS NOT NULL GROUP BY department;",
    "reference_sql": "SELECT e.Department, AVG(e.Salary) as AvgSalary FROM Employees e WHERE e.Gender IN ('Female', 'Non-binary') GROUP BY e.Department;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "WHERE clause does not filter for female or non-binary genders"
    }
  },
  {
    "example_id": 1632,
    "prompt": "What is the difference in average salary between employees who have and have not completed diversity and inclusion training, by job title and region?",
    "generated_sql": "SELECT JobTitle, Region, AVG(Salary) as AvgSalary FROM Employees WHERE Training = 'Diversity and Inclusion Training' GROUP BY JobTitle, Region;",
    "reference_sql": "SELECT Region, JobTitle, AVG(CASE WHEN CompletedDiversityTraining THEN Salary ELSE NULL END) - AVG(CASE WHEN NOT CompletedDiversityTraining THEN Salary ELSE NULL END) AS Salary_Difference FROM Employees GROUP BY Region, JobTitle;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only computes the average salary for trained employees and does not include the non-trained group or calculate the difference."
    }
  },
  {
    "example_id": 1633,
    "prompt": "What is the average number of steals per game for the Lakers?",
    "generated_sql": "SELECT AVG(game_stolen_by) FROM game_stolen WHERE team_name = 'Lakers';",
    "reference_sql": "SELECT AVG(home_team_steals + away_team_steals) as avg_steals FROM games WHERE home_team_id = (SELECT team_id FROM teams WHERE team_name = 'Lakers') OR away_team_id = (SELECT team_id FROM teams WHERE team_name = 'Lakers');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Use of column game_stolen_by is incorrect for the number of steals; it likely stores a player identifier rather than the count of steals"
    }
  },
  {
    "example_id": 1634,
    "prompt": "Which NFL team has the most Super Bowl titles?",
    "generated_sql": "SELECT Name, SUM(Title) AS Total_Titles FROM NFL_Titles GROUP BY Name ORDER BY Total_Titles DESC LIMIT 1;",
    "reference_sql": "SELECT name FROM nfl_teams WHERE super_bowl_wins = (SELECT MAX(super_bowl_wins) FROM nfl_teams);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using SUM(Title) assumes Title is numeric; should count title records instead"
    }
  },
  {
    "example_id": 1635,
    "prompt": "What is the total amount of funds allocated for each type of disaster?",
    "generated_sql": "SELECT disaster_type, SUM(amount) FROM disaster_allocation GROUP BY disaster_type;",
    "reference_sql": "SELECT DisasterType, SUM(AllocatedAmount) as TotalFunds FROM DisasterFunds GROUP BY DisasterType;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1636,
    "prompt": "Who is the contact person for the 'refugee support' sector?",
    "generated_sql": "SELECT name FROM sector_support WHERE sector ='refugee support' AND sector ='refugee support';",
    "reference_sql": "SELECT name, email FROM contacts WHERE sector = 'refugee support';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Selecting name instead of contact person and redundant WHERE clause"
    }
  },
  {
    "example_id": 1637,
    "prompt": "What is the total number of ethical AI projects in the healthcare sector?",
    "generated_sql": "SELECT COUNT(*) FROM ai_projects WHERE sector = 'Healthcare';",
    "reference_sql": "SELECT sector, SUM(projects) FROM Ethical_AI WHERE sector = 'Healthcare';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query misses a condition to filter for ethical AI projects."
    }
  },
  {
    "example_id": 1638,
    "prompt": "Who are the top 3 suppliers of recycled polyester?",
    "generated_sql": "SELECT supplier_name, COUNT(*) as count FROM suppliers WHERE polyester_material = 'Recycled Polyester' GROUP BY supplier_name ORDER BY count DESC LIMIT 3;",
    "reference_sql": "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts supplier records instead of ranking suppliers by the actual quantity or volume of recycled polyester supplied."
    }
  },
  {
    "example_id": 1639,
    "prompt": "What is the most popular post category on TikTok in the last week?",
    "generated_sql": "SELECT post_category, COUNT(*) AS count FROM posts WHERE timestamp >= NOW() - INTERVAL '1 week' GROUP BY post_category ORDER BY count DESC LIMIT 1;",
    "reference_sql": "SELECT category, COUNT(*) AS count FROM post_data WHERE platform = 'TikTok' AND date >= DATEADD(week, -1, GETDATE()) GROUP BY category ORDER BY count DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1640,
    "prompt": "Compute the average financial wellbeing score change for customers from the previous quarter.",
    "generated_sql": "SELECT AVG(score) FROM financial_wellbeing_change WHERE quarter = 1;",
    "reference_sql": "SELECT AVG(score - LAG(score) OVER (PARTITION BY customer_id ORDER BY measure_date)) AS avg_change FROM financial_wellbeing;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on a fixed quarter=1 instead of dynamically computing the previous quarter change"
    }
  },
  {
    "example_id": 1641,
    "prompt": "How many clients have taken out socially responsible loans in each country, excluding loans from clients in Saudi Arabia and the UAE?",
    "generated_sql": "SELECT country, COUNT(*) as num_loans FROM socially_responsible_loans WHERE country IN ('Saudi Arabia', 'UAE') GROUP BY country;",
    "reference_sql": "SELECT client_country, COUNT(DISTINCT client_id) as num_clients FROM socially_responsible_loans WHERE client_country NOT IN ('Saudi Arabia', 'UAE') GROUP BY client_country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters for Saudi Arabia and UAE instead of excluding them and counts loans rather than distinct clients."
    }
  },
  {
    "example_id": 1642,
    "prompt": "What is the average financial wellbeing program duration in South America by country?",
    "generated_sql": "SELECT country, AVG(duration) FROM financial_wellbeing_programs WHERE region = 'South America' GROUP BY country;",
    "reference_sql": "SELECT regions.country, AVG(DATEDIFF('day', program_views.start_date, program_views.end_date)) AS avg_duration FROM program_views INNER JOIN regions ON program_views.region_id = regions.id WHERE program_views.is_financial_wellbeing = TRUE AND regions.country IN ('South America') GROUP BY regions.country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1643,
    "prompt": "Delete all records from the 'food_recalls' table that have a 'recall_date' before '2020-01-01'",
    "generated_sql": "DELETE FROM food_recalls WHERE recall_date < '2020-01-01';",
    "reference_sql": "DELETE FROM food_recalls WHERE recall_date < '2020-01-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1644,
    "prompt": "How many GMO products were sold in Italy in 2020?",
    "generated_sql": "SELECT COUNT(*) FROM Products WHERE Genetically Modified = true AND Country = 'Italy' AND Sales > 0;",
    "reference_sql": "SELECT COUNT(*) FROM sales_gmo WHERE is_gmo = true AND EXTRACT(YEAR FROM sale_date) = 2020 AND country = 'Italy';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for year 2020"
    }
  },
  {
    "example_id": 1645,
    "prompt": "How many shipments were made in each country in the last month?",
    "generated_sql": "SELECT country, SUM(quantity) as total_quantity FROM shipments WHERE date BETWEEN DATEADD(month, -1, GETDATE()) AND GETDATE() GROUP BY country;",
    "reference_sql": "SELECT W.Country, COUNT(*) AS ShipmentsInCountry, YEAR(S.ShipmentDate) AS ShipmentYear, MONTH(S.ShipmentDate) AS ShipmentMonth FROM Warehouses W JOIN Shipments S ON W.WarehouseID = S.WarehouseID WHERE S.ShipmentDate >= DATEADD(month, -1, GETDATE()) GROUP BY W.Country, YEAR(S.ShipmentDate), MONTH(S.ShipmentDate);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It uses SUM(quantity) instead of counting the number of shipments."
    }
  },
  {
    "example_id": 1646,
    "prompt": "What is the total quantity of each product shipped from the Tokyo warehouse?",
    "generated_sql": "SELECT p.product_id, p.warehouse_id, SUM(q.quantity) as total_quantity FROM shipments p JOIN orders o ON p.product_id = o.product_id JOIN warehouses w ON o.warehouse_id = w.warehouse_id WHERE w.warehouse_id = (SELECT w.id FROM warehouses w WHERE w.name = 'Tokyo') GROUP BY p.product_id, p.warehouse_id;",
    "reference_sql": "SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM Shipments WHERE WarehouseID = 3 GROUP BY ProductName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Joins and aliases are incorrect: quantity alias 'q' undefined, unnecessary join to orders, and warehouse_id comparison mismatches column names"
    }
  },
  {
    "example_id": 1647,
    "prompt": "What is the number of traffic accidents in Toronto involving cyclists in the last 3 years, and how many resulted in injuries?",
    "generated_sql": "SELECT COUNT(*) FROM traffic_accidents WHERE accident_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR) AND accident_type = 'cyclist' AND accident_id IN (SELECT id FROM accidents WHERE location = 'Toronto') AND accident_type = 'cyclist';",
    "reference_sql": "SELECT COUNT(*) AS total_accidents, SUM(injury) AS injury_accidents FROM traffic_accidents WHERE location = 'Toronto' AND accident_type = 'cyclist' AND year BETWEEN 2019 AND 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only returns total accidents count; missing count of those resulting in injuries"
    }
  },
  {
    "example_id": 1648,
    "prompt": "How many graduate students from underrepresented communities are enrolled in STEM programs?",
    "generated_sql": "SELECT COUNT(*) FROM student_data WHERE community IN ('African American', 'Indigenous', 'Hispanic', 'Asian Pacific Islander', 'Native Hawaiian', 'Pacific Islander');",
    "reference_sql": "SELECT COUNT(*) FROM Students WHERE Program LIKE '%STEM%' AND Community IN ('African American', 'Hispanic', 'Native American')",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filters for graduate status and STEM programs"
    }
  },
  {
    "example_id": 1649,
    "prompt": "What is the maximum grant amount awarded to any research project in the Chemistry department?",
    "generated_sql": "SELECT MAX(grant_amount) FROM Grants WHERE department = 'Chemistry';",
    "reference_sql": "SELECT MAX(amount) FROM grants WHERE department = 'Chemistry';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1650,
    "prompt": "What is the number of research publications for each student, sorted by the number of publications in descending order?",
    "generated_sql": "SELECT s.student_id, s.name, COUNT(r.publish_id) as num_publications FROM student s INNER JOIN publications r ON s.id = r.student_id GROUP BY s.student_id, s.name ORDER BY num_publications DESC;",
    "reference_sql": "SELECT StudentName, COUNT(*) as NumPublications FROM Publications p JOIN GraduateStudents gs ON p.StudentID = gs.StudentID GROUP BY StudentName ORDER BY NumPublications DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses INNER JOIN, excluding students with zero publications instead of including all students"
    }
  },
  {
    "example_id": 1651,
    "prompt": "What is the distribution of mental health parity compliance scores for each health equity metric?",
    "generated_sql": "SELECT metric, COUNT(*) as compliance_count, SUM(compliant_score) as compliance_score_sum FROM compliance_scores GROUP BY metric;",
    "reference_sql": "SELECT HealthEquityMetric, AVG(ComplianceScore) as Avg_Score, STDDEV(ComplianceScore) as StdDev_Score FROM ParityCompliance GROUP BY HealthEquityMetric;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query only returns count and sum per metric but does not show the distribution of compliance scores across metrics."
    }
  },
  {
    "example_id": 1652,
    "prompt": "List the top 3 countries with the most heritage sites and the number of sites for each?",
    "generated_sql": "SELECT country, site_count, SUM(site_count) AS total_sites FROM heritage_sites GROUP BY country ORDER BY total_sites DESC LIMIT 3;",
    "reference_sql": "SELECT country, COUNT(*) AS num_sites FROM heritage_sites GROUP BY country ORDER BY num_sites DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(site_count) and selects site_count instead of COUNT(*) per country, grouping is incorrect"
    }
  },
  {
    "example_id": 1653,
    "prompt": "What is the percentage of hotels in the EU that have adopted AI technology?",
    "generated_sql": "SELECT ac.technology, COUNT(ac.hotel_id) AS num_hotels, 100.0 * COUNT(ac.id) / COUNT(DISTINCT ac.id) AS pct_ai  FROM hotels_eu ac WHERE ac.location LIKE '%EU%' GROUP BY ac.technology;",
    "reference_sql": "SELECT (COUNT(*) FILTER (WHERE ai_adoption = TRUE) * 100.0 / COUNT(*)) FROM hotel_tech WHERE country IN ('EU', 'Europe');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by technology and incorrect denominator; does not calculate AI hotels over total EU hotels"
    }
  },
  {
    "example_id": 1654,
    "prompt": "How many species were observed per month in the Tundra Biology Study?",
    "generated_sql": "SELECT COUNT(*) FROM wildlife_observations WHERE species_count = (SELECT COUNT(*) FROM wildlife_observations WHERE study = 'Tundra Biology Study');",
    "reference_sql": "SELECT month, AVG(species_observed) FROM TundraBiologyStudy GROUP BY year, month HAVING AVG(species_observed) > 25;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by study or group by month; logic is incorrect"
    }
  },
  {
    "example_id": 1655,
    "prompt": "What is the average temperature per month in each region in the 'temperature_readings' table?",
    "generated_sql": "SELECT region, AVG(temperature) FROM temperature_readings GROUP BY region;",
    "reference_sql": "SELECT DATE_TRUNC('month', reading_date) AS month, region, AVG(temperature) FROM temperature_readings GROUP BY month, region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query groups only by region; it needs to extract and group by month as well"
    }
  },
  {
    "example_id": 1656,
    "prompt": "How many traditional musicians are registered in Mexico?",
    "generated_sql": "SELECT COUNT(musicians.id) FROM musicians INNER JOIN musicians_tour ON musicians_tour.song_id = musicians.id WHERE artists.country = 'Mexico';",
    "reference_sql": "SELECT COUNT(*) FROM traditional_musicians WHERE country = 'Mexico';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query incorrectly joins tables, references undefined table 'artists', and does not filter for traditional musicians or use the correct country column"
    }
  },
  {
    "example_id": 1657,
    "prompt": "Who are the top 3 contributors to heritage site preservation efforts in Africa?",
    "generated_sql": "SELECT name, COUNT(*) AS total_contributors FROM heritage_sites WHERE country IN ('Nigeria', 'Nigeria', 'Kenya', 'Kenya', 'South Africa', 'South Africa') GROUP BY name ORDER BY total_contributors DESC LIMIT 3;",
    "reference_sql": "SELECT name FROM contributors ORDER BY amount_donated DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters wrong countries, duplicates them, and counts sites instead of contributor efforts"
    }
  },
  {
    "example_id": 1658,
    "prompt": "What is the count of bridges in California with seismic retrofit needs, categorized by bridge type and construction year?",
    "generated_sql": "SELECT bridge_type, construction_year, COUNT(*) FROM bridges WHERE state = 'CA' AND seismic_ retrofit = TRUE GROUP BY bridge_type, construction_year;",
    "reference_sql": "SELECT bridge_type, construction_year, COUNT(*) as count FROM Bridges WHERE state = 'CA' AND seismic_retrofit_need = TRUE GROUP BY bridge_type, construction_year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Column name 'seismic_ retrofit' contains an unexpected space; should use the correct field name (e.g., seismic_retrofit)"
    }
  },
  {
    "example_id": 1659,
    "prompt": "What is the maximum resilience score for infrastructure projects in Texas?",
    "generated_sql": "SELECT MAX(resilience_score) FROM InfrastructureProjects WHERE state = 'Texas';",
    "reference_sql": "SELECT MAX(ResilienceScore) FROM Infrastructure WHERE Location = 'Texas';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1660,
    "prompt": "Find the average carbon footprint of all 'sustainable_tourism' activities.",
    "generated_sql": "SELECT AVG(carbon_footprint) FROM sustainable_tourism;",
    "reference_sql": "SELECT AVG(carbon_footprint) FROM sustainable_tourism;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1661,
    "prompt": "What is the average hotel rating for eco-friendly hotels in Japan?",
    "generated_sql": "SELECT AVG(hotel_rating) FROM hotels WHERE country = 'Japan' AND country = 'Eco-friendly';",
    "reference_sql": "SELECT AVG(stars) FROM hotels WHERE is_eco_friendly = true AND country = 'Japan';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly uses country = 'Eco-friendly' instead of filtering on an eco-friendly indicator column."
    }
  },
  {
    "example_id": 1662,
    "prompt": "What is the total number of marine mammals in the Gulf of Mexico, excluding dolphins and whales?",
    "generated_sql": "SELECT marine_mammal_count FROM marine_mammals WHERE ocean = 'Gulf of Mexico' ORDER BY marine_mammal_count DESC;",
    "reference_sql": "SELECT SUM(count) FROM marine_mammals WHERE species NOT IN ('dolphin', 'whale') AND region = 'Gulf of Mexico';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not exclude dolphins and whales and does not compute the total (SUM) of marine mammals."
    }
  },
  {
    "example_id": 1663,
    "prompt": "What is the average number of users per media platform in the last month?",
    "generated_sql": "SELECT platform, AVG(count) as avg_count FROM media_platforms WHERE last_update >= DATEADD(month, -1, CURRENT_DATE) GROUP BY platform;",
    "reference_sql": "SELECT AVG(number_of_users) FROM (SELECT platform, COUNT(*) AS number_of_users FROM Users WHERE registration_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY platform) AS subquery;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1664,
    "prompt": "List all mining sites and their corresponding labor productivity metrics.",
    "generated_sql": "SELECT * FROM MiningSites WHERE LaborProductivity = 'High';",
    "reference_sql": "SELECT mining_sites.name, labor_productivity.productivity FROM mining_sites JOIN labor_productivity ON mining_sites.id = labor_productivity.site_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters by LaborProductivity = 'High' instead of listing all sites with their metrics"
    }
  },
  {
    "example_id": 1665,
    "prompt": "What is the maximum monthly data usage for broadband subscribers in all regions?",
    "generated_sql": "SELECT MAX(data_usage) FROM (SELECT subscriber_id, SUM(data_usage) FROM subscriber_usage GROUP BY subscriber_id) subquery WHERE subscriber_id IN (SELECT subscriber_id FROM subscriber_usage WHERE region = 'Western') GROUP BY subscriber_id;",
    "reference_sql": "SELECT MAX(data_usage) FROM subscribers;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums data_usage per subscriber across all months, filters only the Western region, and doesn\u2019t group by month or include all regions"
    }
  },
  {
    "example_id": 1666,
    "prompt": "What is the minimum data usage for mobile subscribers in Europe?",
    "generated_sql": "SELECT MIN(data_usage) FROM mobile_subscribers WHERE country = 'Europe' AND usage_type = 'data';",
    "reference_sql": "SELECT MIN(data_usage) FROM mobile_subscribers WHERE continent = 'Europe';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on country = 'Europe' is incorrect; Europe is not a country and the query should filter by region or list of European countries"
    }
  },
  {
    "example_id": 1667,
    "prompt": "Create table for marine protected areas",
    "generated_sql": "CREATE TABLE marine_protected_areas (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), type VARCHAR(255), area_size_km2 DECIMAL(10,2));",
    "reference_sql": "CREATE TABLE marine_protected_areas (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), size FLOAT, year_established INT);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1668,
    "prompt": "What is the conservation status of the 'Giant Pacific Octopus'?",
    "generated_sql": "SELECT conservation_status FROM pacific_octopus_conservation WHERE species = 'Giant Pacific Octopus';",
    "reference_sql": "SELECT conservation_status FROM species WHERE common_name = 'Giant Pacific Octopus';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1669,
    "prompt": "Which countries have the highest and lowest ocean acidity levels?",
    "generated_sql": "SELECT country, RANK() OVER (PARTITION BY ocean_level ORDER BY ocean_level DESC) AS rank_level FROM ocean_acidification;",
    "reference_sql": "SELECT country, avg_ph FROM (SELECT country, avg_ph, ROW_NUMBER() OVER (ORDER BY avg_ph DESC) as rnk FROM ocean_acidity) subq WHERE rnk = 1 OR rnk = (SELECT COUNT(*) FROM ocean_acidity) ORDER BY avg_ph;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query ranks each row per unique level and does not filter for the maximum and minimum acidity values"
    }
  },
  {
    "example_id": 1670,
    "prompt": "List the donation amounts and dates for donations made by the donor with ID = 2, in descending order by date.",
    "generated_sql": "SELECT DATE_FORMAT(donation_date, '%Y-%m') as donor_type, donation_amount, donation_date FROM Donations JOIN Donors ON Donations.donor_id = Donors.id ORDER BY donor_type ASC;",
    "reference_sql": "SELECT DonationAmount, DonationDate FROM Donations WHERE DonorID = 2 ORDER BY DonationDate DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for donor_id=2, wrong ORDER BY clause, and inappropriate DATE_FORMAT selection"
    }
  },
  {
    "example_id": 1671,
    "prompt": "Update the amount donated by DonorA to 1750.00",
    "generated_sql": "UPDATE Donors SET Amount = 1750.00 WHERE DonorID = 1;",
    "reference_sql": "UPDATE Donors SET Amount = 1750.00 WHERE DonorName = 'DonorA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses DonorID = 1 instead of identifying the donor by name (DonorA), so it may not target the correct record"
    }
  },
  {
    "example_id": 1672,
    "prompt": "Identify the top 3 countries with the highest number of players who have adopted virtual reality technology.",
    "generated_sql": "SELECT country, COUNT(DISTINCT player_id) as num_players FROM player_adoption WHERE technology = 'VR' GROUP BY country ORDER BY num_players DESC LIMIT 3;",
    "reference_sql": "SELECT Country, VRAdopters FROM (SELECT Country, VRAdopters, ROW_NUMBER() OVER (ORDER BY VRAdopters DESC) AS RN FROM CountryData JOIN (SELECT PlayerID, VRDevice FROM VRAdoption GROUP BY PlayerID, VRDevice) VR ON CountryData.Country = VR.PlayerCountry) T WHERE RN <= 3",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1673,
    "prompt": "Find the number of times each type of equipment was used in the past month, and the total duration of use.",
    "generated_sql": "SELECT equipment_type, usage, duration, COUNT(*) AS num_used, SUM(duration) AS total_duration FROM EquipmentUsage WHERE usage BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE GROUP BY equipment_type, usage;",
    "reference_sql": "SELECT equipment_type, COUNT(*) as use_count, SUM(usage_duration) as total_duration FROM equipment_data WHERE timestamp >= DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH) GROUP BY equipment_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by usage duplicates results per date; should group only by equipment_type and remove usage and duration from SELECT"
    }
  },
  {
    "example_id": 1674,
    "prompt": "Identify the total nitrogen levels and farm size for farms using a center pivot irrigation system, located in the Europe region.",
    "generated_sql": "SELECT farming_area, SUM(nitrogen_levels) OVER (PARTITION BY farming_area ORDER BY location) AS total_nitrogen FROM farms WHERE center_pivot_irrigation_system = 'Europe' AND farming_area IN ('Europe', 'Europe', 'Europe', 'Europe', 'Europe', 'Europe', 'Europe', 'Europe', 'Europe');",
    "reference_sql": "SELECT f.irrigation_system, f.region, SUM(f.size) AS total_area, AVG(n.nitrogen) AS avg_nitrogen FROM farm f INNER JOIN nitrogen n ON f.id = n.farm_id WHERE f.irrigation_system = 'center pivot' AND f.region = 'Europe' GROUP BY f.irrigation_system, f.region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters for irrigation system and region are incorrect, and aggregation logic with window function is not appropriate for summing nitrogen levels per farm."
    }
  },
  {
    "example_id": 1675,
    "prompt": "List the satellite images in the 'satellite_images' table that were taken before June 2021.",
    "generated_sql": "SELECT * FROM satellite_images WHERE timestamp < '2021-06-01';",
    "reference_sql": "SELECT * FROM satellite_images WHERE capture_date < '2021-06-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1676,
    "prompt": "How many public libraries are there in the state of California?",
    "generated_sql": "SELECT COUNT(*) FROM libraries WHERE state = 'California';",
    "reference_sql": "SELECT COUNT(*) FROM state_facilities WHERE state = 'California' AND facility_type = 'Public Library';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for public libraries; missing condition on library type"
    }
  },
  {
    "example_id": 1677,
    "prompt": "Identify the number of public events organized by the department of community services in the city of Toronto.",
    "generated_sql": "SELECT COUNT(*) FROM events WHERE department = 'Community Services' AND city IN ('Toronto');",
    "reference_sql": "SELECT department, SUM(events) as total_events FROM gov_data.public_events WHERE city = 'Toronto' AND department = 'Community Services' GROUP BY department;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for public events"
    }
  },
  {
    "example_id": 1678,
    "prompt": "Identify REE mining companies that have operations in both the USA and Australia?",
    "generated_sql": "SELECT * FROM mining_companies WHERE country IN ('USA', 'Australia') GROUP BY country HAVING COUNT(DISTINCT country) = 2;",
    "reference_sql": "SELECT company_name FROM company_operations WHERE location IN ('USA', 'Australia') GROUP BY company_name HAVING COUNT(DISTINCT location) = 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by country instead of company; should group by company and filter those with both countries"
    }
  },
  {
    "example_id": 1679,
    "prompt": "What is the average production quantity for Gadolinium in 2017, excluding companies that produced less than 100 units of Terbium the same year?",
    "generated_sql": "SELECT AVG(production_quantity) FROM GadoliniumProduction WHERE year = 2017 AND element = 'Gadolinium';",
    "reference_sql": "SELECT AVG(Quantity) FROM Producers p1 WHERE RareEarth = 'Gadolinium' AND ProductionYear = 2017 AND Quantity > (SELECT SUM(Quantity) FROM Producers p2 WHERE p2.ProducerID = p1.ProducerID AND RareEarth = 'Terbium' AND ProductionYear = 2017) GROUP BY p1.RareEarth, p1.ProductionYear;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not exclude companies that produced less than 100 units of Terbium in 2017."
    }
  },
  {
    "example_id": 1680,
    "prompt": "Which country produced the most Yttrium in 2020?",
    "generated_sql": "SELECT Country, SUM(Production) as TotalProduction FROM YttriumProduction WHERE Year = 2020 GROUP BY Country ORDER BY TotalProduction DESC LIMIT 1;",
    "reference_sql": "SELECT element, country, SUM(quantity) as total_quantity FROM production_country WHERE year = 2020 GROUP BY element, country ORDER BY total_quantity DESC LIMIT 1",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1681,
    "prompt": "What is the minimum monthly rent for studio units in the 'affordable' area?",
    "generated_sql": "SELECT MIN(rent) FROM studios WHERE unit_type ='studio' AND area = 'affordable';",
    "reference_sql": "SELECT MIN(monthly_rent) FROM min_rent WHERE area = 'affordable' AND studio = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1682,
    "prompt": "Get the name and installed capacity of the Wind Farms in the USA with the highest capacity",
    "generated_sql": "SELECT name, installed_capacity FROM Wind_Farms WHERE country = 'USA' AND installed_capacity > (SELECT MAX(installed_capacity) FROM Wind_Farms WHERE country = 'USA');",
    "reference_sql": "SELECT name, capacity_mw FROM wind_farms_us WHERE capacity_mw = (SELECT MAX(capacity_mw) FROM wind_farms_us);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses '>' instead of '=' so it never selects the maximum capacity"
    }
  },
  {
    "example_id": 1683,
    "prompt": "List all solar projects in Spain and their capacities (in MW)",
    "generated_sql": "SELECT * FROM solar_projects WHERE country = 'Spain';",
    "reference_sql": "SELECT * FROM project WHERE country = 'Spain' AND type = 'Solar';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1684,
    "prompt": "Calculate the year-over-year revenue growth for each restaurant.",
    "generated_sql": "SELECT r.restaurant_name, r.location, r.revenue_growth FROM restaurants r JOIN revenue rg ON r.restaurant_id = rg.restaurant_id WHERE r.year = 2021 GROUP BY r.restaurant_name, r.location;",
    "reference_sql": "SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not calculate year-over-year growth; it selects a non-existent revenue_growth column and only filters for 2021 without comparing years."
    }
  },
  {
    "example_id": 1685,
    "prompt": "What is the average revenue earned by each restaurant in the 'Mexican' cuisine category?",
    "generated_sql": "SELECT restaurant_id, AVG(revenue) FROM restaurant_revenue WHERE cuisine = 'Mexican' GROUP BY restaurant_id;",
    "reference_sql": "SELECT name, AVG(revenue) FROM restaurants WHERE cuisine = 'Mexican' GROUP BY name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1686,
    "prompt": "What is the total revenue for each menu category in restaurant E for the month of June 2021?",
    "generated_sql": "SELECT category, SUM(revenue) as total_revenue FROM restaurants WHERE restaurant_id = 1 GROUP BY category;",
    "reference_sql": "SELECT M.MenuCategory, SUM(M.TotalRevenue) as TotalRevenuePerCategory FROM Menus M INNER JOIN Restaurants R ON M.RestaurantID = R.RestaurantID WHERE R.Name = 'E' AND MONTH(M.OrderDate) = 6 AND YEAR(M.OrderDate) = 2021 GROUP BY M.MenuCategory;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for June 2021 date range and assumes restaurant_id=1 without verifying restaurant E"
    }
  },
  {
    "example_id": 1687,
    "prompt": "What is the total revenue generated by restaurants in New York with a seating capacity greater than 100?",
    "generated_sql": "SELECT SUM(revenue) FROM Restaurants INNER JOIN Bookings ON Restaurants.restaurant_id = Bookings.restaurant_id WHERE Restaurants.city = 'New York' AND Bookings.booked_table.served_count > 100;",
    "reference_sql": "SELECT SUM(revenue) FROM restaurants INNER JOIN orders ON restaurants.id = orders.restaurant_id WHERE seating_capacity > 100 AND location = 'New York';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on booking served_count instead of restaurant seating_capacity and unnecessary join"
    }
  },
  {
    "example_id": 1688,
    "prompt": "List all satellites in Low Earth Orbit (LEO) and their respective launch dates.",
    "generated_sql": "SELECT SatelliteName, LaunchDate FROM Satellites WHERE OrbitType = 'LEO';",
    "reference_sql": "SELECT s.Name, s.LaunchDate FROM Satellites s WHERE s.OrbitType = 'Low Earth Orbit';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1689,
    "prompt": "Find the total number of spacecraft launched by each company, grouped by company name and ordered by the total number of spacecraft launched.",
    "generated_sql": "SELECT company, SUM(spacecraft_launched) AS total_launches FROM Companies GROUP BY company ORDER BY total_launches DESC;",
    "reference_sql": "SELECT spacecraft_manufacturer, COUNT(*) as Total_Spacecraft_Launched FROM Space_Missions GROUP BY spacecraft_manufacturer ORDER BY Total_Spacecraft_Launched DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1690,
    "prompt": "How many astrophysics research projects have been conducted by ISRO?",
    "generated_sql": "SELECT COUNT(*) FROM projects WHERE organization = 'ISRO';",
    "reference_sql": "SELECT COUNT(project_name) FROM Astrophysics_Research WHERE conducting_agency = 'ISRO';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for astrophysics research projects"
    }
  },
  {
    "example_id": 1691,
    "prompt": "How many fans attended home games for each team?",
    "generated_sql": "SELECT t.team_id, COUNT(f.fan_id) as fan_count FROM fans f JOIN teams t ON f.team_id = t.team_id GROUP BY t.team_id;",
    "reference_sql": "SELECT t.team_name, SUM(CASE WHEN ga.home_game THEN ga.num_fans ELSE 0 END) as home_game_attendance FROM teams t INNER JOIN game_attendance ga ON t.team_id = ga.team_id GROUP BY t.team_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts all fans by team_id without filtering for home game attendance or joining the games table to identify home games."
    }
  },
  {
    "example_id": 1692,
    "prompt": "What is the maximum trip distance for each vehicle type?",
    "generated_sql": "SELECT vehicle_type, MAX(trip_distance) FROM trips GROUP BY vehicle_type;",
    "reference_sql": "SELECT vehicle_type, MAX(trip_distance) as max_distance FROM trips GROUP BY vehicle_type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1693,
    "prompt": "How many policyholders have a policy start date within the last 30 days, and what is the total number of policies?",
    "generated_sql": "SELECT policyholders.policy_type, COUNT(policyholders.policy_id) as policy_count, SUM(policyholders.policy_amount) as total_policy_amount FROM policyholders INNER JOIN policy_start_date ON policyholders.policy_id = policy_start_date.policy_id WHERE policyholders.policy_start_date >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 30 DAY) GROUP BY policyholders.policy_type;",
    "reference_sql": "SELECT COUNT(DISTINCT id), COUNT(*) FROM policyholders WHERE policy_start_date >= NOW() - INTERVAL 30 DAY;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query groups by policy_type and sums policy_amount instead of returning the overall count of policyholders within the last 30 days and total number of policies as requested."
    }
  },
  {
    "example_id": 1694,
    "prompt": "Identify unions in New York with the highest increase in wage increases in collective bargaining contracts compared to the previous contract.",
    "generated_sql": "SELECT union FROM collective_bargaining WHERE state = 'New York' ORDER BY increase DESC LIMIT 5;",
    "reference_sql": "SELECT u.name, u.state, c.wage_increase, c.contract_end, (SELECT wage_increase FROM CollectiveBargaining cb WHERE cb.contract_end < c.contract_end AND cb.union_id = c.union_id ORDER BY contract_end DESC LIMIT 1) AS previous_wage_increase FROM UnionMembers u JOIN UnionNegotiations n ON u.union_id = n.union_id JOIN CollectiveBargaining c ON u.union_id = c.union_id WHERE u.state = 'NY' ORDER BY c.wage_increase - (SELECT wage_increase FROM CollectiveBargaining cb WHERE cb.contract_end < c.contract_end AND cb.union_id = c.union_id ORDER BY contract_end DESC LIMIT 1) DESC LIMIT 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not compute each union\u2019s wage increase compared to its previous contract, simply orders an existing column and arbitrarily limits results"
    }
  },
  {
    "example_id": 1695,
    "prompt": "What is the total number of labor rights advocacy events for each region, by region name?",
    "generated_sql": "SELECT region, COUNT(*) as total_events, ROW_NUMBER() OVER (PARTITION BY region ORDER BY event_date DESC) as rank FROM labor_rights_advocacy_events GROUP BY region, rank;",
    "reference_sql": "SELECT R.Name, SUM(A.EventCount) as TotalEvents FROM Region R JOIN AdvocacyEvents A ON R.Id = A.RegionId GROUP BY R.Name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly includes a ROW_NUMBER window function and groups by it, rather than simply grouping by region to count events"
    }
  },
  {
    "example_id": 1696,
    "prompt": "Create a view for the top 5 manufacturers with the highest average safety test scores",
    "generated_sql": "CREATE VIEW safety_scores AS SELECT m.name, AVG(s.score) as avg_score FROM manufacturers m INNER JOIN safety_scores s ON m.id = s.manufacturer_id GROUP BY m.name ORDER BY avg_score DESC LIMIT 5;",
    "reference_sql": "CREATE VIEW top_safety_scores AS SELECT manufacturer, AVG(test_score) as avg_score FROM vehicle_safety_testing GROUP BY manufacturer ORDER BY avg_score DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1697,
    "prompt": "Delete vessels that have not been inspected in the last 12 months",
    "generated_sql": "DELETE FROM vessels WHERE inspection_date >= CURDATE() - 12;",
    "reference_sql": "DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query deletes records inspected within the last period and uses an incorrect date subtraction; it should delete where inspection_date < CURDATE() - INTERVAL 12 MONTH."
    }
  },
  {
    "example_id": 1698,
    "prompt": "Find the total number of visitors from Asian countries in the last 2 years.",
    "generated_sql": "SELECT COUNT(visitors) FROM visitor_locations WHERE country IN ('China', 'India', 'Japan', 'South Korea', 'Indonesia', 'Malaysia') AND visit_date >= DATEADD(year, -2, GETDATE());",
    "reference_sql": "SELECT COUNT(*) FROM Visitors INNER JOIN Asian_Countries ON Visitors.country = Asian_Countries.country WHERE visit_year BETWEEN 2020 AND 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incomplete list of Asian countries and COUNT(visitors) may not correctly count total visitors"
    }
  },
  {
    "example_id": 1699,
    "prompt": "List all visitors who have attended the 'Digital Impressionist' installation",
    "generated_sql": "SELECT visitors.name FROM visitors JOIN events ON visitors.id = events.id JOIN installations ON events.id = installations.id WHERE events.name = 'Digital Impressionist';",
    "reference_sql": "SELECT Visitors.id, Visitors.age, Visitors.gender FROM Visitors JOIN Interactions ON Visitors.id = Interactions.visitor_id WHERE Interactions.installation_id = (SELECT id FROM Interactive_Installations WHERE name = 'Digital Impressionist');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect join conditions and filtering by events.name instead of installation name"
    }
  },
  {
    "example_id": 1700,
    "prompt": "What is the number of visitors from the LGBTQ+ community who visited the museum in 2021?",
    "generated_sql": "SELECT COUNT(*) FROM visitors WHERE museum_id = (SELECT id FROM museums WHERE name = 'Museum'AND community = 'LGBTQ+' GROUP BY id HAVING COUNT(*) > 0);",
    "reference_sql": "SELECT COUNT(*) FROM Visitors INNER JOIN CommunityIdentifiers ON Visitors.community_identifier = CommunityIdentifiers.name WHERE CommunityIdentifiers.name = 'LGBTQ+ Community' AND Visitors.visit_date BETWEEN '2021-01-01' AND '2021-12-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by the year 2021, uses community filter on museums table instead of visitors table, and incorrectly retrieves museum_id"
    }
  },
  {
    "example_id": 1701,
    "prompt": "What is the average landfill capacity in megatons in the United States and Canada?",
    "generated_sql": "SELECT country, AVG(capacity) AS avg_capacity FROM landfill_capacity WHERE country IN ('USA', 'Canada') GROUP BY country;",
    "reference_sql": "SELECT AVG(capacity_mt) FROM LandfillCapacity WHERE country IN ('United States', 'Canada');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1702,
    "prompt": "What is the change in recycling rate for Australia between the years 2017 and 2018?",
    "generated_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Recycling_Rates WHERE country = 'Australia' AND year IN (2017, 2018)) AS change FROM Recycling_Rates WHERE country = 'Australia' AND year BETWEEN 2017 AND 2018;",
    "reference_sql": "SELECT (LAG(recycling_rate, 1) OVER (PARTITION BY country ORDER BY year) - recycling_rate) * 100 FROM recycling_rates WHERE country = 'Australia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT aggregation instead of computing the difference in recycling_rate for the two years"
    }
  },
  {
    "example_id": 1703,
    "prompt": "How many droughts were declared in Florida and New York between 2015 and 2020?",
    "generated_sql": "SELECT COUNT(*) FROM drought_declarations WHERE location IN ('Florida', 'New York') AND year BETWEEN 2015 AND 2020 AND year > 2020;",
    "reference_sql": "SELECT state, SUM(number_of_droughts) AS total_droughts FROM drought_declarations WHERE state IN ('Florida', 'New York') AND year BETWEEN 2015 AND 2020 GROUP BY state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Conflicting year conditions (BETWEEN 2015 AND 2020 and year > 2020)"
    }
  },
  {
    "example_id": 1704,
    "prompt": "Identify the sector with the highest water usage in the Asian region.",
    "generated_sql": "SELECT sector, SUM(usage) as total_usage FROM water_usage WHERE region = 'Asia' GROUP BY sector ORDER BY total_usage DESC LIMIT 1;",
    "reference_sql": "SELECT sector, MAX(usage) FROM water_usage WHERE region = 'Asia'",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1705,
    "prompt": "Insert a new record for Arizona in 2021 with a water usage of 8000.",
    "generated_sql": "INSERT INTO water_usage (year, state, usage) VALUES (2021, 'Arizona', 8000);",
    "reference_sql": "INSERT INTO water_usage (state, year, usage) VALUES ('Arizona', 2021, 8000);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1706,
    "prompt": "What is the total water conservation spending for each state in the US?",
    "generated_sql": "SELECT State, SUM(ConservationSpending) FROM WaterSpending WHERE State IN ('Florida', 'Texas', 'California', 'New York') GROUP BY State;",
    "reference_sql": "SELECT state, SUM(spending) FROM us_conservation GROUP BY state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query restricts to only four states instead of all US states"
    }
  },
  {
    "example_id": 1707,
    "prompt": "Identify the most active users in the last week.",
    "generated_sql": "SELECT user_id, activity, MAX(activity) FROM users WHERE activity >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 WEEK) GROUP BY user_id, activity;",
    "reference_sql": "SELECT user_id, AVG(activity_level) as avg_activity_level FROM user_activity WHERE activity_date >= (CURRENT_DATE - INTERVAL '7 days') GROUP BY user_id ORDER BY avg_activity_level DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by activity with MAX(activity) misrepresents user activity; does not count or rank user actions over the past week"
    }
  },
  {
    "example_id": 1708,
    "prompt": "What is the total duration of workout sessions for users who have completed at least 5 sessions of a specific workout type (e.g. cycling)?",
    "generated_sql": "SELECT SUM(duration) FROM workout_sessions WHERE workout_type = 'cycling' AND session_duration BETWEEN DATE_SUB(CURDATE(), INTERVAL 5 DAY);",
    "reference_sql": "SELECT SUM(duration) FROM workout_sessions_details WHERE workout_type = 'Cycling' AND user_id IN (SELECT user_id FROM workout_sessions_details GROUP BY user_id HAVING COUNT(*) >= 5);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter users with at least 5 sessions and misuses session_duration/date filter"
    }
  },
  {
    "example_id": 1709,
    "prompt": "What is the maximum size, in hectares, of rural infrastructure projects in India?",
    "generated_sql": "SELECT MAX(size) FROM rural_infrastructure_projects WHERE country = 'India';",
    "reference_sql": "SELECT MAX(size_ha) FROM rural_infrastructure_projects WHERE country = 'India';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1710,
    "prompt": "What is the total funding (in USD) for rural infrastructure projects in Africa?",
    "generated_sql": "SELECT SUM(funding) FROM RuralInfrastructureProjects WHERE country = 'Africa' AND funding_level = 4;",
    "reference_sql": "SELECT SUM(funding_amount) FROM Rural_Infrastructure_Projects WHERE region = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering by country='Africa' and funding_level is unnecessary; should filter by continent or region and sum all funding without funding_level condition"
    }
  },
  {
    "example_id": 1711,
    "prompt": "What is the total number of satellites manufactured by SpaceTech in 2020?",
    "generated_sql": "SELECT SUM(satellite_count) FROM space_tech_manufacturing WHERE year = 2020;",
    "reference_sql": "SELECT COUNT(*) FROM Satellites WHERE manufacturer = 'SpaceTech' AND EXTRACT(YEAR FROM launch_date) = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1712,
    "prompt": "How many farms of each type are there, grouped by farm type?",
    "generated_sql": "SELECT farm_type, COUNT(*) as farms_count FROM farms GROUP BY farm_type;",
    "reference_sql": "SELECT farm_type, COUNT(*) FROM farm_count_by_type GROUP BY farm_type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1713,
    "prompt": "Find the number of unique audience demographics",
    "generated_sql": "SELECT DISTINCT audience_demographics.id, COUNT(DISTINCT audience_demographics.id) FROM audience_demographics INNER JOIN audience_demographics_data ON audience_demographics.id = audience_demographics_data.audience_id AND audience_demographics.id = audience_demographics_data.audience_id INNER JOIN audience_demographics_data_data ON audience_demographics_data.id = audience_demographics_data.audience_id WHERE audience_demographics.audience_type = 'Drama' GRO",
    "reference_sql": "SELECT COUNT(DISTINCT city, age, gender) FROM Audience;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary joins and filter, incorrect use of DISTINCT and COUNT without grouping"
    }
  },
  {
    "example_id": 1714,
    "prompt": "How many visitors attended events by city in 2020?",
    "generated_sql": "SELECT city, COUNT(DISTINCT event_id) as num_events FROM events WHERE year = 2020 GROUP BY city;",
    "reference_sql": "SELECT city, SUM(num_visitors) AS total_visitors FROM Events WHERE YEAR(event_date) = 2020 GROUP BY city;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts events per city instead of summing the number of visitors per city"
    }
  },
  {
    "example_id": 1715,
    "prompt": "What is the number of performances in the 'Performances' table with a duration greater than 60 minutes?",
    "generated_sql": "SELECT COUNT(*) FROM Performances WHERE Duration >= 60;",
    "reference_sql": "SELECT COUNT(*) FROM Performances WHERE duration > 60;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses >= instead of >, includes durations equal to 60"
    }
  },
  {
    "example_id": 1716,
    "prompt": "How many movies were released by Studio Ghibli between 1985 and 2010?",
    "generated_sql": "SELECT COUNT(*) FROM movies WHERE studio = 'S.G.H.' AND release_date >= '1985-01-01' AND release_date <= '2010-01-01';",
    "reference_sql": "SELECT COUNT(*) FROM Studio_Ghibli WHERE year BETWEEN 1985 AND 2010;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses incorrect studio identifier 'S.G.H.' instead of 'Studio Ghibli' and end date cutoff excludes movies released after 2010-01-01"
    }
  },
  {
    "example_id": 1717,
    "prompt": "What is the minimum number of days to complete a green construction project in Rio de Janeiro with a budget of over $10 million?",
    "generated_sql": "SELECT MIN(days_to_complete) FROM green_projects WHERE location = 'Rio de Janeiro' AND budget > 100000000 AND year = 2022;",
    "reference_sql": "SELECT MIN(Days_To_Complete) FROM Green_Project_Timelines WHERE City = 'Rio de Janeiro' AND Budget > 10000000;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters budget > 100,000,000 instead of > 10,000,000 and erroneously includes a year = 2022 condition."
    }
  },
  {
    "example_id": 1718,
    "prompt": "What is the total budget for construction projects in Texas that started in 2016?",
    "generated_sql": "SELECT SUM(budget) FROM projects WHERE start_date < '2016-01-01' AND end_date >= '2016-12-31';",
    "reference_sql": "SELECT SUM(budget) FROM Project_Budget WHERE state = 'Texas' AND start_date LIKE '2016-%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses incorrect date filters and omits Texas and construction project filters"
    }
  },
  {
    "example_id": 1719,
    "prompt": "How many unique customers made purchases in the state of California in the month of January 2021?",
    "generated_sql": "SELECT COUNT(DISTINCT customer_id) FROM customer_data WHERE state = 'California' AND purchase_date BETWEEN '2021-01-01' AND '2021-01-31' AND purchase_date BETWEEN '2021-01-01' AND '2021-01-31';",
    "reference_sql": "SELECT COUNT(DISTINCT customer_id) FROM (SELECT customer_id FROM purchases WHERE state = 'California' AND month = 1 AND year = 2021) AS subquery;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1720,
    "prompt": "Delete the view for displaying redundant billing data",
    "generated_sql": "DELETE FROM billing_data WHERE data_type = 'Redundancy';",
    "reference_sql": "DROP VIEW redundant_billing_view;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Deletes rows instead of dropping the view"
    }
  },
  {
    "example_id": 1721,
    "prompt": "What is the number of climate communication campaigns launched in each month for the year 2022?",
    "generated_sql": "SELECT EXTRACT(MONTH FROM launch_date) AS month, COUNT(*) FROM climate_communication WHERE launch_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY month;",
    "reference_sql": "SELECT EXTRACT(MONTH FROM launch_date) AS month, COUNT(DISTINCT campaign_name) FROM climate_communication WHERE EXTRACT(YEAR FROM launch_date) = 2022 GROUP BY month;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1722,
    "prompt": "What are the maximum and minimum R&D expenses for drugs approved in the US?",
    "generated_sql": "SELECT drug_name, R.expenses.max_expense, R.expenses.min_expense, R.expenses.expenditure, SUM(DATEDIFF(Downtime, R.expenses.expenditure)) as dty_expense_avg FROM drug_expenses r JOIN drug_drugs d ON r.drug_id = d.drug_id WHERE r.drug_id IN (SELECT drug_id FROM drug_drugs WHERE drug_name = 'Drug123') GROUP BY drug_name;",
    "reference_sql": "SELECT MAX(rd_expenses) as max_rd_expenses, MIN(rd_expenses) as min_rd_expenses FROM drug_rd_expenses INNER JOIN drug_approval ON drug_rd_expenses.drug_name = drug_approval.drug_name WHERE drug_approval.approval_status = 'approved' AND drug_approval.approval_country = 'US';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "Query does not compute max/min R&D expenses for US approved drugs and uses incorrect filters and columns"
    }
  },
  {
    "example_id": 1723,
    "prompt": "Find the name and age of all patients who have received the flu vaccine.",
    "generated_sql": "SELECT name, age FROM flu_vaccination;",
    "reference_sql": "SELECT name, age FROM patients WHERE flu_vaccine = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not join patients and vaccination tables to identify those who received the flu vaccine"
    }
  },
  {
    "example_id": 1724,
    "prompt": "How many flu shots were given in Texas during the month of November in the year 2020?",
    "generated_sql": "SELECT COUNT(*) FROM flu_shots WHERE state = 'Texas' AND month = 12 AND year = 2020;",
    "reference_sql": "SELECT COUNT(*) FROM flu_shots WHERE state = 'TX' AND MONTH(shot_date) = 11 AND YEAR(shot_date) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses month = 12 (December) instead of month = 11 (November)."
    }
  },
  {
    "example_id": 1725,
    "prompt": "What is the average soil pH for each region in the past 3 months?",
    "generated_sql": "SELECT region, AVG(pH) FROM pH_records WHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY region;",
    "reference_sql": "SELECT region, AVG(soil_pH) OVER(PARTITION BY region ORDER BY date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) as avg_soil_pH FROM SoilPH WHERE date >= DATEADD(month, -3, CURRENT_DATE);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1726,
    "prompt": "How many employees in 'Accessibility Services' have a master's degree or higher?",
    "generated_sql": "SELECT COUNT(*) FROM employees WHERE level = 'Master' AND occupation = 'Accessibility Services'",
    "reference_sql": "SELECT COUNT(*) FROM EmployeeEducation WHERE Department = 'Accessibility Services' AND Degree IN ('Master''s', 'Doctorate');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It only counts level='Master' and omits higher degrees (e.g., Doctorate)"
    }
  },
  {
    "example_id": 1727,
    "prompt": "Delete the species with the lowest primary productivity value.",
    "generated_sql": "DELETE FROM species WHERE primary_productivity = (SELECT MAX(primary_productivity) FROM species);",
    "reference_sql": "DELETE FROM marine_species m WHERE m.id = (SELECT o.species_id FROM oceanography o JOIN (SELECT species_id, MIN(primary_productivity) AS min_pp FROM oceanography GROUP BY species_id) o2 ON o.species_id = o2.species_id WHERE o.primary_productivity = o2.min_pp);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MAX instead of MIN, deleting highest productivity rather than lowest"
    }
  },
  {
    "example_id": 1728,
    "prompt": "What are the top 5 warmest seas and their average temperatures?",
    "generated_sql": "SELECT Sea, AVG(Temperature) as AvgTemperature FROM Sea WHERE AverageTemperature > (SELECT AVG(Temperature) FROM Sea) GROUP BY Sea ORDER BY AvgTemperature DESC LIMIT 5;",
    "reference_sql": "SELECT name, avg_temp FROM sea_temps ORDER BY avg_temp DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters seas above the overall average using a WHERE on AverageTemperature (aggregate), instead of simply computing and ordering the average temperatures to select the top 5."
    }
  },
  {
    "example_id": 1729,
    "prompt": "What is the maximum depth ever recorded for a marine species habitat?",
    "generated_sql": "SELECT MAX(depth) FROM marine_species_habitat_max;",
    "reference_sql": "SELECT MAX(max_habitat_depth) FROM species;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses a non-existent summary table and does not filter habitats to marine species"
    }
  },
  {
    "example_id": 1730,
    "prompt": "How many decentralized applications were created by developers from Asia in the year 2021?",
    "generated_sql": "SELECT COUNT(*) FROM dapps WHERE developer_origin LIKE 'Asia%' AND year = 2021;",
    "reference_sql": "SELECT COUNT(*) FROM DApps JOIN Developers ON DApps.developer_id = Developers.id WHERE Developers.region = 'Asia' AND DApps.creation_date >= '2021-01-01' AND DApps.creation_date < '2022-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering developer_origin with LIKE 'Asia%' may not correctly identify all developers from Asia"
    }
  },
  {
    "example_id": 1731,
    "prompt": "What are the names and balances of all digital assets with a type of 'ERC20'?",
    "generated_sql": "SELECT name, balance FROM digital_assets WHERE type = 'ERC20'",
    "reference_sql": "SELECT name, balance FROM digital_assets WHERE type = 'ERC20';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1732,
    "prompt": "What are the top 5 digital assets by market capitalization?",
    "generated_sql": "SELECT asset_name, market_cap FROM MarketCap WHERE asset_name IN ('XeChain', 'Ethereum', 'Monero', 'Litecoin') ORDER BY market_cap DESC LIMIT 5;",
    "reference_sql": "SELECT name, market_cap FROM digital_assets ORDER BY market_cap DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query restricts results to a hardcoded list of assets instead of selecting the top 5 by market_cap across all assets"
    }
  },
  {
    "example_id": 1733,
    "prompt": "What is the average age of artists ('artist_demographics' table) by nationality?",
    "generated_sql": "SELECT nationality, AVG(age) FROM artist_demographics GROUP BY nationality;",
    "reference_sql": "SELECT nationality, AVG(age) FROM artist_demographics GROUP BY nationality;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1734,
    "prompt": "What is the total transaction amount for each employee in the Risk Management department?",
    "generated_sql": "SELECT e.employee_id, SUM(tt.transaction_amount) as total_transaction_amount FROM employees e JOIN transactions tt ON e.id = tt.employee_id JOIN risk_management_department d ON e.department_id = d.id GROUP BY e.employee_id;",
    "reference_sql": "SELECT e.name, SUM(t.transaction_amount) as total_transaction_amount FROM employees e JOIN transactions t ON e.id = t.employee_id WHERE e.department = 'Risk Management' GROUP BY e.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses nonstandard department table and lacks filter for 'Risk Management' department by name"
    }
  },
  {
    "example_id": 1735,
    "prompt": "Update the names of vessels with the word 'Star' in their current name to 'Galaxy'.",
    "generated_sql": "UPDATE vessels SET name = 'Galaxy' WHERE name LIKE '%Star%';",
    "reference_sql": "UPDATE vessels SET name = REPLACE(name, 'Star', 'Galaxy') WHERE name LIKE '%Star%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Replaces entire name instead of substituting 'Star' with 'Galaxy' in the existing names"
    }
  },
  {
    "example_id": 1736,
    "prompt": "List the names, types, and last maintenance dates of machines in factories with circular economy initiatives.",
    "generated_sql": "SELECT * FROM machines WHERE circular_economy = true AND last_maintenance_date >= DATEADD(year, -1, GETDATE());",
    "reference_sql": "SELECT machines.name, machines.type, machines.last_maintenance FROM machines INNER JOIN factories ON machines.factory_id = factories.factory_id WHERE factories.initiative = 'circular economy';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Includes an irrelevant date filter, uses circular_economy on machines instead of joining factories, and selects all columns instead of the specified name, type, and last_maintenance_date."
    }
  },
  {
    "example_id": 1737,
    "prompt": "What are the intelligence agencies in the Asia-Pacific region?",
    "generated_sql": "SELECT name FROM intelligence_agencies WHERE region = 'Asia-Pacific';",
    "reference_sql": "SELECT Agency FROM IntelligenceAgencies WHERE Country IN ('China', 'Australia', 'Japan');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1738,
    "prompt": "Which genres have the highest average track length?",
    "generated_sql": "SELECT Genre, AVG(Length) AS Avg_Length FROM Genres GROUP BY Genre ORDER BY Avg_Length DESC;",
    "reference_sql": "SELECT genre, AVG(length) as avg_length FROM tracks JOIN music_genres ON tracks.genre_id = music_genres.id GROUP BY genre ORDER BY avg_length DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses Genres table instead of calculating average length from Tracks and does not filter to the genre(s) with the maximum average"
    }
  },
  {
    "example_id": 1739,
    "prompt": "What is the average donation amount for each program, excluding anonymous donations?",
    "generated_sql": "SELECT programs.name, AVG(donations.donation_amount) FROM programs JOIN donations ON programs.id = donations.program_id WHERE donations.donation_type = 'Anonymous' GROUP BY programs.name;",
    "reference_sql": "SELECT p.program_name, AVG(d.donation_amount) AS avg_donation FROM donations d JOIN programs p ON d.program_name = p.program_name WHERE d.donor_name != 'Anonymous' GROUP BY p.program_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters to only anonymous donations instead of excluding them"
    }
  },
  {
    "example_id": 1740,
    "prompt": "Insert a new record into the 'fields' table for field 'F-02' with operator 'Chevron' and discovery date '2015-01-01'",
    "generated_sql": "INSERT INTO fields (field_id, country, oil_production, discovery_date, operator_name) VALUES (1, 'Canada', 10000000, '2015-01-01', 'Chevron');",
    "reference_sql": "INSERT INTO fields (field_id, field_name, operator, discovery_date) VALUES (NULL, 'F-02', 'Chevron', '2015-01-01');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect field_id value and unnecessary country and oil_production columns included"
    }
  },
  {
    "example_id": 1741,
    "prompt": "List the names and nationalities of coaches in the 'coaches' table.",
    "generated_sql": "SELECT name, nationality FROM coaches;",
    "reference_sql": "SELECT name, nationality FROM coaches;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1742,
    "prompt": "Who is the top points scorer for the Lakers?",
    "generated_sql": "SELECT Lakers.name, R.points_scored FROM points_scored R JOIN points_scored_scores P ON R.points_scored = P.points_scored WHERE Lakers.name = 'Lakers' ORDER BY R.points_scored DESC LIMIT 1;",
    "reference_sql": "SELECT player_id, player_name, SUM(points) as total_points FROM games JOIN players ON games.player_id = players.player_id WHERE team_id = 5 GROUP BY player_id ORDER BY total_points DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses nonexistent tables and incorrect joins; does not retrieve player name correctly"
    }
  },
  {
    "example_id": 1743,
    "prompt": "Find the average number of refugees per country in 'refugee_data' table?",
    "generated_sql": "SELECT country, AVG(num_refugees) FROM refugee_data GROUP BY country;",
    "reference_sql": "SELECT country, AVG(num_refugees) as avg_refugees FROM refugee_data GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1744,
    "prompt": "What is the total number of refugee families supported by each NGO in the last 6 months in Asia?",
    "generated_sql": "SELECT n.name, SUM(f.total_families) AS total_families FROM refugee_fonds f INNER JOIN refugee_families fon ON f.n = fon.id WHERE f.location = 'Asia' AND fon.country = 'Australia' GROUP BY n.name;",
    "reference_sql": "SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND Country = 'Asia' GROUP BY NGOName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by Australia instead of Asia, missing last 6 months date filter and uses incorrect aliases and joins"
    }
  },
  {
    "example_id": 1745,
    "prompt": "List the names and number of employees of organizations that have participated in digital divide reduction initiatives in the United States and Canada.",
    "generated_sql": "SELECT o.name, COUNT(e.employee_id) as num_employees FROM organizations o INNER JOIN digital_divide_reduction_initiatives dri ON o.id = dri.organization_id WHERE o.country IN ('USA', 'Canada') GROUP BY o.name;",
    "reference_sql": "SELECT o.name, COUNT(d.organization_id) FROM organizations o JOIN digital_divide_initiatives d ON o.organization_id = d.organization_id WHERE o.country IN ('USA', 'Canada') GROUP BY o.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not join the employees table, so COUNT(e.employee_id) is undefined"
    }
  },
  {
    "example_id": 1746,
    "prompt": "Update the production cost of all items in the 'summer 2021' collection with a production cost below 15 to 15.",
    "generated_sql": "UPDATE items SET production_cost = (SELECT production_cost FROM sales WHERE item_id = 101 AND year = 2021) WHERE item_id IN (SELECT item_id FROM sales WHERE collection_id = 101);",
    "reference_sql": "UPDATE production_costs SET cost = 15 WHERE collection = 'summer 2021' AND cost < 15;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses incorrect subqueries and does not set production_cost to the constant 15 or correctly filter the 'summer 2021' collection"
    }
  },
  {
    "example_id": 1747,
    "prompt": "What is the total amount spent on recycling programs in Oceania?",
    "generated_sql": "SELECT SUM(amount) FROM waste_programs WHERE region = 'Oceania';",
    "reference_sql": "SELECT SUM(amount_spent) FROM recycling_programs WHERE location = 'Oceania';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for recycling programs"
    }
  },
  {
    "example_id": 1748,
    "prompt": "What is the average number of followers gained per day for influencers in the beauty genre?",
    "generated_sql": "SELECT AVG(followers) FROM influencers INNER JOIN followers ON influencers.id = followers.influencer_id WHERE is_genre = true AND is_influencer_id IN (SELECT id FROM influencers WHERE genre = 'BEAUTIFY');",
    "reference_sql": "SELECT genre, AVG(followers_gained_per_day) as avg_followers_gained_per_day FROM (SELECT genre, influencer_name, (followers_end - followers_start) / DATEDIFF(end_date, start_date) as followers_gained_per_day FROM influencers) AS subquery WHERE genre = 'Beauty';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query averages total followers instead of computing followers gained per day and uses incorrect genre filters"
    }
  },
  {
    "example_id": 1749,
    "prompt": "What was the average advertising spend per post in South America in Q4 2022?",
    "generated_sql": "SELECT AVG(spend) FROM posts WHERE region = 'South America' AND date BETWEEN '2022-10-01' AND '2022-12-31';\n\nSELECT AVG(spend) FROM posts WHERE region = 'South America' AND date BETWEEN '2022-10-01' AND '2022-12-31';\n\nSELECT AVG(spend) FROM posts WHERE region = 'South America' AND date BETWEEN '202",
    "reference_sql": "SELECT AVG(ad_spend) FROM socialmedia.ads INNER JOIN socialmedia.posts ON ads.post_id = posts.id WHERE posts.region = 'South America' AND EXTRACT(MONTH FROM ads.timestamp) BETWEEN 10 AND 12 AND posts.ad_indicator = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1750,
    "prompt": "How many customers in Asia have purchased sustainable fabrics?",
    "generated_sql": "SELECT COUNT(*) FROM customers WHERE country = 'Asia' AND fabric_sustainable = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM Customers c INNER JOIN Purchases p ON c.customer_id = p.customer_id WHERE c.customer_country = 'Asia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing join with purchases and fabrics tables; fabric_sustainable not in customers"
    }
  },
  {
    "example_id": 1751,
    "prompt": "What is the maximum consecutive number of days with a financial wellbeing score below 60 for each customer?",
    "generated_sql": "SELECT customer_id, MAX(CASE WHEN score < 60 THEN 1 ELSE 0 END) AS consecutive_days FROM customers GROUP BY customer_id;",
    "reference_sql": "SELECT customer_id, MAX(consecutive_below_60) FROM (SELECT customer_id, score_date, financial_wellbeing_score, COUNT(*) FILTER (WHERE financial_wellbeing_score < 60) OVER (PARTITION BY customer_id ORDER BY score_date ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS consecutive_below_60 FROM customer_scores) subquery GROUP BY customer_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not compute consecutive-day streaks; it only flags individual days below 60 without calculating runs"
    }
  },
  {
    "example_id": 1752,
    "prompt": "What is the total number of volunteers for each nationality?",
    "generated_sql": "SELECT nationality, SUM(volunteer_count) FROM Volunteers GROUP BY nationality;",
    "reference_sql": "SELECT VolunteerNationality, COUNT(*) as TotalVolunteers FROM Volunteers GROUP BY VolunteerNationality;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Should use COUNT(*) to count volunteers rather than summing a non-existent volunteer_count column"
    }
  },
  {
    "example_id": 1753,
    "prompt": "List all suppliers who provide vegan products, sorted by country",
    "generated_sql": "SELECT s.name FROM suppliers s JOIN products p ON s.id = p.supplier_id WHERE p.is_vegan = true;",
    "reference_sql": "SELECT DISTINCT supplier_id, country FROM products JOIN suppliers ON products.supplier_id = suppliers.supplier_id WHERE vegan = true ORDER BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing ORDER BY country and country in selection; duplicates not handled with DISTINCT"
    }
  },
  {
    "example_id": 1754,
    "prompt": "What was the total weight of shipments from Canada to the United States in January 2021?",
    "generated_sql": "SELECT SUM(weight) FROM shipments WHERE country = 'Canada' AND shipment_date >= '2021-01-01' AND shipment_date <= '2021-12-31';",
    "reference_sql": "SELECT SUM(weight) FROM shipments WHERE origin = 'Canada' AND destination = 'United States' AND shipped_at >= '2021-01-01' AND shipped_at < '2021-02-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for shipments to the United States and the date range covers the entire year instead of January 2021"
    }
  },
  {
    "example_id": 1755,
    "prompt": "Which biosensors were developed by 'BioCorp'?",
    "generated_sql": "SELECT biosensors.name FROM biosensors INNER JOIN biosensors_developments ON biosensors.id = biosensors_developments.product_id WHERE biosensors_developments.developer = 'BioCorp';",
    "reference_sql": "SELECT name FROM Biosensor WHERE developer = 'BioCorp';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1756,
    "prompt": "List the top 5 states with the highest percentage of public participation",
    "generated_sql": "SELECT state, (COUNT(*) FILTER (WHERE participation = 1)) * 100.0 / COUNT(*) as percentage FROM public_participation WHERE participation = TRUE GROUP BY state ORDER BY percentage DESC LIMIT 5;",
    "reference_sql": "SELECT State.name, ROUND(State.participation * 100, 2) AS participation_percentage FROM State ORDER BY participation_percentage DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause filters out non-participation rows, making the denominator only count true participations and always yielding 100%"
    }
  },
  {
    "example_id": 1757,
    "prompt": "Find the average annual research funding for each department in the College of Arts and Humanities, from 2015 to 2020. Order the results by the average annual funding in ascending order.",
    "generated_sql": "SELECT Department, AVG(Funding) as Avg_Annual FROM College_of_ Arts_And_H Humanities WHERE Year BETWEEN 2015 AND 2020 GROUP BY Department ORDER BY Avg_Annual DESC;",
    "reference_sql": "SELECT department, AVG(funding) as avg_annual_funding FROM ArtsFunding WHERE department LIKE 'Arts%' AND year BETWEEN 2015 AND 2020 GROUP BY department ORDER BY avg_annual_funding ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query orders results in descending order (DESC) instead of ascending order as requested."
    }
  },
  {
    "example_id": 1758,
    "prompt": "What is the total number of renewable energy projects in the renewable_energy schema?",
    "generated_sql": "SELECT COUNT(*) FROM renewable_energy WHERE type = 'Project';",
    "reference_sql": "SELECT SUM(s.installed_capacity + w.installed_capacity) FROM renewable_energy.solar_panels s CROSS JOIN renewable_energy.wind_turbines w;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query treats schema as table and incorrectly filters by type instead of querying the projects table"
    }
  },
  {
    "example_id": 1759,
    "prompt": "What is the total number of language access programs by hospital type?",
    "generated_sql": "SELECT hospital_type, SUM(num_programs) AS total_programs FROM language_access GROUP BY hospital_type;",
    "reference_sql": "SELECT hospital_type, SUM(programs) FROM language_access GROUP BY hospital_type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1760,
    "prompt": "Insert a new record into the 'tour_operators' table",
    "generated_sql": "INSERT INTO tour_operators (id, operator_name, city) VALUES (1, 'John Smith', 'New York');",
    "reference_sql": "INSERT INTO tour_operators (id, name, country, sustainable_tourism) VALUES (1, 'EcoTravel Peru', 'Peru', true);",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1761,
    "prompt": "What is the total revenue generated by eco-friendly hotels in New York?",
    "generated_sql": "SELECT SUM(revenue) FROM hotels WHERE city = 'New York' AND eco_friendly = true;",
    "reference_sql": "SELECT SUM(revenue) FROM hotel_revenue WHERE is_eco_friendly = true AND city = 'New York';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1762,
    "prompt": "What is the maximum revenue of online travel agencies in Australia in the past year?",
    "generated_sql": "SELECT MAX(revenue) FROM online_travel_acquisition WHERE location = 'Australia' AND revenue_year BETWEEN (2022, 2) AND (2022, 3);",
    "reference_sql": "SELECT MAX(revenue) FROM australian_agencies WHERE country = 'Australia' AND year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect date filtering syntax and logic; BETWEEN with tuples is invalid and does not represent the past year"
    }
  },
  {
    "example_id": 1763,
    "prompt": "What is the total food and beverage revenue last month for hotels in 'Bangkok'?",
    "generated_sql": "SELECT SUM(revenue) FROM restaurants WHERE month = 2 AND city = 'Bangkok' AND food_type = 'Food' AND beverage_type = 'Beverage';",
    "reference_sql": "SELECT SUM(revenue) FROM revenue JOIN hotels ON revenue.hotel_id = hotels.hotel_id JOIN dates ON revenue.revenue_date = dates.date WHERE hotels.city = 'Bangkok' AND revenue_source = 'Food and beverage' AND dates.date >= DATEADD(month, -1, GETDATE());",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters require both food_type = 'Food' and beverage_type = 'Beverage' simultaneously and hardcodes month=2 instead of summing both categories last month"
    }
  },
  {
    "example_id": 1764,
    "prompt": "What is the total revenue for the 'virtual tours' feature?",
    "generated_sql": "SELECT SUM(revenue) FROM virtual_tours;",
    "reference_sql": "SELECT SUM(price) FROM features WHERE name = 'Virtual tours';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a table named virtual_tours instead of filtering feature column"
    }
  },
  {
    "example_id": 1765,
    "prompt": "What is the average age of patients who received cognitive behavioral therapy (CBT) in the state of California?",
    "generated_sql": "SELECT AVG(age) FROM patients WHERE state = 'California' AND therapy_type = 'CBT';",
    "reference_sql": "SELECT AVG(patients.age) FROM patients INNER JOIN treatments ON patients.patient_id = treatments.patient_id WHERE treatments.treatment = 'CBT' AND patients.state = 'California';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1766,
    "prompt": "What is the number of patients who received CBT in each region?",
    "generated_sql": "SELECT region, COUNT(*) as patients_received_CBT FROM patients WHERE CBT = TRUE GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(*) as patient_count FROM patients JOIN therapy ON patients.id = therapy.patient_id WHERE therapy_type = 'CBT' GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1767,
    "prompt": "Delete all rows in the comments table with a rating of 1.",
    "generated_sql": "DELETE FROM comments WHERE rating = 1;",
    "reference_sql": "DELETE FROM comments WHERE rating = 1;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1768,
    "prompt": "Delete all orders with total less than $10.00",
    "generated_sql": "DELETE FROM orders WHERE quantity < 10.00;",
    "reference_sql": "DELETE FROM orders WHERE total < 10.00;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses quantity instead of total"
    }
  },
  {
    "example_id": 1769,
    "prompt": "What is the average time taken for contract negotiations in the Middle East region?",
    "generated_sql": "SELECT AVG(negotiation_time) FROM contract_negotiations WHERE region = 'Middle East';",
    "reference_sql": "SELECT AVG(negotiation_duration) FROM contract_negotiations WHERE region = 'Middle East';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1770,
    "prompt": "List all environmental impact assessments for mining operations in Africa.",
    "generated_sql": "SELECT MIN(assessments) FROM environmental_impact WHERE country = 'Africa';",
    "reference_sql": "SELECT mining_operation.name, environmental_assessment.date, environmental_assessment.impact FROM mining_operation JOIN environmental_assessment ON mining_operation.id = environmental_assessment.mining_operation_id WHERE mining_operation.location = 'Africa';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MIN() and does not filter for mining operations; returns only one value instead of listing all assessments"
    }
  },
  {
    "example_id": 1771,
    "prompt": "What is the average age of employees working in the 'Mining Operations' department?",
    "generated_sql": "SELECT AVG(age) FROM employees WHERE department = 'Mining Operations';",
    "reference_sql": "SELECT AVG(Age) FROM Employees WHERE Department = 'Mining Operations';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1772,
    "prompt": "Which mines had more than 10 accidents in 2020?",
    "generated_sql": "SELECT name FROM mine_accidents WHERE year = 2020 AND total_accidents > 10;",
    "reference_sql": "SELECT mine_id FROM accident WHERE date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY mine_id HAVING COUNT(*) > 10;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1773,
    "prompt": "What is the average data usage per mobile subscriber in each state?",
    "generated_sql": "SELECT state, AVG(data_usage) as avg_data_usage FROM mobile_subscribers GROUP BY state;",
    "reference_sql": "SELECT state, AVG(data_usage) AS avg_data_usage FROM mobile_subscriber_data GROUP BY state;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1774,
    "prompt": "What is the minimum data usage for postpaid mobile customers in the city of Detroit?",
    "generated_sql": "SELECT MIN(data_usage) FROM mobile_users WHERE city = 'Detroit' AND mobile_mode = 'Postpaid';",
    "reference_sql": "SELECT MIN(data_usage) FROM postpaid_mobile WHERE city = 'Detroit';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1775,
    "prompt": "What is the total number of articles published by each author in a specific year and month from the 'investigative_reports' table?",
    "generated_sql": "SELECT author_id, COUNT(DISTINCT publication_year) as total_articles FROM investigative_reports WHERE publication_year = '2019' AND publication_month = 'Month' GROUP BY author_id, publication_year;",
    "reference_sql": "SELECT author, EXTRACT(YEAR FROM publication_date) as year, EXTRACT(MONTH FROM publication_date) as month, COUNT(*) as total_articles FROM investigative_reports WHERE EXTRACT(YEAR FROM publication_date) = 2021 AND EXTRACT(MONTH FROM publication_date) = 12 GROUP BY author, year, month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(DISTINCT publication_year) instead of counting articles and groups by publication_year unnecessarily; month placeholder is incorrect."
    }
  },
  {
    "example_id": 1776,
    "prompt": "What is the total word count for news articles, grouped by the day they were published?",
    "generated_sql": "SELECT DATE_FORMAT(publication_date, '%Y-%m') as day, COUNT(*) as word_count FROM news_articles GROUP BY day;",
    "reference_sql": "SELECT DATE(publish_date) as publish_day, SUM(word_count) as total_word_count FROM News GROUP BY publish_day;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT(*) instead of summing word counts and groups by month instead of day"
    }
  },
  {
    "example_id": 1777,
    "prompt": "What is the average playtime for players who have played the game 'Shooter' and are older than 20?",
    "generated_sql": "SELECT AVG(Players.Playtime) FROM Players JOIN (SELECT PlayerID FROM Players JOIN Game ON Players.PlayerID = Game.PlayerID WHERE Game.GameType = 'Shooter' AND Players.Age > 20) AS PlayerPlayers ON Players.PlayerID = PlayerPlayers.PlayerID GROUP BY PlayerPlayers.PlayerID HAVING PlayerPlayers.Age > 20;",
    "reference_sql": "SELECT AVG(Playtime) FROM PlayerGameData WHERE Game = 'Shooter' AND Age > 20;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect grouping and invalid HAVING reference; should compute single AVG without grouping"
    }
  },
  {
    "example_id": 1778,
    "prompt": "How many times has each type of maintenance been performed on the farming equipment in the past month?",
    "generated_sql": "SELECT type, SUM(count) as total_count FROM maintenance WHERE maintenance_date >= DATEADD(month, -1, GETDATE()) GROUP BY type;",
    "reference_sql": "SELECT maintenance_type, COUNT(*) as maintenance_count FROM maintenance_log WHERE maintenance_date >= DATEADD(month, -1, CURRENT_DATE) GROUP BY maintenance_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using SUM(count) assumes a count column exists; should count maintenance events (e.g., COUNT(*)) per type"
    }
  },
  {
    "example_id": 1779,
    "prompt": "What is the total area of corn fields in the United States?",
    "generated_sql": "SELECT SUM(area) FROM corn_fields WHERE country = 'United States';",
    "reference_sql": "SELECT SUM(planting_area) FROM crop_planting_2 WHERE crop = 'Corn' AND country = 'United States';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1780,
    "prompt": "How many public libraries are there in each region?",
    "generated_sql": "SELECT region, COUNT(library_id) FROM libraries GROUP BY region;",
    "reference_sql": "SELECT Region, NumLibraries FROM Libraries;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1781,
    "prompt": "What was the total production of Europium and Gadolinium in 2018?",
    "generated_sql": "SELECT SUM(production) FROM production WHERE element = 'Europium' AND element = 'Gadolinium' AND year = 2018;",
    "reference_sql": "SELECT SUM(Quantity) FROM Europium_Production WHERE Year = 2018; SELECT SUM(Quantity) FROM Gadolinium_Production WHERE Year = 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering uses AND for two different element values instead of OR or IN"
    }
  },
  {
    "example_id": 1782,
    "prompt": "How many ethically sourced products are sold in each state?",
    "generated_sql": "SELECT state, SUM(quantity) FROM products GROUP BY state;",
    "reference_sql": "SELECT S.state_name, COUNT(DISTINCT EP.product_id) FROM Ethical_Products EP JOIN Sales S ON EP.product_id = S.product_id GROUP BY S.state_name HAVING is_ethically_sourced = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing condition to filter for ethically sourced products"
    }
  },
  {
    "example_id": 1783,
    "prompt": "What are the names and prices of all products that are not made in the US and are not on sale?",
    "generated_sql": "SELECT * FROM products WHERE has_manufacture_in_us = False AND is_sold_out = false;",
    "reference_sql": "SELECT product_name, price FROM products WHERE country_of_manufacture != 'United States' AND is_on_sale = FALSE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Selects all columns and uses is_sold_out instead of is_on_sale, and uses incorrect manufacture flag"
    }
  },
  {
    "example_id": 1784,
    "prompt": "Who are the top 3 customers in terms of total value of ethical fashion purchases in 2020?",
    "generated_sql": "SELECT customer_id, SUM(value) as total_value FROM purchases WHERE is_ethical = TRUE AND date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY customer_id ORDER BY total_value DESC LIMIT 3;",
    "reference_sql": "SELECT customer_name, SUM(purchase_value) FROM customers JOIN ethical_fashion_purchases ON customers.id = ethical_fashion_purchases.customer_id GROUP BY customer_name ORDER BY SUM(purchase_value) DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1785,
    "prompt": "Who are the top 5 vendors with the highest revenue from circular supply chain products?",
    "generated_sql": "SELECT vendor_name, SUM(revenue) as total_revenue FROM sales WHERE product_type = 'CircularSupplyChain' GROUP BY vendor_name ORDER BY total_revenue DESC LIMIT 5;",
    "reference_sql": "SELECT vendors.name, SUM(sales.price) FROM vendors INNER JOIN sales ON vendors.vendor_id = sales.vendor_id INNER JOIN circular_supply_chain_products ON sales.product_id = circular_supply_chain_products.product_id GROUP BY vendors.name ORDER BY SUM(sales.price) DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1786,
    "prompt": "What is the average number of moons for planets in our solar system?",
    "generated_sql": "SELECT AVG(num_ moons) FROM planets;",
    "reference_sql": "SELECT AVG(Moons) FROM SolarSystem WHERE Moons > 0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Column name 'num_ moons' contains an unintended space, should be 'num_moons'."
    }
  },
  {
    "example_id": 1787,
    "prompt": "What is the total cost of Mars missions led by each country?",
    "generated_sql": "SELECT Country, MAX(Cost) AS MaxCost FROM MarsMissions GROUP BY Country;",
    "reference_sql": "SELECT country, SUM(cost) as total_mars_cost FROM missions WHERE mission_name LIKE '%Mars%' GROUP BY country ORDER BY total_mars_cost DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MAX(Cost) instead of SUM(Cost) to compute total cost per country."
    }
  },
  {
    "example_id": 1788,
    "prompt": "Update the severity score of the vulnerability assessment with ID 2 to 4.",
    "generated_sql": "UPDATE VulnerableAssessments SET severity_score = 4 WHERE id = 2;",
    "reference_sql": "UPDATE vulnerability_assessments SET severity_score = 4 WHERE id = 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Table name should be VulnerabilityAssessments, not VulnerableAssessments"
    }
  },
  {
    "example_id": 1789,
    "prompt": "What is the average severity score of security incidents in the retail sector?",
    "generated_sql": "SELECT AVG(severity) FROM security_incidents WHERE sector = 'Retail' AND severity = 'Critical';",
    "reference_sql": "SELECT AVG(severity) FROM security_incidents WHERE sector = 'Retail';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters severity='Critical', excluding non-critical incidents. It should compute the average severity for all retail sector incidents."
    }
  },
  {
    "example_id": 1790,
    "prompt": "Obtain the total number of policies issued in 'Q2 2021'",
    "generated_sql": "SELECT COUNT(*) FROM policies WHERE issue_date BETWEEN '2021-04-01' AND '2021-06-30';",
    "reference_sql": "SELECT COUNT(*) FROM policies WHERE issue_date BETWEEN '2021-04-01' AND '2021-06-30';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1791,
    "prompt": "What is the average number of workplace safety incidents for unions in the 'services' sector that have more than 2000 members?",
    "generated_sql": "SELECT AVG(count) FROM union_safety_incidents WHERE sector ='services' AND members > 2000;",
    "reference_sql": "SELECT AVG(num_safety_incidents) FROM union_stats WHERE sector = 'services' AND num_members > 2000;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1792,
    "prompt": "What is the maximum contract length for 'Transportation' union collective bargaining agreements?",
    "generated_sql": "SELECT MAX(contract_length) FROM union_contracts WHERE union_name = 'Transportation';",
    "reference_sql": "SELECT MAX(CollectiveBargaining.contract_length) FROM CollectiveBargaining INNER JOIN Unions ON CollectiveBargaining.union_id = Unions.union_id WHERE Unions.industry = 'Transportation';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1793,
    "prompt": "Add a new vessel 'Yamato' with maximum speed 32.7 knots to the 'vessel_performance' table",
    "generated_sql": "INSERT INTO vessel_performance (vessel_id, vessel_name, speed, speed_max) VALUES (1, 'Yamato', 32.7, 36.7);",
    "reference_sql": "INSERT INTO vessel_performance (id, vessel_name, maximum_speed) VALUES (1, 'Yamato', 32.7);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect speed_max value and unnecessary speed and vessel_id assignments"
    }
  },
  {
    "example_id": 1794,
    "prompt": "What is the average age of museum members from the Asia-Pacific region?",
    "generated_sql": "SELECT AVG(age) FROM members WHERE region = 'Asia-Pacific';",
    "reference_sql": "SELECT AVG(age) FROM members WHERE member_region = 'Asia-Pacific';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1795,
    "prompt": "What is the minimum heart rate for each member in the past year?",
    "generated_sql": "SELECT MemberID, MIN(HeartRate) AS MinHeartRate FROM MemberHeartRate GROUP BY MemberID;",
    "reference_sql": "SELECT id, MIN(heart_rate) FROM member_data WHERE registration_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to restrict records to the past year"
    }
  },
  {
    "example_id": 1796,
    "prompt": "How many agricultural innovations were introduced between 2018 and 2020?",
    "generated_sql": "SELECT COUNT(*) FROM Innovation WHERE start_year BETWEEN 2018 AND 2020;",
    "reference_sql": "SELECT COUNT(*) FROM agri_innovations WHERE introduction_year BETWEEN 2018 AND 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for agricultural innovations"
    }
  },
  {
    "example_id": 1797,
    "prompt": "List the top 5 aircraft models with the most flight hours in the Southwest region.",
    "generated_sql": "SELECT model, flight_hours FROM aircraft_performance WHERE region = 'Southwest' ORDER BY flight_hours DESC LIMIT 5;",
    "reference_sql": "SELECT aircraft_model, SUM(flight_hours) FROM Flight_Hours WHERE region = 'Southwest' GROUP BY aircraft_model ORDER BY SUM(flight_hours) DESC LIMIT 5;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not aggregate flight_hours per model; missing GROUP BY and SUM"
    }
  },
  {
    "example_id": 1798,
    "prompt": "What is the latest launch date for a satellite from any country in Asia?",
    "generated_sql": "SELECT MAX(launch_date) FROM satellites WHERE launch_country IN ('Russia', 'China', 'India');",
    "reference_sql": "SELECT MAX(LaunchDate) AS LatestLaunchDate FROM Satellite WHERE Country IN ('India', 'China');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only considers Russia, China, and India but omits other Asian countries"
    }
  },
  {
    "example_id": 1799,
    "prompt": "What is the total number of research projects conducted in the aerospace domain per year?",
    "generated_sql": "SELECT d.name, COUNT(r.project_id) as total_projects FROM research_projects r JOIN research_projects.project d ON r.project_id = d.id GROUP BY d.name;",
    "reference_sql": "SELECT Year, SUM(Number_Of_Projects) FROM Research_Projects GROUP BY Year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for aerospace, does not group by year, and uses incorrect join/table references."
    }
  },
  {
    "example_id": 1800,
    "prompt": "What are the dissolved oxygen levels for fish farms in the Atlantic ocean?",
    "generated_sql": "SELECT dissolved_oxygen FROM fish_farms WHERE ocean = 'Atlantic' AND type = 'Fish';",
    "reference_sql": "SELECT country, dissolved_oxygen FROM atlantic_fish_farms WHERE country IN ('USA', 'Canada', 'Brazil');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query adds an unnecessary filter on type = 'Fish', which may exclude valid fish farms since the table already represents fish farms."
    }
  },
  {
    "example_id": 1801,
    "prompt": "How many people with disabilities attended dance performances in the past 6 months?",
    "generated_sql": "SELECT COUNT(*) FROM DancePreference WHERE AttendanceDate >= DATEADD(month, -6, GETDATE()) GROUP BY DancePreference.PerformanceDate HAVING AttendanceDate >= DATEADD(month, -6, GETDATE());",
    "reference_sql": "SELECT SUM(attendee_count) FROM dance_performances WHERE attendee_disability = true AND performance_date BETWEEN '2021-06-01' AND '2021-12-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not filter for people with disabilities and uses inappropriate grouping"
    }
  },
  {
    "example_id": 1802,
    "prompt": "What percentage of visitors to jazz events in New Orleans are repeat attendees?",
    "generated_sql": "SELECT (COUNT(*) FILTER (WHERE attendee_country = 'New Orleans' AND visit_date BETWEEN '2014-01-01 AND 2015-01-01') * 100.0 / COUNT(*)) as repeat_percentage FROM Jazz_Events WHERE visit_date BETWEEN '2014-01-01' AND '2015-01-01' GROUP BY repeat_percentage HAVING repeat_percentage >= 0.80;",
    "reference_sql": "SELECT COUNT(DISTINCT visitor_id) * 100.0 / (SELECT COUNT(DISTINCT visitor_id) FROM Visitors WHERE city = 'New Orleans' AND event_name LIKE '%Jazz%') FROM Visitors WHERE city = 'New Orleans' AND event_name LIKE '%Jazz%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by attendee country instead of event location, does not identify repeat attendees, and misuses GROUP BY and HAVING clauses."
    }
  },
  {
    "example_id": 1803,
    "prompt": "How many chemical spills occurred in the southeast region in the past year, grouped by month?",
    "generated_sql": "SELECT EXTRACT(MONTH FROM date) as month, COUNT(*) as total_spills FROM spill_data WHERE region = 'Southeast' AND date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY month, EXTRACT(MONTH FROM date);",
    "reference_sql": "SELECT EXTRACT(MONTH FROM date) AS month, COUNT(*) AS num_spills FROM spills WHERE location LIKE 'Southeast%' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Grouping by month number alone can combine data from two different years in the past-year window; year should be included."
    }
  },
  {
    "example_id": 1804,
    "prompt": "Which countries have not received any climate finance for climate adaptation?",
    "generated_sql": "SELECT name FROM climate_finance_countries WHERE not_received = 'No';",
    "reference_sql": "SELECT country FROM country_climate_finance WHERE sector = 'climate adaptation' GROUP BY country HAVING SUM(amount_funded) = 0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses not_received = 'No', which retrieves countries that have received finance instead of those that have not"
    }
  },
  {
    "example_id": 1805,
    "prompt": "Find the number of transactions involving 'non-GMO' produce in the 'Midwest' region.",
    "generated_sql": "SELECT COUNT(*) FROM transactions t JOIN regions r ON t.region = r.region WHERE t.produce_type = 'non-GMO' AND r.region = 'Midwest';",
    "reference_sql": "SELECT COUNT(*) FROM transactions WHERE region = 'Midwest' AND non_gmo = true;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1806,
    "prompt": "What is the average price of crops grown using 'permaculture' techniques?",
    "generated_sql": "SELECT AVG(price) FROM crops WHERE technique = 'permaculture';",
    "reference_sql": "SELECT AVG(price) FROM crops WHERE farming_system = 'permaculture';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1807,
    "prompt": "What is the total budget allocated for accessibility improvements across all departments and years?",
    "generated_sql": "SELECT D.department_id, SUM(DA.budget) as total_budget FROM departments D INNER JOIN accessibility_improvements A ON D.department_id = A.department_id WHERE DA.year BETWEEN 2020 AND 2021 GROUP BY D.department_id;",
    "reference_sql": "SELECT SUM(Budget_Allocation.allocation) as total_allocation FROM Budget_Allocation WHERE Budget_Allocation.department = 'Accessibility';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly restricts to years 2020-2021 and groups by department rather than summing the budget across all departments and years."
    }
  },
  {
    "example_id": 1808,
    "prompt": "List all regulatory frameworks that have been associated with at least one smart contract, ordered by the name of the regulatory framework in ascending order.",
    "generated_sql": "SELECT f.name, f.name, f.name, COUNT(*) as num_contracts FROM regulatory_frameworks f WHERE f.is_smart_contract = true GROUP BY f.name ORDER BY f.name;",
    "reference_sql": "SELECT r.name FROM regulatory_framework r JOIN smart_contracts s ON r.id = s.framework_id WHERE s.framework_id IS NOT NULL ORDER BY r.name ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query wrongly filters on f.is_smart_contract and selects f.name three times instead of joining to smart_contracts to ensure association"
    }
  },
  {
    "example_id": 1809,
    "prompt": "What is the total carbon sequestered per supplier?",
    "generated_sql": "SELECT supplier_id, SUM(carbon_sequestered) AS total_carbon_sequestered FROM carbon_sequestration GROUP BY supplier_id;",
    "reference_sql": "SELECT supplier_id, supplier_name, SUM(sequestration_rate) FROM carbon_sequestration JOIN suppliers ON carbon_sequestration.supplier_id = suppliers.supplier_id GROUP BY supplier_id, supplier_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1810,
    "prompt": "What is the average rating of foundations with a vegan label?",
    "generated_sql": "SELECT AVG(rating) FROM FoundationRatings WHERE vegan = true;",
    "reference_sql": "SELECT AVG(rating) FROM products WHERE category = 'foundation' AND vegan = TRUE;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1811,
    "prompt": "What is the maximum response time for emergencies in the 'Central' district?",
    "generated_sql": "SELECT MAX(response_time) FROM emergency_responses WHERE district = 'Central';",
    "reference_sql": "SELECT MAX(response_time) FROM emergencies WHERE district_id = (SELECT district_id FROM districts WHERE district_name = 'Central');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1812,
    "prompt": "What is the maximum threat intelligence report score for cyber threats originating from Russia?",
    "generated_sql": "SELECT MAX(score) FROM threat_intelligence WHERE region = 'Russia';",
    "reference_sql": "SELECT MAX(score) FROM threat_intelligence WHERE source_country = 'Russia';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1813,
    "prompt": "What are the names of the countries where peacekeeping operations were conducted by the European Union in 2010?",
    "generated_sql": "SELECT countries.name FROM countries WHERE countries.region = 'Europe' AND (countries.operation = 'peacekeeping' OR countries.operation = 'peacekeeping' OR countries.operation = 'peacekeeping' OR countries.operation = 'peacekeeping' OR countries.operation = 'peacekeeping' OR countries.operation = 'peacekeeping' OR countries.operation = 'peacekeeping' OR countries.operation = 'peacekeeping') AND countries.initiative = 'peacekeeping' AND countries.initiative = 'peacekeeping' AND countries.initiative = 'peacekeeping' AND countries.initiative = 'peacekeeping' AND",
    "reference_sql": "SELECT DISTINCT country FROM eu_peacekeeping_operations WHERE start_date LIKE '2010%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters by country region and repeats identical conditions instead of joining operations for EU peacekeeping in 2010"
    }
  },
  {
    "example_id": 1814,
    "prompt": "What is the client's total investment and the number of investments they have made?",
    "generated_sql": "SELECT ClientID, SUM(InvestmentAmount) AS TotalInvestments FROM ClientInvestments JOIN Investment ON ClientInvestments.ClientID = Investment.ClientID GROUP BY ClientID;",
    "reference_sql": "SELECT client_id, name, SUM(investment) OVER (PARTITION BY client_id ORDER BY client_id) as total_investment, COUNT(*) OVER (PARTITION BY client_id ORDER BY client_id) as number_of_investments FROM clients;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing count of investments per client"
    }
  },
  {
    "example_id": 1815,
    "prompt": "Which clients have investments in both Tech Stocks and Renewable Energy Stocks?",
    "generated_sql": "SELECT c.name FROM clients c JOIN investments i ON c.id = i.client_id WHERE i.investment_type = 'Tech Stocks' AND i.investment_type = 'Renewable Energy Stocks';",
    "reference_sql": "SELECT C1.ClientID FROM ClientStockInvestments C1 JOIN Stocks S1 ON C1.StockSymbol = S1.Symbol JOIN ClientStockInvestments C2 ON C1.ClientID = C2.ClientID JOIN Stocks S2 ON C2.StockSymbol = S2.Symbol WHERE S1.Sector = 'Tech' AND S2.Sector = 'Renewable Energy';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "WHERE clause cannot match two different investment_type values in the same row; query needs grouping or self-join to find clients with both types"
    }
  },
  {
    "example_id": 1816,
    "prompt": "List all the unique destinations of container vessels for the month of June 2022",
    "generated_sql": "SELECT d.destination, COUNT(DISTINCT d.id) FROM vessels v JOIN cargo c ON v.id = c.vessel_id WHERE v.location LIKE '%June 2022%' GROUP BY d.destination;",
    "reference_sql": "SELECT DISTINCT destination FROM vessel_destinations WHERE departure_date BETWEEN '2022-06-01' AND '2022-06-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses undefined alias 'd', incorrect joins and filters, and returns a count instead of unique destinations"
    }
  },
  {
    "example_id": 1817,
    "prompt": "List all materials used in the manufacturing sector in Brazil and South Africa.",
    "generated_sql": "SELECT material FROM materials WHERE country IN ('Brazil', 'South Africa') AND sector ='manufacturing';",
    "reference_sql": "SELECT DISTINCT material_name FROM material_data WHERE country IN ('Brazil', 'South Africa') AND industry = 'Manufacturing';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing DISTINCT to ensure unique materials"
    }
  },
  {
    "example_id": 1818,
    "prompt": "Find the excavation site with the highest total artifact weight for each country, along with the country and total weight.",
    "generated_sql": "SELECT country, SUM(weight) as total_weight FROM excavation_sites GROUP BY country HAVING total_weight > (SELECT MAX(total_weight) FROM excavation_sites);",
    "reference_sql": "SELECT SiteName, Country, SUM(ArtifactWeight) AS TotalWeight FROM ExcavationSites GROUP BY SiteName, Country HAVING COUNT(DISTINCT Year) = (SELECT COUNT(DISTINCT Year) FROM ExcavationSites GROUP BY Year);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by country and compares to a global max instead of finding the highest-weight site per country"
    }
  },
  {
    "example_id": 1819,
    "prompt": "Find the top 3 longest songs in the Rock genre.",
    "generated_sql": "SELECT SongName, MIN(Genre) OVER (PARTITION BY Genre ORDER BY SongLength ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS LongestSong FROM RockGenre;",
    "reference_sql": "SELECT * FROM (SELECT song_id, song_length, genre, ROW_NUMBER() OVER (ORDER BY song_length DESC) AS row_num FROM songs WHERE genre = 'Rock') AS subquery WHERE row_num <= 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MIN(Genre) window and wrong logic instead of ordering by SongLength and limiting to top 3 rock songs"
    }
  },
  {
    "example_id": 1820,
    "prompt": "Insert a new donation from donor with ID 3 for $200 on 2022-03-20 to program ID 1.",
    "generated_sql": "INSERT INTO Donations (DonorID, DonorName, Amount, Date) VALUES (3, 'Donor 3', 200, '2022-03-20');",
    "reference_sql": "INSERT INTO Donations (DonationID, DonorID, ProgramID, Amount, DonationDate) VALUES (4, 3, 1, 200.00, '2022-03-20');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing ProgramID column and insertion, and unnecessary DonorName value"
    }
  },
  {
    "example_id": 1821,
    "prompt": "What was the total amount donated by the top 3 donors in 'q2_2022' donation period?",
    "generated_sql": "SELECT SUM(amount) FROM donations d JOIN donors d1 ON d1.donor_id = d.id WHERE EXTRACT(QUARTER FROM donation_date) = 2 AND EXTRACT(YEAR FROM donation_date) = 2022;",
    "reference_sql": "SELECT SUM(total_donation) FROM (SELECT total_donation FROM donors WHERE donors.id IN (SELECT id FROM donors WHERE donation_period = 'q2_2022' ORDER BY total_donation DESC LIMIT 3)) subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query sums all donations in Q2 2022 without selecting the top 3 donors"
    }
  },
  {
    "example_id": 1822,
    "prompt": "What is the total capacity of renewable energy plants in Australia?",
    "generated_sql": "SELECT SUM(capacity) FROM renewable_energy_plants WHERE country = 'Australia';",
    "reference_sql": "SELECT SUM(capacity) FROM renewable_plants WHERE country = 'Australia';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1823,
    "prompt": "Which solar power plants in Spain have a capacity greater than 50 MW?",
    "generated_sql": "SELECT * FROM solar_power_plants WHERE name LIKE '%Spain%' AND capacity > 50;",
    "reference_sql": "SELECT name, capacity FROM solar_plants WHERE country = 'Spain' AND capacity > 50.0;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on name LIKE '%Spain%' instead of using a country column to identify plants in Spain"
    }
  },
  {
    "example_id": 1824,
    "prompt": "How many refugees are there in each region of 'regions' table and what are their names?",
    "generated_sql": "SELECT region, COUNT(*) as refugees FROM regions GROUP BY region;",
    "reference_sql": "SELECT region_name, COUNT(*) as num_refugees FROM refugees INNER JOIN regions ON refugees.region_id = regions.region_id GROUP BY region_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query only returns counts per region and does not include refugee names"
    }
  },
  {
    "example_id": 1825,
    "prompt": "What is the average score for AI tools designed for persons with disabilities?",
    "generated_sql": "SELECT AVG(score) FROM Tools WHERE category = 'AI' AND disability_type = 'person';",
    "reference_sql": "SELECT AVG(score) FROM ai_tools WHERE type = 'PersonsWithDisabilities';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering disability_type = 'person' is incorrect; it should include all tools for any disability rather than value 'person'"
    }
  },
  {
    "example_id": 1826,
    "prompt": "How many trains are there in total in the city of Tokyo?",
    "generated_sql": "SELECT COUNT(*) FROM TokyoTrain;",
    "reference_sql": "SELECT COUNT(*) FROM trains WHERE city = 'Tokyo';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1827,
    "prompt": "What is the average capacity of factories in Spain, France, and the United Kingdom?",
    "generated_sql": "SELECT AVG(capacity) FROM factories WHERE country IN ('Spain', 'France', 'United Kingdom');",
    "reference_sql": "SELECT AVG(capacity) FROM factories WHERE location LIKE '%Spain%' OR location LIKE '%France%' OR location LIKE '%UK%';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1828,
    "prompt": "Identify the bank with the highest percentage of loans above $10,000 for Shariah-compliant loans?",
    "generated_sql": "SELECT bank_name FROM Shariah_compliant_loans WHERE percentage > 100;",
    "reference_sql": "SELECT bank_id, 100.0 * SUM(CASE WHEN type = 'Shariah-compliant' AND amount > 10000 THEN amount ELSE 0 END) / SUM(CASE WHEN type = 'Shariah-compliant' THEN amount ELSE 0 END) as large_shariah_loan_percentage FROM loans GROUP BY bank_id ORDER BY large_shariah_loan_percentage DESC FETCH FIRST 1 ROW ONLY;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses incorrect filter and does not select the maximum percentage; missing ORDER BY and LIMIT"
    }
  },
  {
    "example_id": 1829,
    "prompt": "What is the average salary for female managers in the financial institutions table?",
    "generated_sql": "SELECT AVG(salary) FROM financial_institutions WHERE gender = 'Female';",
    "reference_sql": "SELECT AVG(salary) FROM employee_demographics WHERE role = 'Manager' AND gender = 'Female';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for managers (e.g., WHERE job_title = 'Manager')"
    }
  },
  {
    "example_id": 1830,
    "prompt": "Find programs with no financial donations",
    "generated_sql": "SELECT program FROM programs WHERE financial_donation = 0;",
    "reference_sql": "SELECT p.name FROM programs p LEFT JOIN financial_donations fd ON p.id = fd.program_id WHERE fd.program_id IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Assumes a financial_donation column in programs instead of checking for absence of donation records"
    }
  },
  {
    "example_id": 1831,
    "prompt": "How many unique donors are there in each region?",
    "generated_sql": "SELECT region, COUNT(DISTINCT donor_id) as num_donors FROM donors GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(DISTINCT donor_name) FROM donations GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1832,
    "prompt": "Update the total_donation column in the donors table to set the value to 600.00 for the record with id = 1.",
    "generated_sql": "UPDATE donors SET total_donation = 600.00 WHERE id = 1;",
    "reference_sql": "UPDATE donors SET total_donation = 600.00 WHERE id = 1;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1833,
    "prompt": "Which biotech startups were founded in the last 2 years and received funding from Angel Investors?",
    "generated_sql": "SELECT startups.name, startups.startup_id, founders.founder_name FROM startups INNER JOIN investors ON startups.investor_id = investors.id WHERE startups.founder_id IN (SELECT founder_id FROM investors WHERE name = 'Angel Investors');",
    "reference_sql": "SELECT name FROM startups INNER JOIN funding_sources ON startups.funding_source_id = funding_sources.id WHERE founded_date >= DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR) AND funding_sources.name = 'Angel Investors';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by biotech sector or founding date, uses wrong join and subquery for Angel Investors funding"
    }
  },
  {
    "example_id": 1834,
    "prompt": "What is the average income for all households in each city?",
    "generated_sql": "SELECT city, AVG(income) FROM households GROUP BY city;",
    "reference_sql": "SELECT c.name, AVG(h.income) AS avg_income FROM cities c JOIN households h ON c.id = h.city_id GROUP BY c.name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1835,
    "prompt": "What is the total number of mental health parity violations reported in Illinois in 2020?",
    "generated_sql": "SELECT COUNT(*) FROM mental_health_parity INNER JOIN states ON mental_health_parity.state = states.state WHERE states.state = 'Illinois' AND parity_date BETWEEN '2020-01-01' AND '2020-12-31';",
    "reference_sql": "SELECT COUNT(*) FROM mental_health_parity WHERE violation_date >= '2020-01-01' AND violation_date < '2021-01-01' AND location = 'Illinois';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1836,
    "prompt": "What is the average rating of cultural heritage sites with virtual tours in Germany and Brazil?",
    "generated_sql": "SELECT AVG(rating) FROM CulturalHeritageSites WHERE location IN ('Germany', 'Brazil');",
    "reference_sql": "SELECT AVG(Ratings.rating) FROM Ratings JOIN Sites ON Ratings.site_id = Sites.id WHERE Sites.country IN ('Germany', 'Brazil') AND Sites.has_virtual_tour = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for sites with virtual tours"
    }
  },
  {
    "example_id": 1837,
    "prompt": "How many artworks were sold by each gallery in 2021?",
    "generated_sql": "SELECT GalleryName, SUM(SaleAmount) as TotalSales FROM Artworks WHERE YEAR(SaleDate) = 2021 GROUP BY GalleryName;",
    "reference_sql": "SELECT Gallery, SUM(QuantitySold) as TotalQuantitySold FROM GallerySales WHERE Year = 2021 GROUP BY Gallery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums sales amounts instead of counting the number of artworks sold"
    }
  },
  {
    "example_id": 1838,
    "prompt": "What are the top 3 species with the most sightings across all arctic research stations?",
    "generated_sql": "SELECT s.name, COUNT(s.id) AS total_sightings FROM site_sights s1 WHERE s1.station_id IN (SELECT station_id FROM arctic_stations GROUP BY station_id) AND s1.species_id IN (SELECT species_id FROM arctic_species) UNION SELECT s.name, COUNT(s.id) AS total_sightings FROM site_sights s2 WHERE s2.station_id IN (SELECT station_id FROM arctic_stations GROUP BY station_id) AND s2.species_id IN (SELECT species_",
    "reference_sql": "SELECT species_name, SUM(sightings) as total_sightings, RANK() OVER (ORDER BY SUM(sightings) DESC) as rank FROM species_observations GROUP BY species_name HAVING rank <= 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query is incomplete, lacks GROUP BY, ORDER BY, and LIMIT; uses incorrect aliases and UNION"
    }
  },
  {
    "example_id": 1839,
    "prompt": "What is the maximum temperature per month in the 'temperature_readings' table?",
    "generated_sql": "SELECT month, MAX(temperature) FROM temperature_readings GROUP BY month;",
    "reference_sql": "SELECT DATE_TRUNC('month', reading_date) AS month, MAX(temperature) FROM temperature_readings GROUP BY month;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1840,
    "prompt": "Update the visitors_per_month of Taj Mahal to 25000?",
    "generated_sql": "UPDATE visitors SET visitor_per_month = 25000 WHERE building_name = 'Taj Mahal' AND visitor_count = 25000;",
    "reference_sql": "UPDATE HeritageSite SET visitors_per_month = 25000 WHERE name = 'Taj Mahal';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause incorrectly includes `visitor_count = 25000`, so it won\u2019t update the Taj Mahal row unless it already has that value; it should only filter by `building_name`."
    }
  },
  {
    "example_id": 1841,
    "prompt": "What is the average age of traditional dances per country?",
    "generated_sql": "SELECT Country, AVG(Age) as AvgAge FROM TraditionalDances GROUP BY Country;",
    "reference_sql": "SELECT Context.CountryName, AVG(Dances.DanceAge) AS AvgDanceAge FROM (SELECT * FROM Countries WHERE Continent = 'Americas' OR Continent = 'Africa' OR Continent = 'Asia') AS Context INNER JOIN Dances ON Context.CountryID = Dances.CountryID GROUP BY Context.CountryName;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1842,
    "prompt": "What is the total number of patients treated with medication and therapy in each country?",
    "generated_sql": "SELECT country, SUM(patient_count) as total_patients FROM patients WHERE medication = 'Medication' GROUP BY country;",
    "reference_sql": "SELECT countries.country, COUNT(DISTINCT patients.patient_id) FROM patients JOIN medications ON patients.patient_id = medications.patient_id JOIN therapy_sessions ON patients.patient_id = therapy_sessions.patient_id JOIN (SELECT DISTINCT country FROM patients) AS countries ON patients.country = countries.country GROUP BY countries.country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query only sums patients with medication and ignores therapy"
    }
  },
  {
    "example_id": 1843,
    "prompt": "What's the most common therapy type among patients?",
    "generated_sql": "SELECT therapy_type, COUNT(DISTINCT patient_id) as num_patients FROM therapy_types GROUP BY therapy_type ORDER BY num_patients DESC LIMIT 1;",
    "reference_sql": "SELECT therapy, COUNT(*) AS therapy_count FROM patients GROUP BY therapy ORDER BY therapy_count DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1844,
    "prompt": "Find the average HearingDuration for each District in the CommunityCourts table.",
    "generated_sql": "SELECT District, AVG(HearingDuration) as AverageHearingDuration FROM CommunityCourts GROUP BY District;",
    "reference_sql": "SELECT District, AVG(HearingDuration) as AverageHearingDuration FROM CommunityCourtHearings JOIN CommunityCourts ON CommunityCourtHearings.CourtID = CommunityCourts.CourtID GROUP BY District;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1845,
    "prompt": "What is the maximum grant_amount awarded by a funding_source in the 'civil_court_grants' table?",
    "generated_sql": "SELECT MAX(grant_amount) FROM civil_court_grants;",
    "reference_sql": "SELECT funding_source, MAX(grant_amount) FROM civil_court_grants GROUP BY funding_source;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query returns overall max instead of max per funding_source; missing grouping by funding_source"
    }
  },
  {
    "example_id": 1846,
    "prompt": "What is the average depth of all marine protected areas (MPAs) in the Pacific Ocean?",
    "generated_sql": "SELECT AVG(depth) FROM marine_protected_areas WHERE ocean = 'Pacific Ocean';",
    "reference_sql": "SELECT AVG(pacific_ocean.depth) FROM pacific_ocean JOIN marine_protected_areas ON pacific_ocean.name = marine_protected_areas.name WHERE marine_protected_areas.mpa_type = 'No-take';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1847,
    "prompt": "What is the change in population size for each marine species from 2020 to 2021?",
    "generated_sql": "SELECT species, SUM(population) as total_population FROM population_data WHERE year BETWEEN 2020 AND 2021 GROUP BY species;",
    "reference_sql": "SELECT species, (population_size - LAG(population_size) OVER (PARTITION BY species ORDER BY year)) change_in_population FROM marine_species_population;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query sums populations for 2020 and 2021 instead of calculating the difference between the two years."
    }
  },
  {
    "example_id": 1848,
    "prompt": "Count the number of unique viewers who watched a series on Netflix by country",
    "generated_sql": "SELECT Country, COUNT(DISTINCT ViewerID) FROM Viewers WHERE ViewerID = (SELECT ID FROM (SELECT DISTINCT Country, ROW_NUMBER() OVER (PARTITION BY ViewerID ORDER BY YEAR(ShowDate) DESC) as Rank FROM Viewers WHERE ShowID IN (SELECT ID FROM ShowID WHERE Country = 'United States' ORDER BY YEAR(ShowDate) DESC) UNION SELECT DISTINCT Country FROM Viewers WHERE ViewerID = (SELECT ID FROM (SELECT DISTINCT Country, ROW_NUMBER()",
    "reference_sql": "SELECT production_country, COUNT(DISTINCT viewer_id) as unique_viewers FROM viewership v JOIN movies m ON v.series_title = m.title WHERE platform = 'Netflix' GROUP BY production_country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses incorrect subqueries and does not group distinct viewers by country for Netflix series"
    }
  },
  {
    "example_id": 1849,
    "prompt": "What is the maximum number of likes received by posts about media literacy from users in Asia?",
    "generated_sql": "SELECT MAX(likes) FROM posts WHERE user_id IN (SELECT user_id FROM users WHERE location = 'Asia') AND post_type = 'Media Literacy' AND post_content LIKE '%media literacy%';",
    "reference_sql": "SELECT MAX(likes) FROM posts WHERE domain = 'Media Literacy' AND region = 'Asia';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary post_content LIKE filter may exclude valid media literacy posts"
    }
  },
  {
    "example_id": 1850,
    "prompt": "What is the total quantity of organic ingredients in the inventory?",
    "generated_sql": "SELECT SUM(quantity) FROM inventory WHERE organic = true;",
    "reference_sql": "SELECT SUM(quantity) FROM Inventory WHERE is_organic = true;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1851,
    "prompt": "Delete all military sales records with supplier 'Thales'",
    "generated_sql": "DELETE FROM sales WHERE supplier = 'Thales' AND transaction_date >= '2022-01-01';",
    "reference_sql": "DELETE FROM military_sales WHERE supplier = 'Thales';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query adds an extraneous date filter and omits filtering for military sales"
    }
  },
  {
    "example_id": 1852,
    "prompt": "Compare coal production and employment rates in China and India between 2018 and 2020.",
    "generated_sql": "SELECT coal_production, employment_rate FROM coal_production_india WHERE country IN (SELECT country FROM China_oil_production WHERE year = 2018);",
    "reference_sql": "SELECT 'China' AS country, china_coal_production.production, china_employment.employment FROM china_coal_production INNER JOIN china_employment ON china_coal_production.year = china_employment.year WHERE china_coal_production.year BETWEEN 2018 AND 2020 UNION ALL SELECT 'India', india_coal_production.production, india_employment.employment FROM india_coal_production INNER JOIN india_employment ON india_coal_production.year = india_employment.year WHERE india_coal_production.year BETWEEN 2018 AND 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query selects only from the India coal table and uses an unrelated oil production table, missing China data and the specified years"
    }
  },
  {
    "example_id": 1853,
    "prompt": "What are the monthly trends of resource depletion for coal and iron?",
    "generated_sql": "SELECT mineral_type, MIN(depletion_monthly)  FROM resource_depletion WHERE mineral_type = 'coal' AND mineral_type = 'iron' GROUP BY mineral_type;",
    "reference_sql": "SELECT date, SUM(CASE WHEN resource = 'Coal' THEN quantity ELSE 0 END) as coal_quantity, SUM(CASE WHEN resource = 'Iron' THEN quantity ELSE 0 END) as iron_quantity FROM resource_depletion GROUP BY date;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect filter with AND instead of OR and wrong aggregation (MIN) instead of listing monthly values"
    }
  },
  {
    "example_id": 1854,
    "prompt": "What is the total data usage in GB for each customer in the last quarter, ordered by usage in descending order?",
    "generated_sql": "SELECT c.customer_id, s.service_name, SUM(s.usage) AS total_usage FROM customers c JOIN services s ON c.customer_id = s.customer_id WHERE s.quarter = '2022-01-01' GROUP BY c.customer_id ORDER BY total_usage DESC;",
    "reference_sql": "SELECT customer_id, SUM(data_usage)/1024/1024/1024 as total_usage_gb FROM customers WHERE date_of_usage >= DATEADD(quarter, -1, GETDATE()) GROUP BY customer_id ORDER BY total_usage_gb DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Includes service_name without grouping, uses fixed quarter date instead of last quarter, and does not convert usage to GB"
    }
  },
  {
    "example_id": 1855,
    "prompt": "Delete the record for the author 'Jane Smith' from the 'authors' table",
    "generated_sql": "DELETE FROM authors WHERE author_id = 1;",
    "reference_sql": "DELETE FROM authors WHERE first_name = 'Jane' AND last_name = 'Smith';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses author_id = 1 instead of matching author name 'Jane Smith'"
    }
  },
  {
    "example_id": 1856,
    "prompt": "What is the average age of readers who prefer opinion pieces, categorized by gender?",
    "generated_sql": "SELECT gender, AVG(age) as avg_age FROM readers WHERE preferred_opinion_pieces = TRUE GROUP BY gender;",
    "reference_sql": "SELECT gender, AVG(age) FROM readers WHERE interest = 'opinion' GROUP BY gender;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1857,
    "prompt": "What is the average number of views per reader for readers who have viewed more than 10 articles?",
    "generated_sql": "SELECT AVG(views) FROM readers INNER JOIN articles ON readers.reader_id = articles.reader_id WHERE readers.readings > 10;",
    "reference_sql": "SELECT AVG(Views) as AvgViews FROM Readers GROUP BY ReaderID HAVING COUNT(ReaderID) > 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query averages article views instead of averaging per-reader totals and fails to filter readers by count of articles viewed (no GROUP BY and COUNT)."
    }
  },
  {
    "example_id": 1858,
    "prompt": "List all countries with deep-sea exploration programs.",
    "generated_sql": "SELECT program_name FROM deep_sea_exploration_countries ORDER BY program_name LIMIT 1;",
    "reference_sql": "SELECT name FROM countries WHERE deep_sea_program = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Selects program_name instead of country and limits results to 1"
    }
  },
  {
    "example_id": 1859,
    "prompt": "Find the top 3 recipients of grants in the Education sector?",
    "generated_sql": "SELECT recipient, SUM(amount) FROM grants WHERE sector = 'Education' GROUP BY recipient ORDER BY SUM(amount) DESC LIMIT 3;",
    "reference_sql": "SELECT GrantName, Sector, Amount, ROW_NUMBER() OVER (PARTITION BY Sector ORDER BY Amount DESC) AS Rank FROM Grants WHERE Sector = 'Education' LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1860,
    "prompt": "What is the average playtime, in hours, for players from Germany, for games in the 'Simulation' genre?",
    "generated_sql": "SELECT AVG(Playtime) FROM Players WHERE PlayerID IN (SELECT PlayerID FROM Players WHERE Country = 'Germany') AND Game LIKE '%Simulation%';",
    "reference_sql": "SELECT AVG(playtime_mins / 60) FROM games JOIN players ON games.player_id = players.player_id WHERE players.player_country = 'Germany' AND game_genre = 'Simulation';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not join games table or filter on genre; misuses Game field and Playtime in Players table"
    }
  },
  {
    "example_id": 1861,
    "prompt": "Find the country with the highest number of esports event participants.",
    "generated_sql": "SELECT country, COUNT(DISTINCT participant_id) AS total_participants FROM esports_events GROUP BY country ORDER BY total_participants DESC LIMIT 1;",
    "reference_sql": "SELECT Country, Participants FROM Events ORDER BY Participants DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1862,
    "prompt": "List all games and their average playing time, ordered by the average playing time in ascending order",
    "generated_sql": "SELECT Games.Game, AVG(Games.PlayingTime) AS AvgPlayerTime FROM Games JOIN (SELECT Games.Game FROM Games ORDER BY Games.Game LIMIT 1) AS Subquery ON Games.Game = Subquery.Game GROUP BY Games.Game;",
    "reference_sql": "SELECT games.name, AVG(player_games.hours_played) as avg_playing_time FROM games JOIN player_games ON games.game_id = player_games.game_id GROUP BY games.game_id ORDER BY avg_playing_time ASC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query joins to a single-game subquery, returning only one game and lacks the required ORDER BY clause for all games by average playing time."
    }
  },
  {
    "example_id": 1863,
    "prompt": "What is the average prize money awarded at esports events in Europe?",
    "generated_sql": "SELECT AVG(prize_money) FROM esports_events WHERE region = 'Europe';",
    "reference_sql": "SELECT AVG(PrizeMoney) FROM EsportsPrizes WHERE Country IN ('Germany', 'France', 'Italy');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1864,
    "prompt": "What is the percentage of players who prefer fighting games?",
    "generated_sql": "SELECT (COUNT(DISTINCT player_id) * 100.0 / (SELECT COUNT(*) FROM PlayerPreferences)) AS pct_fighters FROM PlayerPreferences WHERE preference = 'fighting'",
    "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Players)) FROM PlayerGamePreferences WHERE GamePreference = 'fighting';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1865,
    "prompt": "How many public libraries are there in the state of New South Wales?",
    "generated_sql": "SELECT COUNT(*) FROM Library WHERE name = 'New South Wales' GROUP BY name HAVING COUNT(*) <= 500;",
    "reference_sql": "SELECT COUNT(*) FROM public_libraries WHERE state = 'New South Wales';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on name instead of state and uses unnecessary GROUP BY and HAVING clauses instead of a simple COUNT on state='New South Wales'"
    }
  },
  {
    "example_id": 1866,
    "prompt": "Update the budget for Education policy to 10",
    "generated_sql": "UPDATE Policy SET budget = 10 WHERE name = 'Education Policy';",
    "reference_sql": "UPDATE Policy_Budget SET Budget = 10 WHERE Policy_Area = 'Education';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause uses 'Education Policy' instead of the expected policy name 'Education'."
    }
  },
  {
    "example_id": 1867,
    "prompt": "What is the total budget allocated for infrastructure in 2023, in the 'annual_budget' table?",
    "generated_sql": "SELECT SUM(budget) FROM (SELECT SUM(budget) FROM annual_budget WHERE year = 2023) AS total_budget;",
    "reference_sql": "SELECT budget FROM annual_budget WHERE year = 2023 AND category = 'Infrastructure';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter by the 'infrastructure' category"
    }
  },
  {
    "example_id": 1868,
    "prompt": "Find the percentage of properties with sustainable features in each neighborhood.",
    "generated_sql": "SELECT Neighborhood, (COUNT(Property) * 100.0 / (SELECT COUNT(*) FROM Properties WHERE is_sustainable = TRUE)) as percentage FROM Properties GROUP BY Neighborhood;",
    "reference_sql": "SELECT neighborhood, (COUNT(*) FILTER (WHERE sustainable = TRUE)) * 100.0 / COUNT(*) as percentage_sustainable FROM properties GROUP BY neighborhood;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts all properties instead of only sustainable ones and divides by total sustainable properties rather than total properties per neighborhood"
    }
  },
  {
    "example_id": 1869,
    "prompt": "What is the total installed capacity (in MW) of renewable energy projects in the 'solar' category?",
    "generated_sql": "SELECT SUM(installed_capacity) FROM renewable_energy_projects WHERE category ='solar';",
    "reference_sql": "SELECT SUM(capacity_mw) FROM renewable_energy_projects WHERE category = 'solar';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1870,
    "prompt": "List all sustainable sourcing costs for 'Eco-Friendly Eats' in 2021.",
    "generated_sql": "SELECT SUM(cost) FROM sustainable_sourcing WHERE food_type = 'Eco-Friendly Eats' AND year = 2021;",
    "reference_sql": "SELECT * FROM SustainableSourcing WHERE restaurant_id = 9 AND year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using SUM aggregates the costs instead of listing each individual sustainable sourcing cost"
    }
  },
  {
    "example_id": 1871,
    "prompt": "Count the number of products in the 'grocery' category",
    "generated_sql": "SELECT COUNT(*) FROM products WHERE category = 'grocery';",
    "reference_sql": "SELECT COUNT(*) FROM products WHERE category = 'grocery';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1872,
    "prompt": "How many unique products are available in each store location?",
    "generated_sql": "SELECT StoreLocation, COUNT(DISTINCT ProductID) as UniqueProducts FROM Products WHERE Location IN (SELECT StoreLocation FROM Products WHERE ProductID IN (SELECT ProductID FROM Products WHERE ProductType = 'Plastic')) GROUP BY StoreLocation;",
    "reference_sql": "SELECT i.LocationName, COUNT(DISTINCT i.ProductID) AS UniqueProducts FROM Inventory i GROUP BY i.LocationName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly filters stores to only those with plastic products instead of counting unique products for all locations"
    }
  },
  {
    "example_id": 1873,
    "prompt": "How many space missions were launched in the last 5 years by continent?",
    "generated_sql": "SELECT continent, COUNT(*) FROM space_missions WHERE launch_date >= DATEADD(year, -5, GETDATE()) GROUP BY continent;",
    "reference_sql": "SELECT continent, COUNT(*) as mission_count FROM missions WHERE launch_date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY continent;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1874,
    "prompt": "Calculate the total mass of asteroids studied by mission 'Voyager 1'",
    "generated_sql": "SELECT SUM(mass) FROM Asteroids WHERE mission = 'Voyager 1';",
    "reference_sql": "SELECT SUM(mass) FROM asteroids WHERE mission = 'Voyager 1';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1875,
    "prompt": "Which incident response policies were implemented in Asia, and what is the rank of each policy based on the number of incidents it covers?",
    "generated_sql": "SELECT policy_id, policy_name, incident_count, rank FROM policies WHERE location = 'Asia';",
    "reference_sql": "SELECT policies.type, RANK() OVER (ORDER BY incident_count DESC) as policy_rank FROM (SELECT policy.type, COUNT(*) as incident_count FROM incidents JOIN policies ON incidents.date = policies.date WHERE policies.region = 'Asia' GROUP BY policy.type) as subquery JOIN policies ON policies.type = subquery.type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not compute ranks using incident_count and does not filter specifically for incident response policies"
    }
  },
  {
    "example_id": 1876,
    "prompt": "Which systems were scanned the most in the last month, and what were their maximum CVE scores?",
    "generated_sql": "SELECT system_id, MAX(CVE_score) FROM scan_data WHERE scan_date >= DATEADD(month, -1, CURRENT_DATE) GROUP BY system_id ORDER BY MAX(CVE_score) DESC;",
    "reference_sql": "SELECT s.system_name, MAX(c.score) as max_score FROM systems s INNER JOIN (SELECT system_id, COUNT(*) as scan_count FROM scan_dates GROUP BY system_id) sd ON s.system_id = sd.system_id LEFT JOIN cve_scores c ON s.system_id = c.system_id AND sd.scan_date = c.scan_date WHERE sd.scan_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY s.system_name ORDER BY scan_count DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not count or order by the number of scans per system; it only retrieves max CVE scores."
    }
  },
  {
    "example_id": 1877,
    "prompt": "Show the total quantity of each garment in the inventory table",
    "generated_sql": "SELECT garment_name, SUM(quantity) as total_quantity FROM inventory WHERE garment_name IN ('Eco-Friendly Vests', 'Hair Care Tops') GROUP BY garment_name;",
    "reference_sql": "SELECT garment_id, SUM(quantity) as total_quantity FROM inventory GROUP BY garment_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query filters to only two garment names instead of including all garments"
    }
  },
  {
    "example_id": 1878,
    "prompt": "What are the names and locations of suppliers established after 2010?",
    "generated_sql": "SELECT supplier_name, supplier_location FROM suppliers WHERE year_established < 2010;",
    "reference_sql": "SELECT name, location FROM suppliers WHERE establishment_date > '2010-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses '< 2010' instead of '> 2010' to filter suppliers established after 2010."
    }
  },
  {
    "example_id": 1879,
    "prompt": "What is the maximum salary increase percentage for union workers in the 'Hospitality' sector since 2010?",
    "generated_sql": "SELECT MAX(increase_percentage) FROM union_workers WHERE sector = 'Hospitality' AND year BETWEEN 2010 AND 2020;",
    "reference_sql": "SELECT MAX(SalaryIncreasePercentage) FROM SalaryIncreases WHERE Sector = 'Hospitality' AND EffectiveDate >= '2010-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query restricts years to 2010-2020 instead of all years since 2010"
    }
  },
  {
    "example_id": 1880,
    "prompt": "What is the total revenue generated from members in each age group?",
    "generated_sql": "SELECT age, SUM(revenue) FROM membership_data GROUP BY age;",
    "reference_sql": "SELECT age, SUM(revenue) FROM member_demographics GROUP BY age;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by individual age rather than defined age groups"
    }
  },
  {
    "example_id": 1881,
    "prompt": "What is the distribution of AI safety research topics by year?",
    "generated_sql": "SELECT year, topic_name, COUNT(*) FROM ai_safety_research WHERE category = 'Safety' GROUP BY year, topic_name;",
    "reference_sql": "SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1882,
    "prompt": "How many economic diversification efforts in the 'diversification' table have been unsuccessful or have been abandoned?",
    "generated_sql": "SELECT COUNT(*) FROM diversification WHERE failed = false AND failed_attempt = false;",
    "reference_sql": "SELECT COUNT(*) FROM diversification WHERE status IN ('unsuccessful', 'abandoned');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters for failed = false AND failed_attempt = false, which counts successful efforts; it should use failed = true OR abandoned = true."
    }
  },
  {
    "example_id": 1883,
    "prompt": "List all rural infrastructure projects in South America, along with their start and end dates, and the number of beneficiaries.",
    "generated_sql": "SELECT s.name, s.start_date, s.end_date FROM rural_infrastructure s WHERE s.location LIKE 'South America';",
    "reference_sql": "SELECT project_name, start_date, end_date, num_beneficiaries FROM rural_dev.rural_infrastructure_projects WHERE country LIKE 'South%' OR country LIKE 'Sur%';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing number of beneficiaries column"
    }
  },
  {
    "example_id": 1884,
    "prompt": "What is the minimum budget (in USD) for agricultural innovation projects in the Caribbean?",
    "generated_sql": "SELECT MIN(budget) FROM agricultural_innovation WHERE location = 'Caribbean' AND type = 'Agricultural Innovation' AND cost_source LIKE '%USD%';",
    "reference_sql": "SELECT MIN(budget) FROM Agricultural_Projects WHERE region = 'Caribbean';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1885,
    "prompt": "Which community development initiatives had the lowest cost in Nepal between 2019 and 2021?",
    "generated_sql": "SELECT name, cost FROM community_development_initiatives WHERE country = 'Nepal' AND year BETWEEN 2019 AND 2021 ORDER BY cost DESC LIMIT 1;",
    "reference_sql": "SELECT initiative, MIN(cost) as min_cost FROM community_development_nepal WHERE country = 'Nepal' AND year BETWEEN 2019 AND 2021 GROUP BY initiative;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query orders by cost DESC to get highest cost instead of lowest; should use ASC"
    }
  },
  {
    "example_id": 1886,
    "prompt": "Which aircraft models were involved in the highest number of accidents in 2020?",
    "generated_sql": "SELECT models.model_id, COUNT(*) as total_accidents FROM aircraft_accidents WHERE year = 2020 GROUP BY models.model_id ORDER BY total_accidents DESC;",
    "reference_sql": "SELECT Aircraft.model, COUNT(*) as num_accidents FROM Aircraft INNER JOIN Accidents ON Aircraft.id = Accidents.aircraft_id WHERE Accidents.year = 2020 GROUP BY Aircraft.model ORDER BY num_accidents DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query references models.model_id without joining the models table and does not limit results to the top count"
    }
  },
  {
    "example_id": 1887,
    "prompt": "Delete the 'community_education' table",
    "generated_sql": "DELETE FROM community_education;",
    "reference_sql": "DROP TABLE community_education;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses DELETE to remove rows instead of DROP TABLE to delete the table"
    }
  },
  {
    "example_id": 1888,
    "prompt": "What is the total number of animals in the 'sanctuary_a' and 'sanctuary_b'?",
    "generated_sql": "SELECT SUM(animal_count) FROM sanctuary_a WHERE animal_count < 10000;",
    "reference_sql": "SELECT SUM(s1.population + s2.population) FROM sanctuary_a s1 FULL OUTER JOIN sanctuary_b s2 ON s1.animal_id = s2.animal_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only sums sanctuary_a with a filter and ignores sanctuary_b"
    }
  },
  {
    "example_id": 1889,
    "prompt": "Delete the record with date '2022-01-02' in the FishTank table.",
    "generated_sql": "DELETE FROM FishTank WHERE date = '2022-01-02';",
    "reference_sql": "DELETE FROM FishTank WHERE date = '2022-01-02';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1890,
    "prompt": "How many events were attended by the 'Senior' demographic in the year 2020?",
    "generated_sql": "SELECT COUNT(*) FROM events WHERE demographic = 'Senior' AND year = 2020;",
    "reference_sql": "SELECT COUNT(*) FROM arts_culture.events JOIN arts_culture.attendance ON events.event_id = attendance.event_id WHERE attendance.demographic = 'Senior' AND YEAR(events.event_date) = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1891,
    "prompt": "How many visual art events took place in each location in the last 3 years?",
    "generated_sql": "SELECT location, COUNT(*) FROM Events WHERE date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) GROUP BY location;",
    "reference_sql": "SELECT location, COUNT(event_id) FROM Events WHERE event_type = 'Visual Art' AND event_date >= DATE(NOW()) - INTERVAL 3 YEAR GROUP BY location",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Did not filter for visual art events, counting all events instead"
    }
  },
  {
    "example_id": 1892,
    "prompt": "What is the average age of attendees for each event type?",
    "generated_sql": "SELECT event_type, AVG(attendee_age) FROM events GROUP BY event_type;",
    "reference_sql": "SELECT e.event_type, AVG(a.attendee_age) AS avg_age FROM Events e JOIN Audience a ON e.event_id = a.event_id GROUP BY e.event_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query uses events table with attendee_age instead of joining attendees to events to compute average age per event type"
    }
  },
  {
    "example_id": 1893,
    "prompt": "What is the average attendance for theater events in LA and NY?",
    "generated_sql": "SELECT AVG(attendance) FROM events WHERE state IN ('LA', 'NY');",
    "reference_sql": "SELECT AVG(cnt) FROM (SELECT COUNT(DISTINCT A.attendee_id) AS cnt FROM Attendance A WHERE EXISTS (SELECT 1 FROM Events E WHERE E.event_type = 'Theater' AND E.location IN ('Los Angeles', 'New York') AND A.event_id = E.event_id)) AS subquery",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to include only theater events"
    }
  },
  {
    "example_id": 1894,
    "prompt": "What was the total revenue from online donations for the \"Visual Arts\" program?",
    "generated_sql": "SELECT SUM(price) FROM donation_revenue WHERE program = 'Visual Arts' AND donation_type = 'Online';",
    "reference_sql": "SELECT SUM(donation) FROM online_donations_2 WHERE program = 'Visual Arts';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1895,
    "prompt": "What is the average safety score of chemical production sites in the United States, partitioned by state and ranked in descending order?",
    "generated_sql": "SELECT state, AVG(safety_score) as avg_safety_score FROM chemical_production_sites WHERE country = 'USA' GROUP BY state ORDER BY avg_safety_score DESC;",
    "reference_sql": "SELECT state, AVG(safety_score) as avg_safety_score, ROW_NUMBER() OVER (ORDER BY AVG(safety_score) DESC) as rank FROM production_sites WHERE country = 'USA' GROUP BY state ORDER BY rank;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1896,
    "prompt": "What is the production rate rank for each chemical in the past 6 months?",
    "generated_sql": "SELECT c.name, r.rank FROM production_rates r INNER JOIN chemical_inventory c ON r.chemical_id = c.id WHERE r.quarter = 6 AND r.year = 2021 AND r.inventory_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
    "reference_sql": "SELECT chemical_name, production_rate, RANK() OVER(ORDER BY production_rate DESC) as production_rank FROM production_rates WHERE date >= DATEADD(month, -6, GETDATE());",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on quarter = 6 and fixed year ignores the actual past six months timeframe"
    }
  },
  {
    "example_id": 1897,
    "prompt": "Which countries have the highest climate finance expenditures in Latin America?",
    "generated_sql": "SELECT DISTINCT country, SUM(expenditure_amount) as total_expenditure FROM climate_finance WHERE location = 'Latin America' GROUP BY country ORDER BY total_expenditure DESC LIMIT 5;",
    "reference_sql": "SELECT country, SUM(amount) as total_amount FROM climate_finance WHERE sector = 'Climate Mitigation' OR sector = 'Climate Adaptation' GROUP BY country ORDER BY total_amount DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query arbitrarily limits results to 5 countries though the question doesn\u2019t specify a top N, potentially omitting others with high expenditures."
    }
  },
  {
    "example_id": 1898,
    "prompt": "What are the total sales for each drug in Q2 2020?",
    "generated_sql": "SELECT drug, SUM(sales) FROM drug_sales_2020 WHERE year = 2020 AND quarter = 2 GROUP BY drug;",
    "reference_sql": "SELECT drug_name, SUM(revenue) as total_sales FROM sales JOIN drugs ON sales.drug_id = drugs.drug_id WHERE sale_date BETWEEN '2020-04-01' AND '2020-06-30' GROUP BY drug_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1899,
    "prompt": "What is the market access strategy for each drug, ranked by market access approval date?",
    "generated_sql": "SELECT drug_name, approval_date, market_access_approval_date FROM drugs ORDER BY approval_date ASC;",
    "reference_sql": "SELECT DrugName, ApprovalDate, ROW_NUMBER() OVER (ORDER BY ApprovalDate) as ApprovalRank FROM MarketAccess;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not include market_access_strategy and orders by approval_date instead of market_access_approval_date"
    }
  },
  {
    "example_id": 1900,
    "prompt": "Who are the top 2 sales representatives by total sales for 'DrugT' in the North America region in Q1 2021?",
    "generated_sql": "SELECT s.name, SUM(s.sales) as total_sales FROM Sales s JOIN (SELECT product_id, product_name, SUM(quantity) AS total_sales FROM ProductQuantity WHERE product_id = 1 AND product_name LIKE CONCAT('%', '%', '%') GROUP BY product_id, product_name) s2 ON s.product_id = s2.product_id WHERE s2.product_id = 1 AND s2.quantity = 1 GROUP BY s.name ORDER BY total_sales DESC LIMIT",
    "reference_sql": "SELECT rep_name, SUM(total_sales) AS total_sales FROM sales_data_2 WHERE drug_name = 'DrugT' AND region = 'North America' AND quarter = 1 GROUP BY rep_name ORDER BY total_sales DESC LIMIT 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by product name, region, or date, and contains incorrect join conditions and missing LIMIT value."
    }
  },
  {
    "example_id": 1901,
    "prompt": "What is the number of hospital beds per state?",
    "generated_sql": "SELECT state, COUNT(*) FROM hospitals GROUP BY state;",
    "reference_sql": "SELECT state, AVG(num_beds) FROM beds GROUP BY state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts hospitals instead of summing beds per state"
    }
  },
  {
    "example_id": 1902,
    "prompt": "Insert a new row into the 'startups' table for 'Health Startup 5', founded in '2022-03-15' by 'Middle Eastern' founder, with a funding amount of $7,500,000",
    "generated_sql": "INSERT INTO startups (id, name, founder, funding_year, founder_country) VALUES (1, 'Health Startup 5', 'Middle Eastern', '2022-03-15', 'Middle Eastern'), (2, 'Health Startup 5', 'Middle Eastern', '2022-03-15', 'Middle Eastern'), (3, 'Health Startup 5', 'Middle Eastern', '2022-03-15', 'Middle Eastern');",
    "reference_sql": "INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserts multiple rows with wrong columns and omits funding amount"
    }
  },
  {
    "example_id": 1903,
    "prompt": "What is the percentage of diverse individuals in the workforce for companies with headquarters in 'Indonesia' and 'Argentina'?",
    "generated_sql": "SELECT 100.0 * COUNT(DISTINCT co.id) / COUNT(DISTINCT industry.industry_id) * 100 AS diversity_percentage FROM co, industry WHERE co.id = industry.industry_id AND co.country IN ('Indonesia', 'Argentina');",
    "reference_sql": "SELECT d.company_id, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM diversity WHERE company_id = d.company_id), 2) as percentage FROM diversity d WHERE (SELECT country FROM company WHERE id = d.company_id) IN ('Indonesia', 'Argentina') GROUP BY d.company_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts companies/industries instead of diverse vs total workforce individuals and applies incorrect percentage calculation"
    }
  },
  {
    "example_id": 1904,
    "prompt": "What is the average budget spent on disability support programs per type and month?",
    "generated_sql": "SELECT type, MONTH(date) AS month, AVG(amount) as avg_budget FROM SupportPrograms GROUP BY type, month;",
    "reference_sql": "SELECT DATE_PART('month', Request_Date) as Month, Accommodation_Type, AVG(Budget) as Avg_Budget FROM Disability_Support_Data GROUP BY Month, Accommodation_Type;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1905,
    "prompt": "List the regulatory frameworks for digital assets in Switzerland and their respective statuses.",
    "generated_sql": "SELECT f.name, f.status FROM regulatory_frameworks f INNER JOIN digital_assets d ON f.id = d.regulation_id WHERE d.name = 'Digital_Asset_Regulation' AND f.region = 'Switzerland';",
    "reference_sql": "SELECT framework_name, status FROM swiss_frameworks;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary join on digital_assets and filtering on a specific asset name instead of selecting all frameworks for digital assets in Switzerland"
    }
  },
  {
    "example_id": 1906,
    "prompt": "What are the total transaction fees for each miner in the last week?",
    "generated_sql": "SELECT m.name, SUM(t.transaction_fee) FROM mining_trades t JOIN mining_mines m ON t.mining_id = m.id WHERE t.date >= DATEADD(day, -1, CURRENT_DATE) GROUP BY m.name;",
    "reference_sql": "SELECT miner, SUM(reward) as total_fees FROM block_rewards WHERE timestamp >= (SELECT timestamp FROM block_rewards ORDER BY timestamp DESC LIMIT 1) - INTERVAL '1 week' GROUP BY miner;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Date filter uses last 1 day instead of last 7 days"
    }
  },
  {
    "example_id": 1907,
    "prompt": "What is the daily average number of unique active wallets on the Polygon network in the last month?",
    "generated_sql": "SELECT DATE_TRUNC('day', timestamp) AS day, COUNT(DISTINCT wallet_id) AS num_unique FROM network_udp_wallet_daily WHERE timestamp BETWEEN DATE_TRUNC('day', CURRENT_TIMESTAMP) - INTERVAL 1 MONTH AND network_udp_wallet_daily.active = 'Y' GROUP BY DATE_TRUNC('day', timestamp) ORDER BY day;",
    "reference_sql": "SELECT AVG(wallet_count) as daily_average_unique_wallets FROM (SELECT wallet_address, COUNT(DISTINCT daily_activity) as wallet_count FROM polygon_wallets WHERE daily_activity >= NOW() - INTERVAL '1 month' GROUP BY wallet_address) subquery;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query returns daily counts instead of the average over the month and the date filter syntax is incorrect"
    }
  },
  {
    "example_id": 1908,
    "prompt": "What is the average carbon sequestration rate for tropical forests in Brazil?",
    "generated_sql": "SELECT AVG(carbon_sequestration) FROM (SELECT COUNT(*) AS carbon_sequestration FROM carbon_sequestration_Brazil WHERE forest_type = 'tropical' GROUP BY forest_type) AS subquery;",
    "reference_sql": "SELECT AVG(rate) FROM CarbonSequestration WHERE name = 'Tropical Forest' AND region = 'Brazil';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses COUNT instead of averaging the actual carbon sequestration values"
    }
  },
  {
    "example_id": 1909,
    "prompt": "What are the total sales for each quarter by region?",
    "generated_sql": "SELECT region, SUM(sales) FROM sales JOIN region ON sales.region = region.name GROUP BY region;",
    "reference_sql": "SELECT region, EXTRACT(QUARTER FROM sale_date) AS quarter, SUM(revenue) AS total_sales FROM sales GROUP BY region, quarter;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not include quarter grouping or select quarter"
    }
  },
  {
    "example_id": 1910,
    "prompt": "What is the total CO2 emissions of cosmetic companies in the EU?",
    "generated_sql": "SELECT SUM(co2_emissions) FROM cosmetic_companies WHERE country = 'EU';",
    "reference_sql": "SELECT SUM(co2_emissions) FROM company WHERE region = 'EU';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering country = 'EU' is invalid since EU is not a country; need to filter by countries in the EU"
    }
  },
  {
    "example_id": 1911,
    "prompt": "What is the average ticket price for each artist?",
    "generated_sql": "SELECT Artists.Name, AVG(TicketPrice.Price) AS AvgPrice FROM Artists JOIN TicketPrice ON Artists.ArtistID = TicketPrice.ArtistID GROUP BY Artists.Name;",
    "reference_sql": "SELECT artist, AVG(price) FROM Tickets GROUP BY artist;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1912,
    "prompt": "What is the average ticket price for musicals in New York?",
    "generated_sql": "SELECT AVG(price) FROM Ticket_Price WHERE city = 'New York';",
    "reference_sql": "SELECT AVG(price) FROM musicals WHERE location = 'New York';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for musicals"
    }
  },
  {
    "example_id": 1913,
    "prompt": "Get the average veteran unemployment rate for the last 3 years by state",
    "generated_sql": "SELECT state, AVG(unemployment_rate) as avg_unemployment_rate FROM veteran_unemployment WHERE year BETWEEN 2010 AND 2020 GROUP BY state;",
    "reference_sql": "SELECT state, AVG(rate) FROM veteran_unemployment WHERE year BETWEEN YEAR(CURRENT_DATE) - 3 AND YEAR(CURRENT_DATE) GROUP BY state;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses a fixed year range 2010-2020 instead of the last 3 years"
    }
  },
  {
    "example_id": 1914,
    "prompt": "What is the average time between equipment maintenance for each type of military aircraft?",
    "generated_sql": "SELECT e.type, AVG(m.time - m.start_time) AS avg_time_between_maintenance FROM aircraft e INNER JOIN maintenance_data m ON e.id = m.aircraft_id GROUP BY e.type;",
    "reference_sql": "SELECT e.equipment_type, AVG(DATEDIFF(m2.maintenance_date, m1.maintenance_date)) as avg_maintenance_interval FROM equipment e JOIN maintenance m1 ON e.id = m1.equipment_id JOIN maintenance m2 ON e.id = m2.equipment_id AND m2.maintenance_date > m1.maintenance_date GROUP BY e.equipment_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query subtracts start_time from time within the same record instead of computing intervals between consecutive maintenance events"
    }
  },
  {
    "example_id": 1915,
    "prompt": "What is the total spent on defense contracts in Q2 2021 by companies with 'Defense' in their name?",
    "generated_sql": "SELECT COUNT(contract_number) FROM defense_contracts WHERE company_name LIKE '%Defense%' AND type = 'Defense' AND quarter = 2;",
    "reference_sql": "SELECT SUM(contract_value) FROM ContractData WHERE company LIKE '%Defense%' AND contract_date BETWEEN '2021-04-01' AND '2021-06-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Uses COUNT instead of SUM(spent); missing year filter"
    }
  },
  {
    "example_id": 1916,
    "prompt": "Delete records of soldiers who left the army before 2015-01-01 from the soldiers_personal_data table",
    "generated_sql": "DELETE FROM soldiers_personal_data WHERE leave_date < '2015-01-01';",
    "reference_sql": "DELETE FROM soldiers_personal_data WHERE departure_date < '2015-01-01';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1917,
    "prompt": "Insert a new peacekeeping operation named 'Abyei' in South Sudan with operation ID 101, starting from 2022-01-01",
    "generated_sql": "INSERT INTO peacekeeping_operations (operation_id, operation_name, location, status) VALUES (101, 'Abyei', 'South Sudan', 'Active');",
    "reference_sql": "INSERT INTO peacekeeping_operations (operation_id, operation_name, start_date, end_date, operation_region) VALUES (101, 'Abyei', '2022-01-01', NULL, 'South Sudan');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing start date column and value"
    }
  },
  {
    "example_id": 1918,
    "prompt": "Find the total transaction amount for each customer in the past month, grouped by week?",
    "generated_sql": "SELECT customer_id, SUM(transaction_amount) as total_transaction_amount FROM customers WHERE transaction_date >= DATEADD(month, -1, GETDATE()) GROUP BY customer_id, week;",
    "reference_sql": "SELECT EXTRACT(WEEK FROM transaction_date) AS week, customer_id, SUM(amount) AS total_amount FROM transactions WHERE transaction_date >= CURRENT_DATE - INTERVAL '1 month' GROUP BY week, customer_id ORDER BY week, customer_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by non-existent week column and uses wrong table without extracting week from transaction_date"
    }
  },
  {
    "example_id": 1919,
    "prompt": "How many high-risk transactions occurred in the 'EMEA' region in the last quarter?",
    "generated_sql": "SELECT COUNT(*) FROM HighRiskTransactions WHERE region = 'EMEA' AND transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
    "reference_sql": "SELECT COUNT(*) FROM transactions WHERE region = 'EMEA' AND transaction_date >= '2021-01-01' AND transaction_date <= '2021-03-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses the last three months relative to today instead of the previous full calendar quarter"
    }
  },
  {
    "example_id": 1920,
    "prompt": "What are the unique circular economy initiatives in factories located in each continent?",
    "generated_sql": "SELECT c.location, c.name, COUNT(c.id) as num_initiatives FROM factories f JOIN circular_economy c ON f.id = c.factory_id WHERE c.type = 'Circular Economy' GROUP BY c.location, c.name;",
    "reference_sql": "SELECT f.location, i.description FROM factories f JOIN initiatives i ON f.factory_id = i.factory_id WHERE i.circular_economy = true GROUP BY f.location, i.description;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It groups by c.location not factory continent and counts initiatives rather than listing unique initiative names per continent"
    }
  },
  {
    "example_id": 1921,
    "prompt": "Add a column for 'Era' to the Sites table.",
    "generated_sql": "INSERT INTO Sites (Era, Name) VALUES ('Ancient Greece', 'Ancient Greece');",
    "reference_sql": "ALTER TABLE Sites ADD Era TEXT;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "irrelevant",
      "errorExplanation": "The query inserts data instead of altering the table to add an Era column."
    }
  },
  {
    "example_id": 1922,
    "prompt": "How many artifacts were found in each excavation site?",
    "generated_sql": "SELECT site, SUM(num_artifacts) FROM artifacts GROUP BY site;",
    "reference_sql": "SELECT Site_ID, Site_Name, SUM(Number_of_Artifacts) FROM Excavation_Sites GROUP BY Site_ID, Site_Name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "SUM(num_artifacts) assumes a numeric count column; should use COUNT(*) to count artifact records per site"
    }
  },
  {
    "example_id": 1923,
    "prompt": "How many unique artifact types are present at each excavation site?",
    "generated_sql": "SELECT i.name, COUNT(t.id) as unique_types FROM artifacts i JOIN excavation_sites s ON i.site_id = s.id GROUP BY i.name;",
    "reference_sql": "SELECT e.SiteName, COUNT(DISTINCT a.ObjectType) AS UniqueArtifactTypes FROM ExcavationSite e JOIN Artifact a ON e.SiteID = a.SiteID GROUP BY e.SiteName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Wrong aliases and fields: counts t.id (undefined), groups by artifact name instead of site, not counting distinct types"
    }
  },
  {
    "example_id": 1924,
    "prompt": "How many beds are available in all rural hospitals?",
    "generated_sql": "SELECT COUNT(*) FROM hospitals WHERE location = 'rural';",
    "reference_sql": "SELECT SUM(bed_count) FROM rural_hospitals;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts the number of rural hospitals instead of summing available beds"
    }
  },
  {
    "example_id": 1925,
    "prompt": "How many streams were there for each artist in the first quarter of 2019?",
    "generated_sql": "SELECT artist, COUNT(*) FROM streams WHERE release_date < '2019-01-01' AND release_date >= '2019-01-01' GROUP BY artist;",
    "reference_sql": "SELECT artists.artist_name, COUNT(streams.stream_id) AS total_streams FROM artists INNER JOIN streams ON artists.artist_id = streams.artist_id WHERE streams.stream_date BETWEEN '2019-01-01' AND '2019-03-31' GROUP BY artists.artist_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "WHERE clause is contradictory and does not filter for Q1 2019"
    }
  },
  {
    "example_id": 1926,
    "prompt": "What is the total amount donated by each organization in the last six months?",
    "generated_sql": "SELECT org_id, SUM(donation_amount) AS total_donation FROM org_donations WHERE donation_date >= DATEADD(month, -6, GETDATE()) GROUP BY org_id;",
    "reference_sql": "SELECT organization, SUM(donation_amount) as total_donation FROM Donations WHERE donation_date >= DATEADD(month, -6, GETDATE()) GROUP BY organization;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1927,
    "prompt": "What is the total number of volunteers who engaged in programs in the first half of 2019, and the total amount donated in that time period?",
    "generated_sql": "SELECT COUNT(*) as total_volunteers, SUM(donated_amount) as total_donated FROM Volunteers WHERE program_date BETWEEN '2019-01-01' AND '2019-12-31' AND start_date BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY program_date;",
    "reference_sql": "SELECT COUNT(DISTINCT V.VolunteerID) as NumVolunteers, SUM(D.TotalDonation) as TotalDonated FROM Donors D INNER JOIN Volunteers V ON D.DonationDate = V.VolunteerDate WHERE YEAR(V.VolunteerDate) = 2019 AND MONTH(V.VolunteerDate) <= 6;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Date range uses full year and includes unnecessary GROUP BY instead of filtering to first half of 2019"
    }
  },
  {
    "example_id": 1928,
    "prompt": "Who were the top 3 volunteer programs by total hours in 2023?",
    "generated_sql": "SELECT ProgramName, SUM(Hours) as TotalHours FROM VolunteerHours WHERE YEAR(HourStartDate) = 2023 GROUP BY ProgramName ORDER BY TotalHours DESC LIMIT 3;",
    "reference_sql": "SELECT ProgramName FROM (SELECT ProgramName, ROW_NUMBER() OVER (ORDER BY VolunteerHours DESC) as Rank FROM VolunteerPrograms) as ProgramRanks WHERE Rank <= 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1929,
    "prompt": "List the names of students who have never taken a lifelong learning course.",
    "generated_sql": "SELECT name FROM lifelong_learning_students WHERE course_type = 'LCL' AND students.course_id IS NULL;",
    "reference_sql": "SELECT student_id FROM student_lifelong_learning WHERE course_id IS NULL;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query filters for course_type = 'LCL' and improperly checks NULL course_id, thus selecting wrong records and using invalid references"
    }
  },
  {
    "example_id": 1930,
    "prompt": "Calculate the percentage of employees who received a promotion in the last 12 months, and display the result with one decimal place.",
    "generated_sql": "SELECT (CASE WHEN promotion_date >= DATEADD(month, -1, GETDATE()) AND DATEDIFF(year, promotion_date, NOW()) < 12 THEN 1.00 ELSE 0.00 END) as percentage, 1.00 / (SELECT MAX(percentage) FROM employee_employee_info WHERE employee_id = employee_id AND promotion_date >= GETDATE()) as decimal_place FROM employee_employee_info WHERE promotion_date >= DATEADD(month, -1, GETDATE());",
    "reference_sql": "SELECT ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Employees) , 1) AS PromotionPercentage FROM Employees WHERE PromotionDate >= DATEADD(year, -1, GETDATE());",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters only the last month, uses row-level CASE instead of aggregating counts, and lacks calculation of percentage over total employees."
    }
  },
  {
    "example_id": 1931,
    "prompt": "Delete records in the 'renewable' table where type is not 'wind' or 'solar'",
    "generated_sql": "DELETE FROM renewable WHERE type!= 'wind' OR type!='solar';",
    "reference_sql": "WITH cte AS (DELETE FROM renewable WHERE type NOT IN ('wind', 'solar')) DELETE FROM cte;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Using OR instead of AND causes wind and solar rows to be deleted"
    }
  },
  {
    "example_id": 1932,
    "prompt": "Calculate the total number of exploration activities for each platform, indicating which platforms have more than 2 activities",
    "generated_sql": "SELECT platform, COUNT(*) FROM ExplorationPlatforms GROUP BY platform;",
    "reference_sql": "SELECT p.platform_id, p.platform_name, COUNT(pa.activity_id) as num_activities FROM platforms p INNER JOIN platform_activities pa ON p.platform_id = pa.platform_id GROUP BY p.platform_id HAVING num_activities > 2;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing HAVING clause to filter platforms with COUNT(*) > 2"
    }
  },
  {
    "example_id": 1933,
    "prompt": "List the names and production quantities of wells in the Permian Basin, along with the names of the fields they belong to",
    "generated_sql": "SELECT well_name, production_quantity FROM Permian_Belt WHERE region = 'Permian Basin';",
    "reference_sql": "SELECT Well.WellName, Well.FieldID, Field.FieldName, Well.ProductionQuantity  FROM Well INNER JOIN Field ON Well.FieldID = Field.FieldID WHERE Field.Location = 'Permian Basin';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing field names and the necessary join to the fields table"
    }
  },
  {
    "example_id": 1934,
    "prompt": "List the top 3 teams with the highest number of wins in the 2021 season.",
    "generated_sql": "SELECT team_name, wins FROM (SELECT team_name, wins, RANK() OVER (ORDER BY wins DESC) as rn FROM team_stats WHERE year = 2021 GROUP BY team_name, rn) t WHERE rn <= 3;",
    "reference_sql": "SELECT team_name, wins FROM nba_teams ORDER BY wins DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Unnecessary and invalid GROUP BY on team_name and rn; window functions should not be grouped this way"
    }
  },
  {
    "example_id": 1935,
    "prompt": "What is the average time each athlete spent in the swimming pool during the Olympics?",
    "generated_sql": "SELECT athlete, AVG(time) OVER (PARTITION BY athlete) as avg_time FROM Athletes WHERE sport = 'Swimming' AND Olympics = 'Olympics' GROUP BY athlete;",
    "reference_sql": "SELECT AVG(time_in_pool) AS avg_time FROM olympic_swimming;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect use of WINDOW function with GROUP BY and improper filtering; should use AVG(time) with GROUP BY athlete and filter actual Olympic events"
    }
  },
  {
    "example_id": 1936,
    "prompt": "List the number of community development projects and their total budget for each region.",
    "generated_sql": "SELECT region, SUM(budget) as total_budget FROM community_development GROUP BY region;",
    "reference_sql": "SELECT r.name as region_name, COUNT(projects.id) as project_count, SUM(projects.budget) as total_budget FROM regions r LEFT JOIN projects ON r.id = projects.region_id GROUP BY r.id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "The query does not include the count of projects; it only sums the budget."
    }
  },
  {
    "example_id": 1937,
    "prompt": "List the number of unique donors and total amount donated for each disaster response, including donors who have donated to multiple disasters.",
    "generated_sql": "SELECT DISTINCT (num_donors, total_donated) AS num_donors, SUM(total_donated) AS total_donated FROM disaster_response WHERE disaster_type IN ('Natural Disaster', 'Humanitarian Disaster') GROUP BY DISTINCT disaster_type, num_donors;",
    "reference_sql": "SELECT d.name, COUNT(DISTINCT donors.id) as donor_count, SUM(donors.amount) as total_donated FROM disasters d LEFT JOIN donors ON d.id = donors.disaster_id GROUP BY d.id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect use of DISTINCT, improper grouping and missing disaster identifier in SELECT"
    }
  },
  {
    "example_id": 1938,
    "prompt": "How many wheelchair accessible vehicles are there in the London bus fleet?",
    "generated_sql": "SELECT COUNT(*) FROM buses WHERE fleet_type = 'Wheelchair Accessible' AND vehicle_type = 'Wheelchair Accessible';",
    "reference_sql": "SELECT COUNT(*) FROM bus_fleet WHERE is_wheelchair_accessible = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for the London fleet and incorrectly uses two identical accessibility filters"
    }
  },
  {
    "example_id": 1939,
    "prompt": "Identify the most common pick-up and drop-off times for taxi trips",
    "generated_sql": "SELECT city, most_common_trip_time FROM taxi_taxis WHERE trip_type = 'Trip' GROUP BY city;",
    "reference_sql": "SELECT TIME(pickup_time) AS most_common_pickup, TIME(dropoff_time) AS most_common_dropoff, COUNT(*) AS trip_count FROM taxi_trip GROUP BY pickup_time, dropoff_time ORDER BY trip_count DESC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not compute most common pickup and drop-off times and uses undefined column"
    }
  },
  {
    "example_id": 1940,
    "prompt": "What is the average fare for each route in the 'routes' table?",
    "generated_sql": "SELECT route, AVG(fare) FROM routes GROUP BY route;",
    "reference_sql": "SELECT route_name, AVG(fare) as avg_fare FROM routes GROUP BY route_name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1941,
    "prompt": "Delete records in the consumer_awareness table where the region is 'South America' and awareness_score is less than 6",
    "generated_sql": "DELETE FROM consumer_awareness WHERE region = 'South America' AND awareness_score < 6;",
    "reference_sql": "DELETE FROM consumer_awareness WHERE region = 'South America' AND awareness_score < 6;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1942,
    "prompt": "List all suppliers located in France that provide recycled materials.",
    "generated_sql": "SELECT s.name FROM supplies s JOIN suppliers s1 ON s.id = s1.supplier_id JOIN suppliers s2 ON s1.id = s2.supplier_id WHERE s2.country = 'France';",
    "reference_sql": "SELECT s.name FROM Suppliers s INNER JOIN RecycledMaterials rm ON s.id = rm.supplier_id WHERE s.country = 'France';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Incorrect joins and missing filter for recycled materials"
    }
  },
  {
    "example_id": 1943,
    "prompt": "What is the name of the factory with the lowest number of fair trade certified products?",
    "generated_sql": "SELECT factory_name FROM factories WHERE fair_trade_certified = 1 ORDER BY number_of_products DESC LIMIT 1;",
    "reference_sql": "SELECT Factories.name FROM Factories INNER JOIN (SELECT factory_id, COUNT(*) as product_count FROM Factory_Products WHERE is_fair_trade_certified = true GROUP BY factory_id) AS Subquery ON Factories.id = Subquery.factory_id ORDER BY Subquery.product_count ASC LIMIT 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters on a certification flag and orders descending instead of ordering by the number of fair trade certified products ascending to find the minimum."
    }
  },
  {
    "example_id": 1944,
    "prompt": "How many new users joined from each country in the past week?",
    "generated_sql": "SELECT country, COUNT(*) FROM new_users WHERE join_date >= DATEADD(week, -1, CURRENT_DATE) GROUP BY country;",
    "reference_sql": "SELECT country, COUNT(DISTINCT user_id) AS new_users FROM user_registrations WHERE registration_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1945,
    "prompt": "Show the top 3 content categories in Japan with the most posts.",
    "generated_sql": "SELECT category, COUNT(post_id) as count FROM posts WHERE country = 'Japan' GROUP BY category ORDER BY count DESC LIMIT 3;",
    "reference_sql": "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1946,
    "prompt": "What is the sum of sales revenue from 'Men's' garments in 'Canada'?",
    "generated_sql": "SELECT SUM(revenue) FROM sales WHERE garment_type = 'Men' AND country = 'Canada';",
    "reference_sql": "SELECT SUM(revenue) FROM canada_sales_revenue WHERE garment_type = 'Men''s';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1947,
    "prompt": "List all the clients from the Socially Responsible Microfinance program and their account balances.",
    "generated_sql": "SELECT AccountID, ClientID, Balance FROM SociallyResponsibleMicrofinance;",
    "reference_sql": "SELECT * FROM microfinance_program WHERE program_name = 'Socially Responsible Microfinance';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query selects AccountID instead of client details and does not join to retrieve client names; missing client information"
    }
  },
  {
    "example_id": 1948,
    "prompt": "What is the total amount of interest earned from socially responsible lending?",
    "generated_sql": "SELECT SUM(interest_amount) FROM socially_responsible_loans;",
    "reference_sql": "SELECT SUM(s.amount * s.interest_rate) FROM socially_responsible_loans s;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1949,
    "prompt": "Identify the warehouse in Colombia that handled the maximum number of pallets in a day.",
    "generated_sql": "SELECT warehouse_id, MAX(pallets) FROM warehouses WHERE country = 'Colombia' GROUP BY warehouse_id;",
    "reference_sql": "SELECT warehouse_city, MAX(pallets) FROM warehouse_stats WHERE warehouse_country = 'Colombia' GROUP BY warehouse_city;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It returns the maximum per warehouse instead of selecting the single warehouse with the overall highest daily pallets"
    }
  },
  {
    "example_id": 1950,
    "prompt": "How many bioprocess engineering projects are in Eastern Europe?",
    "generated_sql": "SELECT COUNT(*) FROM bioprocess_engineering WHERE location = 'Eastern Europe';",
    "reference_sql": "SELECT COUNT(*) FROM bioprocessing.projects WHERE region = 'Eastern Europe';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1951,
    "prompt": "How many genetic research projects are being conducted in the UK?",
    "generated_sql": "SELECT COUNT(*) FROM genetics.projects WHERE country = 'UK';",
    "reference_sql": "SELECT COUNT(*) FROM genetics.research_projects WHERE location = 'UK' AND type = 'Genetic';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not filter for currently ongoing projects"
    }
  },
  {
    "example_id": 1952,
    "prompt": "What is the total number of female researchers in each department?",
    "generated_sql": "SELECT d.name, COUNT(r.id) FROM department d JOIN research_exhibitions r ON d.id = r.department_id JOIN research_exhibitions rE ON r.id = rE.id WHERE r.gender = 'Female' GROUP BY d.name;",
    "reference_sql": "SELECT department.name, COUNT(researcher.id) FROM department INNER JOIN researcher ON department.id = researcher.department_id WHERE researcher.gender = 'Female' GROUP BY department.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly joins the same research_exhibitions table twice and uses the wrong table for researchers; it should count female researchers from the researchers table grouped by department."
    }
  },
  {
    "example_id": 1953,
    "prompt": "What is the total installed capacity (in MW) of renewable energy projects in the 'renewable_projects' table?",
    "generated_sql": "SELECT SUM(capacity) FROM renewable_projects;",
    "reference_sql": "SELECT SUM(installed_capacity) FROM renewable_projects WHERE installed_capacity IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1954,
    "prompt": "How many unique patients have been treated for mental health conditions by providers in each region?",
    "generated_sql": "SELECT region, COUNT(DISTINCT patient_id) FROM patients GROUP BY region;",
    "reference_sql": "SELECT p.region_id, COUNT(DISTINCT pp.patient_id) as num_patients FROM providers p JOIN provider_patients pp ON p.provider_id = pp.provider_id GROUP BY p.region_id;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter for mental health conditions or join with provider data to get regions."
    }
  },
  {
    "example_id": 1955,
    "prompt": "What is the revenue for each online travel agency in Europe, ordered by revenue in descending order?",
    "generated_sql": "SELECT agency, revenue FROM online_travel_agency_stats WHERE country = 'Europe' ORDER BY revenue DESC;",
    "reference_sql": "SELECT ota_name, revenue FROM otas WHERE region = 'Europe' ORDER BY revenue DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering by country = 'Europe' is incorrect; Europe is not a country field value."
    }
  },
  {
    "example_id": 1956,
    "prompt": "What is the total revenue generated by 'OTAs' in '2022'?",
    "generated_sql": "SELECT SUM(revenue) FROM online_trading.otas WHERE year = 2022;",
    "reference_sql": "SELECT SUM(revenue) FROM otas WHERE EXTRACT(YEAR FROM CURRENT_DATE) = 2022;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1957,
    "prompt": "What is the average temperature recorded for the 'polar_bear' species in the 'Arctic_Animals' table compared to the 'penguin' species in the 'Antarctic_Animals' table?",
    "generated_sql": "SELECT AVG(temperature) FROM polar_bear_species WHERE species = 'polar_bear' AND temperature = (SELECT AVG(temperature) FROM polar_bear_species WHERE species = 'polar_bear') AND temperature IN (SELECT temperature FROM penguins WHERE species = 'penguin');",
    "reference_sql": "SELECT AVG(Arctic_Animals.avg_temp) FROM Arctic_Animals WHERE Arctic_Animals.species = 'polar_bear' INTERSECT SELECT AVG(Antarctic_Animals.avg_temp) FROM Antarctic_Animals WHERE Antarctic_Animals.species = 'penguin'",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses incorrect tables and conditions and does not compute or compare the two average temperatures as requested."
    }
  },
  {
    "example_id": 1958,
    "prompt": "What is the minimum temperature recorded in each Arctic region in 2020?",
    "generated_sql": "SELECT region, MIN(temperature) FROM arctic_temperatures WHERE year = 2020 GROUP BY region;",
    "reference_sql": "SELECT region, MIN(temperature) FROM WeatherData WHERE year = 2020 GROUP BY region;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1959,
    "prompt": "How many patients have been treated with CBT or DBT?",
    "generated_sql": "SELECT COUNT(DISTINCT patient_id) FROM patient_treatment WHERE type = 'CBT' OR type = 'DBT';",
    "reference_sql": "SELECT COUNT(*) FROM treatments WHERE treatment IN ('CBT', 'DBT');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1960,
    "prompt": "What is the total number of subway stations in the city of Berlin, Germany?",
    "generated_sql": "SELECT SUM(num_stations) FROM subway_stations WHERE city = 'Berlin'",
    "reference_sql": "SELECT COUNT(*) FROM stations WHERE location = 'Berlin, Germany' AND type = 'Subway';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM on num_stations without a count and omits country filter"
    }
  },
  {
    "example_id": 1961,
    "prompt": "Provide the number of tourists visiting New Zealand, Australia, and Japan from 2018 to 2020",
    "generated_sql": "SELECT COUNT(*) FROM tourism_visits WHERE country IN ('New Zealand', 'Australia', 'Japan') AND year BETWEEN 2018 AND 2020;",
    "reference_sql": "SELECT country, AVG(tourists_count) as avg_tourists FROM TouristArrivals WHERE country IN ('New Zealand', 'Australia', 'Japan') AND year BETWEEN 2018 AND 2020 GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not sum tourists or group by country and year; uses COUNT(*) instead of aggregating a tourist count"
    }
  },
  {
    "example_id": 1962,
    "prompt": "What is the number of travel advisories issued for each country in the last 3 months?",
    "generated_sql": "SELECT Country, COUNT(*) FROM TravelAdvisory WHERE LastAdvisoryDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY Country;",
    "reference_sql": "SELECT Country, COUNT(Advisory) OVER (PARTITION BY Country) AS NumAdvisories, TO_CHAR(IssueDate, 'YYYY-MM') AS Month FROM TravelAdvisories WHERE IssueDate >= ADD_MONTHS(CURRENT_DATE, -3) GROUP BY Country, Month;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1963,
    "prompt": "What is the location of the restorative justice program with the lowest ID in the 'justice_programs' table?",
    "generated_sql": "SELECT location FROM justice_programs WHERE id IN (SELECT id FROM restorative_justice_programs);",
    "reference_sql": "SELECT location FROM justice_programs WHERE id = (SELECT MIN(id) FROM justice_programs WHERE type = 'Restorative Justice');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not select the program with the lowest ID; it returns all restorative justice programs without filtering for the minimum ID."
    }
  },
  {
    "example_id": 1964,
    "prompt": "List all ocean floor mapping projects in the Arctic region.",
    "generated_sql": "SELECT * FROM ocean_floor_mapping_projects WHERE region = 'Arctic';",
    "reference_sql": "SELECT context.project_name FROM oceans.mapping_projects AS context WHERE context.region = 'Arctic';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1965,
    "prompt": "Delete customer feedback with ID 2",
    "generated_sql": "DELETE FROM customer_feedback WHERE feedback_id = 2;",
    "reference_sql": "DELETE FROM customer_feedback WHERE id = 2;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1966,
    "prompt": "What is the average price of sustainable seafood items?",
    "generated_sql": "SELECT AVG(price) FROM sustainable_sourcing_data WHERE is_sustainable = true;",
    "reference_sql": "SELECT AVG(price) FROM menu WHERE type = 'Seafood' AND is_sustainable = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to restrict items to seafood"
    }
  },
  {
    "example_id": 1967,
    "prompt": "What is the average price of vegan breakfast menu items?",
    "generated_sql": "SELECT AVG(price) FROM menu_items WHERE is_vegan = true;",
    "reference_sql": "SELECT AVG(price) FROM menus WHERE category = 'Breakfast' AND is_vegan = TRUE;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for breakfast items"
    }
  },
  {
    "example_id": 1968,
    "prompt": "How many environmental impact assessments were conducted per year, for the last 5 years?",
    "generated_sql": "SELECT year, COUNT(*) FROM environmental_impact_assessments WHERE year >= 2016 GROUP BY year;",
    "reference_sql": "SELECT year, assessment_count FROM eia WHERE year BETWEEN 2017 AND 2021 ORDER BY year;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses fixed year >= 2016 rather than dynamically filtering the last five years"
    }
  },
  {
    "example_id": 1969,
    "prompt": "Which country has the lowest total production of nickel, Indonesia or the Philippines?",
    "generated_sql": "SELECT country, MIN(production) as min_production FROM production_data WHERE country IN ('Indonesia', 'Philippines') GROUP BY country ORDER BY min_production DESC LIMIT 1;",
    "reference_sql": "SELECT country, MIN(quantity) FROM nickel_production WHERE country IN ('Indonesia', 'Philippines') GROUP BY country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses MIN instead of SUM and orders descending instead of selecting the lowest total"
    }
  },
  {
    "example_id": 1970,
    "prompt": "List all players who have played a specific VR game, 'CyberSphere', and their ages.",
    "generated_sql": "SELECT Players.PlayerID, AVG(AvgPlayers.Age) AS AvgAge FROM Players INNER JOIN AvgPlayers ON Players.PlayerID = AvgPlayers.PlayerID WHERE Players.Game = 'CyberSphere' GROUP BY Players.PlayerID;",
    "reference_sql": "SELECT Players.Age, Players.PlayerID FROM Players INNER JOIN VRPlayers ON Players.PlayerID = VRPlayers.PlayerID INNER JOIN VRGames ON VRPlayers.VRGameID = VRGames.VRGameID WHERE VRGames.Title = 'CyberSphere';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query incorrectly uses AVG on ages and an irrelevant AvgPlayers table instead of selecting each player\u2019s age directly."
    }
  },
  {
    "example_id": 1971,
    "prompt": "What is the total number of players who have played the game 'Adventure' or are from the USA?",
    "generated_sql": "SELECT COUNT(Player) FROM Player WHERE Game = 'Adventure' AND Country = 'USA';",
    "reference_sql": "SELECT COUNT(DISTINCT PlayerID) FROM PlayerGameData WHERE Game = 'Adventure' OR Country = 'USA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses AND instead of OR, thus only counts players who meet both conditions rather than either."
    }
  },
  {
    "example_id": 1972,
    "prompt": "Find the average temperature in field A for the month of June, 2021.",
    "generated_sql": "SELECT AVG(temperature) FROM field_temperature WHERE month = 6 AND year = 2021;",
    "reference_sql": "SELECT AVG(temperature) FROM field_temperatures WHERE field_id = 'A' AND reading_date BETWEEN '2021-06-01' AND '2021-06-30';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for field A"
    }
  },
  {
    "example_id": 1973,
    "prompt": "What is the total number of police stations and fire stations in each region?",
    "generated_sql": "SELECT region, COUNT(*) FROM fire_stations GROUP BY region;",
    "reference_sql": "SELECT region, SUM(facility_count) AS total_stations FROM gov_service.safety_data GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only counts fire stations and does not include police stations"
    }
  },
  {
    "example_id": 1974,
    "prompt": "List the number of properties co-owned by women and men in each city in the database.",
    "generated_sql": "SELECT City, Gender, COUNT(*) FROM Properties WHERE Gender = 'Women' GROUP BY City, Gender, Gender;",
    "reference_sql": "SELECT city, owner_gender, COUNT(*) AS count FROM city_properties WHERE co_owned = TRUE GROUP BY city, owner_gender;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query only counts women and misuses GROUP BY; does not count properties co-owned by both genders per city"
    }
  },
  {
    "example_id": 1975,
    "prompt": "What is the average area of sustainable urban properties in the state of New York, broken down by property type?",
    "generated_sql": "SELECT property_type, AVG(area) AS avg_area FROM sustainable_properties WHERE state = 'NY' GROUP BY property_type;",
    "reference_sql": "SELECT property_type, AVG(area) FROM sustainable_urban_properties WHERE state = 'New York' GROUP BY property_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not filter for urban properties"
    }
  },
  {
    "example_id": 1976,
    "prompt": "What is the maximum size of a property in the city of Austin?",
    "generated_sql": "SELECT MAX(size) FROM properties WHERE city = 'Austin';",
    "reference_sql": "SELECT MAX(size) FROM properties WHERE city = 'Austin';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1977,
    "prompt": "Find the average energy efficiency rating of buildings in the top 3 most populous cities in Canada.",
    "generated_sql": "SELECT AVG(energy_efficiency_rating) FROM energy_efficiency_rating_canada WHERE city LIKE '%Canada%' AND energy_efficiency_rating >= 50;",
    "reference_sql": "SELECT AVG(energy_efficiency_rating) as avg_rating FROM buildings WHERE population IN (SELECT population FROM (SELECT city_name, population FROM buildings WHERE city_name IN ('Toronto', 'Montreal', 'Vancouver') ORDER BY population DESC LIMIT 3) as subquery);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not restrict to the top 3 most populous cities and applies incorrect filters"
    }
  },
  {
    "example_id": 1978,
    "prompt": "What are the names and prices of the menu items that have the same name as a restaurant?",
    "generated_sql": "SELECT menus.name, menus.price FROM menus INNER JOIN restaurants ON menus.restaurant_id = restaurants.restaurant_id WHERE restaurants.name = menus.name;",
    "reference_sql": "SELECT name, price FROM menu_items WHERE name IN (SELECT name FROM restaurants);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It only matches when the menu item belongs to the same restaurant; it should match any restaurant name regardless of restaurant_id"
    }
  },
  {
    "example_id": 1979,
    "prompt": "What is the average price of organic products sold by vendors in the US?",
    "generated_sql": "SELECT AVG(price) FROM OrganicProducts WHERE suppliers.manufacturer = 'Organic Products' AND vendors.country = 'US';",
    "reference_sql": "SELECT AVG(price) FROM products JOIN vendors ON products.vendor_id = vendors.vendor_id WHERE organic = true AND country = 'USA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query references suppliers.manufacturer instead of joining vendors and filtering vendors.country, and uses incorrect manufacturer filter"
    }
  },
  {
    "example_id": 1980,
    "prompt": "What is the farthest distance from Earth for any spacecraft?",
    "generated_sql": "SELECT distance FROM Spacecraft_Locations WHERE location = 'Earth';",
    "reference_sql": "SELECT MAX(max_distance_from_earth) FROM SpacecraftManufacturing;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not compute the maximum distance; it selects distances for location 'Earth' instead of finding the farthest distance."
    }
  },
  {
    "example_id": 1981,
    "prompt": "What is the latest medical data point for astronaut 'R. Riley'?",
    "generated_sql": "SELECT date FROM medical_data WHERE astronaut_name = 'R. Riley' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
    "reference_sql": "SELECT MAX(data_point) FROM AstronautMedicalData WHERE astronaut = 'R. Riley';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters by the past year instead of selecting the single latest data point and does not order or limit the result to the most recent entry."
    }
  },
  {
    "example_id": 1982,
    "prompt": "How many fans in the \"Toronto Raptors\" fan club are from Canada?",
    "generated_sql": "SELECT COUNT(DISTINCT f.fan_id) FROM fans f JOIN fans_club fc ON f.fan_id = fc.fan_id WHERE fc.club = 'Toronto Raptors';",
    "reference_sql": "SELECT COUNT(*) FROM fan_demographics WHERE team = 'Toronto Raptors' AND country = 'Canada';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter to restrict fans to those from Canada"
    }
  },
  {
    "example_id": 1983,
    "prompt": "How many sports_events took place in '2018'?",
    "generated_sql": "SELECT SUM(events) FROM Events WHERE YEAR(event_date) = 2018;",
    "reference_sql": "SELECT COUNT(*) FROM sports_events WHERE year = 2018;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses SUM(events) on Events table instead of COUNT(*) on sports_events"
    }
  },
  {
    "example_id": 1984,
    "prompt": "List the top 10 most frequently exploited vulnerabilities in the past year and the number of times each vulnerability has been exploited.",
    "generated_sql": "SELECT vulnerability_name, usage, COUNT(*) FROM vulnerabilities WHERE timestamp >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY vulnerability_name, usage ORDER BY usage DESC LIMIT 10;",
    "reference_sql": "SELECT cve_id, exploited_count FROM vulnerabilities WHERE publish_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY cve_id ORDER BY exploited_count DESC LIMIT 10;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query groups by and orders by the 'usage' column instead of grouping by vulnerability and ordering by the exploit count (COUNT(*))."
    }
  },
  {
    "example_id": 1985,
    "prompt": "What is the maximum, minimum, and average severity of vulnerabilities found in the 'Application' section for the last month?",
    "generated_sql": "SELECT MAX(severity), MIN(severity), AVG(severity) FROM vulnerabilities WHERE vulnerability_type = 'Application' AND affected_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "reference_sql": "SELECT section, MIN(severity) as min_severity, MAX(severity) as max_severity, AVG(severity) as avg_severity FROM vulnerabilities WHERE section = 'Application' AND vulnerability_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY section;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1986,
    "prompt": "Display the total quantity of all transportation means in the total_inventory view.",
    "generated_sql": "SELECT COUNT(*) FROM total_inventory GROUP BY vehicle_type;",
    "reference_sql": "SELECT SUM(total) FROM total_inventory;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query counts rows per vehicle_type instead of summing the quantity across all transport means"
    }
  },
  {
    "example_id": 1987,
    "prompt": "What is the average speed of electric buses in Mexico City, Mexico?",
    "generated_sql": "SELECT AVG(speed) FROM ElectricBuses WHERE city = 'Mexico City';",
    "reference_sql": "SELECT AVG(speed) FROM electric_buses WHERE city = 'Mexico City';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter on country = 'Mexico'"
    }
  },
  {
    "example_id": 1988,
    "prompt": "Update the price to 25 in the products table for all records with category='Dress'",
    "generated_sql": "UPDATE products SET price = 25 WHERE category = 'Dress';",
    "reference_sql": "UPDATE products SET price = 25 WHERE category = 'Dress';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1989,
    "prompt": "What are the names and production dates of garments made from fabrics with a sustainability score over 70, produced after 2021-01-01?",
    "generated_sql": "SELECT Name, ProductionDate FROM Garments WHERE SustainabilityScore > 70 AND ProductionDate >= '2021-01-01';",
    "reference_sql": "SELECT garments.name, garments.production_date FROM garments JOIN fabrics ON garments.fabric_id = fabrics.id WHERE fabrics.sustainability_score > 70 AND garments.production_date > '2021-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not join Garments with Fabrics table to filter by fabric sustainability score"
    }
  },
  {
    "example_id": 1990,
    "prompt": "Show the number of workplace safety incidents per month, for the past year, for workplaces with a union.",
    "generated_sql": "SELECT EXTRACT(MONTH FROM incident_date) as month, COUNT(*) as incident_count FROM workplace_safety WHERE union = 'Union of the year' AND incident_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY month;",
    "reference_sql": "SELECT DATE_FORMAT(incident_date, '%Y-%m') as month, COUNT(*) as num_incidents FROM safety_incidents si INNER JOIN workplaces w ON si.workplace = w.id WHERE w.union_affiliation IS NOT NULL GROUP BY month ORDER BY STR_TO_DATE(month, '%Y-%m');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filter for unioned workplaces is incorrect; uses a literal string and misuses reserved word instead of checking a boolean or status column"
    }
  },
  {
    "example_id": 1991,
    "prompt": "Show the union names and their collective bargaining agreements that are located in the 'south_region'?",
    "generated_sql": "SELECT union_name, collective_bargaining_agreement FROM unions WHERE region ='south_region';",
    "reference_sql": "SELECT union_names.union_name, cb_agreements.region FROM union_names INNER JOIN cb_agreements ON union_names.union_name = cb_agreements.union_name WHERE cb_agreements.region = 'south_region';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1992,
    "prompt": "What is the total number of union membership applications submitted per month in 2021?",
    "generated_sql": "SELECT EXTRACT(MONTH FROM application_date) AS month, COUNT(*) AS total_applications FROM union_membership WHERE application_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month;",
    "reference_sql": "SELECT MONTH(ApplicationDate) as Month, COUNT(*) as TotalApplications FROM Applications WHERE YEAR(ApplicationDate) = 2021 GROUP BY Month;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1993,
    "prompt": "What is the average water consumption in the agricultural sector in Australia for the year 2020?",
    "generated_sql": "SELECT AVG(water_consumption) FROM agricultural_demographics WHERE country = 'Australia' AND year = 2020;",
    "reference_sql": "SELECT AVG(value) FROM water_consumption_kl WHERE sector = 'Agricultural' AND region = 'Australia' AND year = 2020;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1994,
    "prompt": "What is the maximum water consumption by a single customer in the city of Miami?",
    "generated_sql": "SELECT MAX(consumption) FROM water_consumption WHERE city = 'Miami';",
    "reference_sql": "SELECT MAX(water_usage) FROM miami_customers;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1995,
    "prompt": "Find the percentage of AI researchers who are from underrepresented countries, rounded to two decimal places.",
    "generated_sql": "SELECT (COUNT(DISTINCT Country) * 100.0 / (SELECT COUNT(DISTINCT Country) FROM Researchers WHERE ResearcherRank = 1)) AS Percentage FROM Researchers WHERE ResearcherRank = 1;",
    "reference_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN country IN ('Mexico', 'India', 'Brazil', 'South Africa', 'Indonesia') THEN 1 ELSE 0 END) / COUNT(*), 2) AS percentage_underrepresented_countries FROM ai_researchers;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query counts distinct countries instead of researchers and does not filter or define underrepresented countries, nor rounds to two decimal places"
    }
  },
  {
    "example_id": 1996,
    "prompt": "What is the maximum bias score for each creative AI application?",
    "generated_sql": "SELECT CreativeAi.name, MAX(CreativeAi.bias_score) as max_bias_score FROM CreativeAi GROUP BY CreativeAi.name;",
    "reference_sql": "SELECT name, MAX(bias_score) as max_bias_score FROM CreativeAIs GROUP BY name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 1997,
    "prompt": "Which explainable AI techniques are most frequently used in financial services?",
    "generated_sql": "SELECT technique, COUNT(*) FROM techniques GROUP BY technique ORDER BY COUNT(*) DESC LIMIT 1;",
    "reference_sql": "SELECT Explainable_AI, COUNT(*) OVER (PARTITION BY Explainable_AI) as Count FROM Financial_Services WHERE Explainable_AI IN ('LIME', 'SHAP', 'TreeExplainer') ORDER BY Count DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for financial services domain and returns only the top technique instead of all most frequent techniques."
    }
  },
  {
    "example_id": 1998,
    "prompt": "Delete records with a start_date after 2023 in the economic_diversification table",
    "generated_sql": "DELETE FROM economic_diversification WHERE start_date >= '2023-01-01';",
    "reference_sql": "WITH cte AS (DELETE FROM economic_diversification WHERE start_date > '2023-01-01') SELECT * FROM cte;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query deletes records from the start of 2023 instead of only those after the end of 2023"
    }
  },
  {
    "example_id": 1999,
    "prompt": "Update records in the agricultural_innovations table with rural_innovation_id 2 to have a year of 2024",
    "generated_sql": "UPDATE agricultural_innovations SET year_of_growth = 2024 WHERE rural_innovation_id = 2;",
    "reference_sql": "WITH cte AS (UPDATE agricultural_innovations SET year = 2024 WHERE rural_innovation_id = 2) SELECT * FROM cte;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Used incorrect column name 'year_of_growth' instead of the intended year column"
    }
  },
  {
    "example_id": 2000,
    "prompt": "Find the types of fish farmed in Canada and their respective quantities.",
    "generated_sql": "SELECT fish_type, quantity FROM fish_farms WHERE country = 'Canada';",
    "reference_sql": "SELECT species, quantity FROM FarmB WHERE country = 'Canada';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2001,
    "prompt": "What is the average stocking density of fish in freshwater farms, grouped by farm type, where the density is greater than 1000 fish per cubic meter?",
    "generated_sql": "SELECT farm_type, AVG(stock_density) as avg_stock_density FROM fish_stock WHERE farmed_by = 'freshwater' GROUP BY farm_type;",
    "reference_sql": "SELECT farm_type, AVG(stocking_density) FROM freshwater_farms WHERE stocking_density > 1000 GROUP BY farm_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for densities greater than 1000 fish per cubic meter"
    }
  },
  {
    "example_id": 2002,
    "prompt": "What is the average amount donated by each gender?",
    "generated_sql": "SELECT Gender, AVG(DonationAmount) FROM Donations GROUP BY Gender;",
    "reference_sql": "SELECT g.gender, AVG(d.amount) as avg_donation FROM Donors g JOIN Donations d ON g.id = d.donor_id GROUP BY g.gender;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2003,
    "prompt": "What is the total number of tickets sold by each event category?",
    "generated_sql": "SELECT event_category, SUM(ticket_sales) FROM ticket_sales GROUP BY event_category;",
    "reference_sql": "SELECT event_category, SUM(tickets_sold) FROM events e JOIN tickets t ON e.event_id = t.event_id GROUP BY event_category;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2004,
    "prompt": "How many viewers in Canada watched TV shows with a rating above 8.5 in 2022?",
    "generated_sql": "SELECT COUNT(*) FROM shows WHERE country = 'Canada' AND rating > 8.5 AND year = 2022;",
    "reference_sql": "SELECT COUNT(*) FROM (SELECT * FROM TV_Shows WHERE region = 'Canada' AND year = 2022 AND rating > 8.5) AS high_rated_shows;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It counts shows, not viewers, and doesn\u2019t join or count viewer watch events"
    }
  },
  {
    "example_id": 2005,
    "prompt": "What was the average project cost for sustainable buildings in Arizona in Q3 2022?",
    "generated_sql": "SELECT AVG(cost) FROM sustainable_buildings WHERE state = 'Arizona' AND quarter = 3 AND year = 2022;",
    "reference_sql": "SELECT AVG(project_cost) FROM Sustainable_Buildings_AZ WHERE state = 'Arizona' AND quarter = 'Q3 2022';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2006,
    "prompt": "What was the total revenue from cannabis-infused edibles sold by each dispensary in the city of San Francisco in the month of December 2021?",
    "generated_sql": "SELECT d.name, SUM(d.revenue) as total_revenue FROM dispensaries d JOIN sales s ON d.id = s.dispensary_id WHERE s.date BETWEEN '2021-12-01' AND '2021-12-31' AND s.type = 'edibles' GROUP BY d.name;",
    "reference_sql": "SELECT d.name, SUM(i.revenue) as total_revenue FROM Dispensaries d JOIN Inventory i ON d.id = i.dispensary_id WHERE d.city = 'San Francisco' AND i.product_type = 'edibles' AND i.month = 12 AND i.year = 2021 GROUP BY d.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for San Francisco and summing the dispensary revenue column instead of sales revenue"
    }
  },
  {
    "example_id": 2007,
    "prompt": "What was the average CO2 emission reduction target for each country in 2020?",
    "generated_sql": "SELECT country, AVG(reduction) FROM CO2_Emissions WHERE year = 2020 GROUP BY country;",
    "reference_sql": "SELECT country, AVG(target) as avg_target FROM co2_reduction_targets WHERE year IN (2020) GROUP BY country;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2008,
    "prompt": "What is the average number of days from drug approval to the completion of Phase 3 clinical trials for drugs that were approved after 2015?",
    "generated_sql": "SELECT AVG(DATEDIFF(Downto, approval_date, approval_end_date)) FROM drug_approval_days WHERE approval_end_date > 2015;",
    "reference_sql": "SELECT AVG(ct.completion_date - d.approval_date) as avg_days_to_phase FROM clinical_trials ct JOIN drugs d ON ct.drug_id = d.id WHERE ct.phase = 'Phase 3' AND d.approval_date > '2015-01-01';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on approval_end_date instead of approval_date and uses incorrect DATEDIFF syntax"
    }
  },
  {
    "example_id": 2009,
    "prompt": "Find the number of unique healthcare centers in the USA where at least 5 infectious disease cases were reported in the last month.",
    "generated_sql": "SELECT COUNT(DISTINCT centers.center_id) FROM (SELECT num_cases FROM cases WHERE country = 'USA' AND date >= DATEADD(month, -1, GETDATE()) GROUP BY num_cases HAVING COUNT(DISTINCT center_id) > 5) AS unique_centers;",
    "reference_sql": "SELECT COUNT(DISTINCT healthcare_centers.id) FROM healthcare_centers JOIN infectious_disease_reports ON healthcare_centers.id = infectious_disease_reports.healthcare_center_id WHERE infectious_disease_reports.report_date >= DATEADD(month, -1, CURRENT_TIMESTAMP) GROUP BY healthcare_centers.id HAVING COUNT(infectious_disease_reports.id) >= 5 AND healthcare_centers.country = 'USA';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by num_cases instead of center_id and misuses COUNT(DISTINCT center_id) instead of counting cases per center"
    }
  },
  {
    "example_id": 2010,
    "prompt": "What is the average rating of hospitals with over 10000 patients served, grouped by state?",
    "generated_sql": "SELECT state, AVG(avg_rating) as avg_rating FROM hospitals WHERE num_patients > 10000 GROUP BY state;",
    "reference_sql": "SELECT state, facility_type, AVG(rating) AS avg_rating FROM public.healthcare_access WHERE patients_served > 10000 GROUP BY state, facility_type;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses AVG(avg_rating) instead of averaging the hospital rating column"
    }
  },
  {
    "example_id": 2011,
    "prompt": "What was the life expectancy in Japan in 2019?",
    "generated_sql": "SELECT LAST_DAY(life_expectancy) FROM life_expectancy WHERE country = 'Japan' AND year = 2019;",
    "reference_sql": "SELECT expectancy FROM life_expectancy WHERE country = 'Japan' AND year = 2019;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Use of LAST_DAY on life_expectancy is incorrect; should directly select the life_expectancy value."
    }
  },
  {
    "example_id": 2012,
    "prompt": "What is the average yield of crops for each indigenous community?",
    "generated_sql": "SELECT Community, AVG(Quantity) as Avg_Yield FROM Crop_Yield GROUP BY Community;",
    "reference_sql": "SELECT ic.name, AVG(cy.yield) as avg_yield FROM indigenous_communities ic JOIN crop_yields cy ON ic.id = cy.community_id GROUP BY ic.id, ic.name;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2013,
    "prompt": "What are the cosmetic brands that use cruelty-free ingredients?",
    "generated_sql": "SELECT brand FROM cosmetic_brands WHERE is_cruelty_free = TRUE;",
    "reference_sql": "SELECT name FROM brand WHERE cruelty_free = true;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2014,
    "prompt": "What was the minimum response time for police calls in January 2022?",
    "generated_sql": "SELECT MIN(response_time) FROM police_calls WHERE response_time IS NOT NULL AND call_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT MIN(response_time) FROM police_calls WHERE call_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2015,
    "prompt": "What is the total number of artworks by each artist?",
    "generated_sql": "SELECT a.artist_name, SUM(a.quantity) FROM artworks a LEFT JOIN artists ai ON a.artist_id = ai.artist_id WHERE ai.artist_name = 'Bronzeware' GROUP BY a.artist_name;",
    "reference_sql": "SELECT ArtistID, COUNT(*) as TotalArtworks FROM Artworks GROUP BY ArtistID;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query filters to only one artist ('Bronzeware') instead of aggregating for each artist"
    }
  },
  {
    "example_id": 2016,
    "prompt": "Add new diplomacy meeting records for 'Iraq', 'Colombia', and 'Indonesia' with meeting outcomes 'Successful', 'Pending', and 'Failed' respectively",
    "generated_sql": "INSERT INTO diplomacy_meetings (meeting_id, meeting_name, meeting_location, outcome) VALUES (1, 'Iraq', 'Cambodia', 'Successful'), (2, 'Colombia', 'Indonesia', 'Pending');",
    "reference_sql": "INSERT INTO diplomacy_meetings (country_name, meeting_outcome) VALUES ('Iraq', 'Successful'), ('Colombia', 'Pending'), ('Indonesia', 'Failed');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Only two records inserted; missing Indonesia with outcome 'Failed'."
    }
  },
  {
    "example_id": 2017,
    "prompt": "List all defense diplomacy events in Asia in 2018.",
    "generated_sql": "SELECT Dates.Date, Dates.Event FROM Dates INNER JOIN Events ON Dates.EventID = Events.EventID WHERE Events.Date IN (SELECT Dates.Date FROM Dates WHERE Events.EventCategory = 'Defense Diplomacy' AND Dates.EventDate >= '2018-01-01' AND Dates.EventDate < '2019-01-01');",
    "reference_sql": "SELECT event_name FROM defense_diplomacy INNER JOIN regions ON defense_diplomacy.region = regions.region WHERE region = 'Asia' AND date >= '2018-01-01' AND date <= '2018-12-31';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query omits the Asia region filter and misuses columns and subquery logic for event dates and categories."
    }
  },
  {
    "example_id": 2018,
    "prompt": "What is the maximum salary in the Research and Development department?",
    "generated_sql": "SELECT MAX(Salary) FROM Employees WHERE Department = 'Research and Development';",
    "reference_sql": "SELECT MAX(salary) FROM Employees WHERE department = 'Research and Development';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2019,
    "prompt": "What is the median age of artifacts in the 'Prehistoric_Artifacts' table?",
    "generated_sql": "SELECT AVG(age) FROM Prehistoric_Artifacts;",
    "reference_sql": "SELECT AVG(age) FROM (SELECT artifact_name, age FROM Prehistoric_Artifacts ORDER BY age) AS subquery GROUP BY artifact_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses AVG(age) to compute the average rather than the median age."
    }
  },
  {
    "example_id": 2020,
    "prompt": "What is the total number of streams per month, by platform, for the last 12 months?",
    "generated_sql": "SELECT platform, SUM(streams) as total_streams FROM streams WHERE timestamp >= DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 12 MONTH) GROUP BY platform;",
    "reference_sql": "SELECT * FROM total_streams_per_month;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query does not group by month and does not include a month column; it only aggregates by platform for the entire period instead of per month"
    }
  },
  {
    "example_id": 2021,
    "prompt": "How many unique one-time donors made donations in 'q4' of '2022'?",
    "generated_sql": "SELECT COUNT(DISTINCT donor_id) FROM donor_donations WHERE donation_year = 2022 AND donation_date BETWEEN '2022-04-01' AND '2022-04-30';",
    "reference_sql": "SELECT COUNT(DISTINCT donor_id) FROM Donations WHERE donor_type = 'one-time' AND QUARTER(donation_date) = 4 AND YEAR(donation_date) = 2022;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses wrong quarter (April instead of Q4) and does not filter for one-time donors"
    }
  },
  {
    "example_id": 2022,
    "prompt": "What is the installed capacity of renewable energy sources in countries that have a carbon tax?",
    "generated_sql": "SELECT SUM(installed_capacity) FROM renewable_energy_sources WHERE carbon_tax = true;",
    "reference_sql": "SELECT capacity FROM renewable_energy WHERE country IN (SELECT country FROM carbon_tax WHERE tax = TRUE);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on carbon_tax in the renewable_energy_sources table without joining to countries that have a carbon tax"
    }
  },
  {
    "example_id": 2023,
    "prompt": "What is the total carbon pricing revenue for Canada in 2021?",
    "generated_sql": "SELECT SUM(revenue) FROM carbon_pricing WHERE country = 'Canada' AND YEAR(revenue_date) = 2021;",
    "reference_sql": "SELECT revenue FROM carbon_pricing WHERE country = 'Canada' AND year = 2021;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2024,
    "prompt": "What is the production of well 'W010' in the 'OilWells' table for the year 2014?",
    "generated_sql": "SELECT well_name, production FROM OilWells WHERE well_name = 'W010' AND year = 2014;",
    "reference_sql": "SELECT Production FROM OilWells WHERE WellID = 'W010' AND DrillYear = 2014;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2025,
    "prompt": "What is the average home run distance for each player in the 2021 MLB season?",
    "generated_sql": "SELECT PlayerName, AVG(HomeRunDistance) as AvgHomeRuns FROM Players GROUP BY PlayerName;",
    "reference_sql": "SELECT team, AVG(avg_home_run_distance) as avg_distance FROM players GROUP BY team;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter for the 2021 season and uses Players table instead of a home run events table"
    }
  },
  {
    "example_id": 2026,
    "prompt": "What is the highest-scoring cricket match in history and which teams were involved?",
    "generated_sql": "SELECT team_name, MAX(matches) FROM cricket_matches GROUP BY team_name ORDER BY matches DESC LIMIT 1;",
    "reference_sql": "SELECT team_1, team_2, team_1_score, team_2_score FROM cricket_scores WHERE team_1_score + team_2_score = (SELECT MAX(team_1_score + team_2_score) FROM cricket_scores);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query groups by team_name and uses MAX(matches) but does not compute total score per match nor identify the highest-scoring match and its teams."
    }
  },
  {
    "example_id": 2027,
    "prompt": "What is the maximum number of games played by each team in the 'soccer_teams' table?",
    "generated_sql": "SELECT team, MAX(num_games) FROM soccer_teams GROUP BY team;",
    "reference_sql": "SELECT team_id, MAX(num_games) FROM soccer_teams GROUP BY team_id;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2028,
    "prompt": "What is the total revenue generated in 'January'?",
    "generated_sql": "SELECT SUM(revenue) FROM sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-01-31';",
    "reference_sql": "SELECT SUM(revenue) FROM january_revenue;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query arbitrarily restricts to January 2022, but the question does not specify a year"
    }
  },
  {
    "example_id": 2029,
    "prompt": "What is the average CO2 emission of transportation per order for each delivery method?",
    "generated_sql": "SELECT vehicle_type, AVG(co2_emission) as avg_co2_emission FROM vehicle_transit GROUP BY vehicle_type;",
    "reference_sql": "SELECT delivery_method, AVG(co2_emission_kg/orders) FROM delivery_methods GROUP BY delivery_method;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It averages CO2 per transit record instead of per order and does not account for orders or delivery method grouping."
    }
  },
  {
    "example_id": 2030,
    "prompt": "What's the maximum number of tweets by users from Germany in the technology category?",
    "generated_sql": "SELECT MAX(Tweets.TweetCount) FROM Tweets INNER JOIN Users ON Tweets.TweetID = Users.TweetID WHERE Users.Country = 'Germany' AND Tweets.Category = 'Technology';",
    "reference_sql": "SELECT MAX(users.tweets) FROM users WHERE users.country = 'Germany' AND users.category = 'technology';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses a TweetCount column instead of counting tweets per user and does not group by user; also joins on TweetID instead of UserID."
    }
  },
  {
    "example_id": 2031,
    "prompt": "What is the average price of each material in the 'textiles' table?",
    "generated_sql": "SELECT material, AVG(price) as avg_price FROM textiles GROUP BY material;",
    "reference_sql": "SELECT material, AVG(price) FROM textiles GROUP BY material;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2032,
    "prompt": "List all the Shariah-compliant investments made by ResponsibleCapital in 2020.",
    "generated_sql": "SELECT investments.investment_id, investments.name FROM investments INNER JOIN investments_cc ON investments.investment_id = investments_cc.investment_id WHERE investments.investment_date BETWEEN '2020-01-01' AND '2020-12-31' AND investments_cc.investment_type = 'Shariah-compliant';",
    "reference_sql": "SELECT investment_type, investment_amount FROM ResponsibleCapital WHERE investment_type = 'Shariah Compliant' AND YEAR(investment_date) = 2020;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter for investments made by ResponsibleCapital"
    }
  },
  {
    "example_id": 2033,
    "prompt": "Identify the suppliers offering organic products from Canada",
    "generated_sql": "SELECT supplier_id, name FROM suppliers WHERE country = 'Canada' AND organic = true;",
    "reference_sql": "SELECT s.name FROM suppliers s JOIN products p ON s.id = p.supplier_id AND p.is_organic = true AND s.country = p.product_country WHERE s.country = 'Canada';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Does not join with products to ensure suppliers actually offer organic products"
    }
  },
  {
    "example_id": 2034,
    "prompt": "List all suppliers providing \"vegan\" products that are also in the \"sustainable_practices\" view",
    "generated_sql": "SELECT * FROM vegan_suppliers;",
    "reference_sql": "SELECT DISTINCT p.supplier_id, p.product_name FROM products p JOIN suppliers s ON p.supplier_id = s.supplier_id WHERE p.is_vegan = true AND s.supplier_id IN (SELECT supplier_id FROM sustainable_practices);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Does not join with the sustainable_practices view to filter suppliers"
    }
  },
  {
    "example_id": 2035,
    "prompt": "What is the maximum distance for routes to 'City X'?",
    "generated_sql": "SELECT MAX(distance) FROM routes WHERE city_id = (SELECT id FROM cities WHERE name = 'City X');",
    "reference_sql": "SELECT destination_city, MAX(distance) FROM Routes WHERE destination_city = 'City X' GROUP BY destination_city;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2036,
    "prompt": "What is the total number of hospitals in India, and what are their names?",
    "generated_sql": "SELECT name, COUNT(*) as total_hospitals FROM hospitals WHERE country = 'India' GROUP BY name;",
    "reference_sql": "SELECT COUNT(*), name FROM india_hospitals WHERE type = 'Hospital' GROUP BY name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Groups by hospital name and counts per name instead of returning the overall count of hospitals in India and listing their names."
    }
  },
  {
    "example_id": 2037,
    "prompt": "Insert a new research grant into the research_grants table",
    "generated_sql": "INSERT INTO research_grants (id, grant_type, recipient_name, status) VALUES (1, 'Open Access', 'University of Texas at Austin', 'Open Access');",
    "reference_sql": "INSERT INTO research_grants (id, name, amount) VALUES (3, 'Grant C', 100000);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses 'Open Access' for both grant_type and status, likely incorrect value for status"
    }
  },
  {
    "example_id": 2038,
    "prompt": "Delete the entry for the green building with id 7 in the 'green_buildings' table",
    "generated_sql": "DELETE FROM green_buildings WHERE id = 7;",
    "reference_sql": "DELETE FROM green_buildings WHERE building_id = 7;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2039,
    "prompt": "What is the capacity of the largest geothermal energy project in California?",
    "generated_sql": "SELECT MAX(Capacity) FROM geothermal_project WHERE location = 'California';",
    "reference_sql": "SELECT MAX(capacity) FROM geothermal_projects WHERE state = 'CA';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2040,
    "prompt": "List the names of mental health parity officers and the number of trainings they have conducted in the mental_health schema.",
    "generated_sql": "SELECT name, COUNT(training_id) as num_training FROM mental_health.athletes WHERE mental_health.parity = TRUE GROUP BY name;",
    "reference_sql": "SELECT mental_health_parity_officers.name, COUNT(trainings_conducted.training_id) FROM mental_health_parity_officers INNER JOIN trainings_conducted ON mental_health_parity_officers.officer_id = trainings_conducted.officer_id GROUP BY mental_health_parity_officers.name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses wrong table and fields; does not join officers to trainings"
    }
  },
  {
    "example_id": 2041,
    "prompt": "What is the average mental health score for patients from historically marginalized communities?",
    "generated_sql": "SELECT AVG(mental_health_score) FROM patients WHERE community = 'Historically marginalized';",
    "reference_sql": "SELECT AVG(mental_health_score) FROM patients WHERE community IN ('African American', 'Latinx');",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2042,
    "prompt": "Delete all records in the \"hotel_reviews\" table that do not have a rating of at least 4?",
    "generated_sql": "DELETE FROM hotel_reviews WHERE rating > 4;",
    "reference_sql": "DELETE FROM hotel_reviews WHERE rating < 4;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses rating > 4 instead of deleting records with rating < 4"
    }
  },
  {
    "example_id": 2043,
    "prompt": "What is the total number of OTA (Online Travel Agency) bookings for each hotel in the USA, sorted by the hotel name?",
    "generated_sql": "SELECT h.name, COUNT(t.id) AS num_bookings FROM hotels h INNER JOIN bookings b ON h.id = b.hotel_id INNER JOIN bookings_t ON b.hotel_id = bookings.hotel_id INNER JOIN hotels_t ON b.hotel_id = hotel_t.id WHERE h.country = 'USA' GROUP BY h.name ORDER BY num_bookings DESC;",
    "reference_sql": "SELECT hotel_name, SUM(revenue) as total_bookings FROM hotel_bookings WHERE country = 'USA' GROUP BY hotel_name ORDER BY hotel_name;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query uses incorrect table aliases joins (bookings_t, hotels_t) and orders by num_bookings instead of hotel name."
    }
  },
  {
    "example_id": 2044,
    "prompt": "Calculate the average price of artworks exhibited in 'New York' with the 'modern' style in the 'Exhibitions' table.",
    "generated_sql": "SELECT AVG(price) FROM Exhibitions WHERE artist IN (SELECT artist FROM Artworks WHERE style = 'Modern' AND location = 'New York');",
    "reference_sql": "SELECT AVG(artwork_price) FROM Exhibitions WHERE exhibition_location = 'New York' AND exhibition_style = 'modern';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters artwork location instead of exhibition location and joins on artist rather than artwork identifier"
    }
  },
  {
    "example_id": 2045,
    "prompt": "What is the correlation between climate change and biodiversity in the Arctic?",
    "generated_sql": "SELECT correlation FROM climate_change_biodiversity WHERE region = 'Arctic';",
    "reference_sql": "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query assumes a precomputed correlation column instead of calculating it from climate change and biodiversity data"
    }
  },
  {
    "example_id": 2046,
    "prompt": "What is the total number of species observed in each location, ordered by the number of species in descending order?",
    "generated_sql": "SELECT location, COUNT(species) FROM species_observations GROUP BY location ORDER BY COUNT(species) DESC;",
    "reference_sql": "SELECT Location, COUNT(DISTINCT Species) as Total_Species FROM Animals GROUP BY Location ORDER BY Total_Species DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts rows instead of distinct species; should use COUNT(DISTINCT species)"
    }
  },
  {
    "example_id": 2047,
    "prompt": "What is the total number of language learners for each indigenous language this year?",
    "generated_sql": "SELECT Language.name, SUM(LanguageLearners.count) FROM LanguageLearners JOIN Language ON Language.id = LanguageLearners.language_id WHERE Language.year = 2022 GROUP BY Language.name",
    "reference_sql": "SELECT Languages.LanguageName, SUM(LanguageLearners.LearnerCount) AS TotalLearners FROM Languages INNER JOIN LanguageLearners ON Languages.LanguageID = LanguageLearners.LanguageID WHERE Languages.Indigenous = TRUE AND Year = 2023 GROUP BY Languages.LanguageName;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters on Language.year instead of LanguageLearners.year and does not restrict to indigenous languages"
    }
  },
  {
    "example_id": 2048,
    "prompt": "What is the average age of clinical psychologists who have treated mental health patients in Asia, ordered by the number of patients treated?",
    "generated_sql": "SELECT AVG(patient_age) FROM clinical_psychologists WHERE country = 'Asia' ORDER BY patient_age DESC;",
    "reference_sql": "SELECT AVG(age) as avg_age FROM (SELECT age, ROW_NUMBER() OVER (PARTITION BY country ORDER BY patients DESC) as rn FROM psychologists WHERE country IN ('China', 'Japan', 'South Korea', 'India')) t WHERE rn = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses patient_age instead of psychologist age and does not consider number of patients treated for ordering"
    }
  },
  {
    "example_id": 2049,
    "prompt": "What is the average cost of projects per engineer in the 'WestCoast' region, ordered by the highest average cost?",
    "generated_sql": "SELECT region, AVG(cost) as avg_cost FROM projects WHERE region = 'WestCoast' GROUP BY region ORDER BY avg_cost DESC;",
    "reference_sql": "SELECT Region, AVG(Cost) AS AvgCost FROM Engineers WHERE Region = 'WestCoast' GROUP BY Region ORDER BY AvgCost DESC;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query groups by region instead of per engineer"
    }
  },
  {
    "example_id": 2050,
    "prompt": "Find the percentage change in tourism to Thailand between 2019 and 2021.",
    "generated_sql": "SELECT 100.0 * (1 - (SELECT AVG(tourism_change) FROM tourism_data WHERE country = 'Thailand') OVER (PARTITION BY year ORDER BY year DESC)) * 100 FROM tourism_data WHERE year = 2021;",
    "reference_sql": "SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query does not compute the difference between 2019 and 2021 tourism values for Thailand and incorrectly uses aggregates and window functions."
    }
  },
  {
    "example_id": 2051,
    "prompt": "What is the average number of restorative justice sessions attended, by participant's age group, for cases closed in the past year?",
    "generated_sql": "SELECT AVG(sessions) FROM restorative_justice_sessions WHERE case_closed >= DATEADD(year, -1, CURRENT_DATE) AND participant_age_group = (SELECT age FROM restorative_justice_sessions WHERE case_closed = TRUE);",
    "reference_sql": "SELECT participant_age_group, AVG(sessions_attended) FROM restorative_justice WHERE case_closed_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY participant_age_group;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not group by participant_age_group and uses an incorrect subquery filter, returning a single average instead of averages per age group."
    }
  },
  {
    "example_id": 2052,
    "prompt": "List all maritime law compliance projects in the Atlantic and Southern Oceans.",
    "generated_sql": "SELECT project_name FROM maritime_law_compliance WHERE ocean IN ('Atlantic', 'Southern');",
    "reference_sql": "SELECT project FROM atlantic_ocean WHERE region = 'Atlantic Ocean' UNION SELECT project FROM southern_ocean WHERE region = 'Southern Ocean';",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2053,
    "prompt": "What is the average pollution level in the 'Arctic' region in the last year?'",
    "generated_sql": "SELECT AVG(pollution_level) FROM Arctic_Pollution WHERE location = 'Arctic' AND year >= 2018;",
    "reference_sql": "SELECT AVG(pollution_level) FROM pollution_data WHERE region = 'Arctic' AND inspection_date > DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filters for year >= 2018 instead of only the last year"
    }
  },
  {
    "example_id": 2054,
    "prompt": "What is the maximum depth of the Indian Ocean?",
    "generated_sql": "SELECT MAX(max_depth) FROM ocean_data WHERE location = 'Indian Ocean';",
    "reference_sql": "SELECT MAX(avg_depth) FROM IndianOcean WHERE trench_name IS NOT NULL;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2055,
    "prompt": "Calculate the average sales per day for a specific item",
    "generated_sql": "SELECT AVG(sales) FROM sales WHERE item = 'apple' AND date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 DAY) AND CURRENT_DATE;",
    "reference_sql": "SELECT AVG(sales_by_time.sales_amount) FROM sales_by_time JOIN time ON sales_by_time.time_id = time.time_id WHERE sales_by_time.item_id = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Hard-coded item and limited to last day without grouping days for average per day"
    }
  },
  {
    "example_id": 2056,
    "prompt": "List all environmental impact assessments for mining operations in Canada.",
    "generated_sql": "SELECT * FROM environmental_impact WHERE country = 'Canada';",
    "reference_sql": "SELECT mining_operation.name, environmental_assessment.date, environmental_assessment.impact FROM mining_operation JOIN environmental_assessment ON mining_operation.id = environmental_assessment.mining_operation_id WHERE mining_operation.location = 'Canada';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Missing filter to restrict assessments to mining operations"
    }
  },
  {
    "example_id": 2057,
    "prompt": "What types of equipment were rented in total in the 'equipment_rental' department?",
    "generated_sql": "SELECT Equipment.name, Equipment.type, SUM(DW.quantity) FROM Equipment JOIN Warehouse ON Equipment.equipment_id = Warehouse.equipment_id WHERE Warehouse.department = 'equipment_rental' GROUP BY Equipment.name, Equipment.type;",
    "reference_sql": "SELECT equipment, SUM(quantity) AS total_quantity FROM equipment_rental GROUP BY equipment;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Uses undefined alias DW and groups by name and type instead of aggregating by type only"
    }
  },
  {
    "example_id": 2058,
    "prompt": "Identify the number of mobile and broadband subscribers per region, and their respective percentage contributions to total subscribers in each service category.",
    "generated_sql": "SELECT region, subscriber_count, (subscriber_count * 100.0 / total_subscribers) as mobile_percentage, (subscriber_count * 100.0 / total_subscribers) as broadband_percentage FROM subscriber_demographics GROUP BY region;",
    "reference_sql": "SELECT R.Region, S.Service, COUNT(M.SubscriberID) AS MobileCount, COUNT(B.SubscriberID) AS BroadbandCount, (COUNT(M.SubscriberID)::float / (COUNT(M.SubscriberID) + COUNT(B.SubscriberID))) * 100 AS MobilePercent, (COUNT(B.SubscriberID)::float / (COUNT(M.SubscriberID) + COUNT(B.SubscriberID))) * 100 AS BroadbandPercent FROM MobileSubscribers M FULL OUTER JOIN BroadbandSubscribers B ON M.Region = B.Region AND M.Service = B.Service JOIN Regions R ON M.Region = R.Region JOIN Services S ON M.Service = S.Service GROUP BY R.Region, S.Service;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not separate mobile and broadband counts or calculate percentages per service category, and references an undefined total_subscribers field."
    }
  },
  {
    "example_id": 2059,
    "prompt": "Update the mobile_subscribers table to add a new subscriber with name \"Jose Garcia\" from Mexico City, mobile_number +521234567890 and subscription_date 2023-03-01",
    "generated_sql": "UPDATE mobile_subscribers SET mobile_number = 521234567890, subscription_date = 2023-03-01 WHERE name = 'Jose Garcia' AND mobile_country = 'Mexico City';",
    "reference_sql": "UPDATE mobile_subscribers SET subscriber_name = 'Jose Garcia', mobile_number = '+521234567890', subscription_date = '2023-03-01' WHERE subscriber_id = (SELECT MAX(subscriber_id) FROM mobile_subscribers) + 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Used UPDATE instead of INSERT to add a new subscriber"
    }
  },
  {
    "example_id": 2060,
    "prompt": "Get the number of unique genres represented by artists from the United Kingdom.",
    "generated_sql": "SELECT COUNT(DISTINCT Genre) FROM Artists WHERE Country = 'UK';",
    "reference_sql": "SELECT COUNT(DISTINCT genre) FROM artists WHERE country = 'United Kingdom';",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Filtering on Country = 'UK' may not match 'United Kingdom' stored in the table"
    }
  },
  {
    "example_id": 2061,
    "prompt": "How many news articles were published in the last week, categorized as 'Politics'?",
    "generated_sql": "SELECT COUNT(*) FROM News WHERE title LIKE '%Politics%' AND post_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK);",
    "reference_sql": "SELECT COUNT(*) FROM news WHERE category = 'Politics' AND publish_date >= CURDATE() - INTERVAL 1 WEEK",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It filters on title containing 'Politics' instead of using the 'category' column for 'Politics'."
    }
  },
  {
    "example_id": 2062,
    "prompt": "What is the average donation amount for each mission_area in the 'Organizations' and 'Donations' tables?",
    "generated_sql": "SELECT Mission_Area, AVG(Donation_Amount) FROM Organizations GROUP BY Mission_Area;",
    "reference_sql": "SELECT O.mission_area, AVG(D.donation_amount) FROM Donations D INNER JOIN Organizations O ON D.org_id = O.org_id GROUP BY O.mission_area;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query aggregates on the Organizations table without joining the Donations table to access Donation_Amount"
    }
  },
  {
    "example_id": 2063,
    "prompt": "List the names of players who have played \"Cosmic Cricket\" for more than 3 hours in total.",
    "generated_sql": "SELECT name FROM players WHERE play_time > 3;",
    "reference_sql": "SELECT PlayerName FROM Players INNER JOIN PlayerTimes ON Players.PlayerID = PlayerTimes.PlayerID WHERE Game = 'Cosmic Cricket' GROUP BY PlayerID HAVING SUM(TotalTime) > 3 * 60;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Query does not filter by the 'Cosmic Cricket' game or aggregate total play time"
    }
  },
  {
    "example_id": 2064,
    "prompt": "Find the number of users who played game 'A' in the last week, grouped by their regions.",
    "generated_sql": "SELECT region, COUNT(*) FROM user_games WHERE game_name = 'A' AND play_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY region;",
    "reference_sql": "SELECT region, COUNT(user_id) FROM user_actions WHERE game_id = (SELECT id FROM games WHERE game_name = 'A') AND action_date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK) GROUP BY region;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Counts all plays rather than distinct users; should use COUNT(DISTINCT user_id)"
    }
  },
  {
    "example_id": 2065,
    "prompt": "What is the average annual dysprosium production for each refiner from 2017 to 2019?",
    "generated_sql": "SELECT Refiner, AVG(Year) AS AvgYear, SUM(Year) AS AvgYear, ROW_NUMBER() OVER (ORDER BY YEAR(Date) ASC) AS Rank FROM DysprosiumProduction WHERE Year BETWEEN 2017 AND 2019 GROUP BY Refiner;",
    "reference_sql": "SELECT Refiner, AVG(Production) as Avg_Production FROM DysprosiumProduction WHERE Year IN (2017, 2018, 2019) GROUP BY Refiner;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Aggregates the Year column and includes irrelevant ROW_NUMBER instead of averaging the production values"
    }
  },
  {
    "example_id": 2066,
    "prompt": "Which country had the highest production of Lanthanum in 2019?",
    "generated_sql": "SELECT country, SUM(production) as total_production FROM production_data WHERE element = 'Lanthanum' AND year = 2019 GROUP BY country ORDER BY total_production DESC LIMIT 1;",
    "reference_sql": "SELECT country, MAX(quantity) as max_production FROM production WHERE element = 'Lanthanum' AND year = 2019;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2067,
    "prompt": "Update the name of Restaurant P to 'Green Garden' in the 'restaurants' table.",
    "generated_sql": "UPDATE restaurants SET name = 'Green Garden' WHERE name = 'Green Garden';",
    "reference_sql": "UPDATE restaurants SET name = 'Green Garden' WHERE restaurant_id = (SELECT restaurant_id FROM restaurants WHERE name = 'Restaurant P');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The WHERE clause updates rows already named 'Green Garden' instead of targeting 'Restaurant P'."
    }
  },
  {
    "example_id": 2068,
    "prompt": "What is the highest altitude of all satellites in Low Earth Orbit (LEO)?",
    "generated_sql": "SELECT MAX(altitude) FROM satellites WHERE orbit_type = 'LEO';",
    "reference_sql": "SELECT MAX(altitude) FROM leo_satellites;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2069,
    "prompt": "What is the total number of launches by each country in the space domain?",
    "generated_sql": "SELECT country, SUM(missions) as total_missions FROM space_missions GROUP BY country;",
    "reference_sql": "SELECT launches.country, COUNT(launches.id) FROM launches GROUP BY launches.country;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "It sums a non\u2010existent missions column instead of counting rows (launches) per country"
    }
  },
  {
    "example_id": 2070,
    "prompt": "Which space agency has launched the most satellites in descending order?",
    "generated_sql": "SELECT agency, COUNT(*) as num_satellites FROM space_exploration GROUP BY agency ORDER BY num_satellites DESC;",
    "reference_sql": "SELECT Agency_Name, COUNT(*) as Total_Satellites FROM Space_Satellites GROUP BY Agency_Name ORDER BY Total_Satellites DESC;",
    "evaluation": {
      "isCorrect": true,
      "errorType": null,
      "errorExplanation": null
    }
  },
  {
    "example_id": 2071,
    "prompt": "Insert a new athlete wellbeing program for a team into the AthleteWellbeingPrograms table.",
    "generated_sql": "INSERT INTO AthleteWellbeingPrograms (team_id, athlete_name, team_name) VALUES (1, 'Bob', 'Barcelona');",
    "reference_sql": "INSERT INTO AthleteWellbeingPrograms (ProgramID, TeamID, ProgramName, StartDate, EndDate) VALUES (1, 1, 'Mental Health Workshops', '2023-01-01', '2023-12-31');",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Inserts athlete_name and team_name instead of program-specific fields (e.g., program_name, program_details) expected for a wellbeing program"
    }
  },
  {
    "example_id": 2072,
    "prompt": "Insert a new record for the 'Golden State Warriors' with 500 tickets sold.",
    "generated_sql": "INSERT INTO games (game_id, sport, win_percentage, ticket_sold) VALUES (4, 'Cycling', 80.0, 500);",
    "reference_sql": "INSERT INTO tickets (id, team, quantity) VALUES (7, 'Golden State Warriors', 500);",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "The query inserts into incorrect columns with wrong values and does not include the team name"
    }
  },
  {
    "example_id": 2073,
    "prompt": "How many autonomous buses are in the \"fleet\" table?",
    "generated_sql": "SELECT COUNT(*) FROM fleet WHERE is_autonomous = TRUE;",
    "reference_sql": "SELECT COUNT(*) FROM fleet WHERE vehicle_type = 'Bus' AND is_autonomous = true;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "logic_error",
      "errorExplanation": "Missing filter on vehicle type = 'bus'"
    }
  },
  {
    "example_id": 2074,
    "prompt": "What is the total claim amount for policies sold in the first quarter of each year?",
    "generated_sql": "SELECT SUM(claim_amount) FROM claims WHERE sale_date BETWEEN '2022-01-01' AND '2022-03-31';",
    "reference_sql": "SELECT SUM(ClaimAmount) OVER (PARTITION BY DATEPART(quarter, SaleDate)) as TotalClaimAmount FROM Claims JOIN Policies ON Claims.PolicyID = Policies.PolicyID WHERE DATEPART(quarter, SaleDate) = 1;",
    "evaluation": {
      "isCorrect": false,
      "errorType": "incomplete",
      "errorExplanation": "Query only calculates for a specific year (2022) and does not group results by year"
    }
  }
]